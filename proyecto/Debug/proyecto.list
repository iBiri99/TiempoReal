
proyecto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7f0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d4  0800b990  0800b990  0001b990  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c064  0800c064  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c064  0800c064  0001c064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c06c  0800c06c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c06c  0800c06c  0001c06c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c070  0800c070  0001c070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800c074  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b68  200001e4  0800c258  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d4c  0800c258  00024d4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a826  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003631  00000000  00000000  0003aa3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  0003e070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001080  00000000  00000000  0003f218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004fb4  00000000  00000000  00040298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000137c0  00000000  00000000  0004524c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e5ea  00000000  00000000  00058a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f6ff6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bb8  00000000  00000000  000f704c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b978 	.word	0x0800b978

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800b978 	.word	0x0800b978

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c8c:	f000 b96e 	b.w	8000f6c <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468c      	mov	ip, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f040 8083 	bne.w	8000dbe <__udivmoddi4+0x116>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4617      	mov	r7, r2
 8000cbc:	d947      	bls.n	8000d4e <__udivmoddi4+0xa6>
 8000cbe:	fab2 f282 	clz	r2, r2
 8000cc2:	b142      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc4:	f1c2 0020 	rsb	r0, r2, #32
 8000cc8:	fa24 f000 	lsr.w	r0, r4, r0
 8000ccc:	4091      	lsls	r1, r2
 8000cce:	4097      	lsls	r7, r2
 8000cd0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cd4:	4094      	lsls	r4, r2
 8000cd6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fbbc f6f8 	udiv	r6, ip, r8
 8000ce0:	fa1f fe87 	uxth.w	lr, r7
 8000ce4:	fb08 c116 	mls	r1, r8, r6, ip
 8000ce8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cec:	fb06 f10e 	mul.w	r1, r6, lr
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x60>
 8000cf4:	18fb      	adds	r3, r7, r3
 8000cf6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cfa:	f080 8119 	bcs.w	8000f30 <__udivmoddi4+0x288>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 8116 	bls.w	8000f30 <__udivmoddi4+0x288>
 8000d04:	3e02      	subs	r6, #2
 8000d06:	443b      	add	r3, r7
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d10:	fb08 3310 	mls	r3, r8, r0, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d1c:	45a6      	cmp	lr, r4
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x8c>
 8000d20:	193c      	adds	r4, r7, r4
 8000d22:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d26:	f080 8105 	bcs.w	8000f34 <__udivmoddi4+0x28c>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f240 8102 	bls.w	8000f34 <__udivmoddi4+0x28c>
 8000d30:	3802      	subs	r0, #2
 8000d32:	443c      	add	r4, r7
 8000d34:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d38:	eba4 040e 	sub.w	r4, r4, lr
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	b11d      	cbz	r5, 8000d48 <__udivmoddi4+0xa0>
 8000d40:	40d4      	lsrs	r4, r2
 8000d42:	2300      	movs	r3, #0
 8000d44:	e9c5 4300 	strd	r4, r3, [r5]
 8000d48:	4631      	mov	r1, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	b902      	cbnz	r2, 8000d52 <__udivmoddi4+0xaa>
 8000d50:	deff      	udf	#255	; 0xff
 8000d52:	fab2 f282 	clz	r2, r2
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	d150      	bne.n	8000dfc <__udivmoddi4+0x154>
 8000d5a:	1bcb      	subs	r3, r1, r7
 8000d5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d60:	fa1f f887 	uxth.w	r8, r7
 8000d64:	2601      	movs	r6, #1
 8000d66:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d6a:	0c21      	lsrs	r1, r4, #16
 8000d6c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d74:	fb08 f30c 	mul.w	r3, r8, ip
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0xe4>
 8000d7c:	1879      	adds	r1, r7, r1
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0xe2>
 8000d84:	428b      	cmp	r3, r1
 8000d86:	f200 80e9 	bhi.w	8000f5c <__udivmoddi4+0x2b4>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1ac9      	subs	r1, r1, r3
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d98:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x10c>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x10a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80d9 	bhi.w	8000f64 <__udivmoddi4+0x2bc>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e7bf      	b.n	8000d3e <__udivmoddi4+0x96>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0x12e>
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	f000 80b1 	beq.w	8000f2a <__udivmoddi4+0x282>
 8000dc8:	2600      	movs	r6, #0
 8000dca:	e9c5 0100 	strd	r0, r1, [r5]
 8000dce:	4630      	mov	r0, r6
 8000dd0:	4631      	mov	r1, r6
 8000dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd6:	fab3 f683 	clz	r6, r3
 8000dda:	2e00      	cmp	r6, #0
 8000ddc:	d14a      	bne.n	8000e74 <__udivmoddi4+0x1cc>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d302      	bcc.n	8000de8 <__udivmoddi4+0x140>
 8000de2:	4282      	cmp	r2, r0
 8000de4:	f200 80b8 	bhi.w	8000f58 <__udivmoddi4+0x2b0>
 8000de8:	1a84      	subs	r4, r0, r2
 8000dea:	eb61 0103 	sbc.w	r1, r1, r3
 8000dee:	2001      	movs	r0, #1
 8000df0:	468c      	mov	ip, r1
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	d0a8      	beq.n	8000d48 <__udivmoddi4+0xa0>
 8000df6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dfa:	e7a5      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f603 	lsr.w	r6, r0, r3
 8000e04:	4097      	lsls	r7, r2
 8000e06:	fa01 f002 	lsl.w	r0, r1, r2
 8000e0a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0e:	40d9      	lsrs	r1, r3
 8000e10:	4330      	orrs	r0, r6
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e18:	fa1f f887 	uxth.w	r8, r7
 8000e1c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e24:	fb06 f108 	mul.w	r1, r6, r8
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2e:	d909      	bls.n	8000e44 <__udivmoddi4+0x19c>
 8000e30:	18fb      	adds	r3, r7, r3
 8000e32:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e36:	f080 808d 	bcs.w	8000f54 <__udivmoddi4+0x2ac>
 8000e3a:	4299      	cmp	r1, r3
 8000e3c:	f240 808a 	bls.w	8000f54 <__udivmoddi4+0x2ac>
 8000e40:	3e02      	subs	r6, #2
 8000e42:	443b      	add	r3, r7
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b281      	uxth	r1, r0
 8000e48:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e4c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e54:	fb00 f308 	mul.w	r3, r0, r8
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	d907      	bls.n	8000e6c <__udivmoddi4+0x1c4>
 8000e5c:	1879      	adds	r1, r7, r1
 8000e5e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e62:	d273      	bcs.n	8000f4c <__udivmoddi4+0x2a4>
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d971      	bls.n	8000f4c <__udivmoddi4+0x2a4>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	4439      	add	r1, r7
 8000e6c:	1acb      	subs	r3, r1, r3
 8000e6e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e72:	e778      	b.n	8000d66 <__udivmoddi4+0xbe>
 8000e74:	f1c6 0c20 	rsb	ip, r6, #32
 8000e78:	fa03 f406 	lsl.w	r4, r3, r6
 8000e7c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e80:	431c      	orrs	r4, r3
 8000e82:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e86:	fa01 f306 	lsl.w	r3, r1, r6
 8000e8a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e8e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e92:	431f      	orrs	r7, r3
 8000e94:	0c3b      	lsrs	r3, r7, #16
 8000e96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9a:	fa1f f884 	uxth.w	r8, r4
 8000e9e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ea2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ea6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eaa:	458a      	cmp	sl, r1
 8000eac:	fa02 f206 	lsl.w	r2, r2, r6
 8000eb0:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb4:	d908      	bls.n	8000ec8 <__udivmoddi4+0x220>
 8000eb6:	1861      	adds	r1, r4, r1
 8000eb8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ebc:	d248      	bcs.n	8000f50 <__udivmoddi4+0x2a8>
 8000ebe:	458a      	cmp	sl, r1
 8000ec0:	d946      	bls.n	8000f50 <__udivmoddi4+0x2a8>
 8000ec2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ec6:	4421      	add	r1, r4
 8000ec8:	eba1 010a 	sub.w	r1, r1, sl
 8000ecc:	b2bf      	uxth	r7, r7
 8000ece:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ed2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ed6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eda:	fb00 f808 	mul.w	r8, r0, r8
 8000ede:	45b8      	cmp	r8, r7
 8000ee0:	d907      	bls.n	8000ef2 <__udivmoddi4+0x24a>
 8000ee2:	19e7      	adds	r7, r4, r7
 8000ee4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ee8:	d22e      	bcs.n	8000f48 <__udivmoddi4+0x2a0>
 8000eea:	45b8      	cmp	r8, r7
 8000eec:	d92c      	bls.n	8000f48 <__udivmoddi4+0x2a0>
 8000eee:	3802      	subs	r0, #2
 8000ef0:	4427      	add	r7, r4
 8000ef2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ef6:	eba7 0708 	sub.w	r7, r7, r8
 8000efa:	fba0 8902 	umull	r8, r9, r0, r2
 8000efe:	454f      	cmp	r7, r9
 8000f00:	46c6      	mov	lr, r8
 8000f02:	4649      	mov	r1, r9
 8000f04:	d31a      	bcc.n	8000f3c <__udivmoddi4+0x294>
 8000f06:	d017      	beq.n	8000f38 <__udivmoddi4+0x290>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x27a>
 8000f0a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f0e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f12:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f16:	40f2      	lsrs	r2, r6
 8000f18:	ea4c 0202 	orr.w	r2, ip, r2
 8000f1c:	40f7      	lsrs	r7, r6
 8000f1e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f22:	2600      	movs	r6, #0
 8000f24:	4631      	mov	r1, r6
 8000f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f2a:	462e      	mov	r6, r5
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	e70b      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000f30:	4606      	mov	r6, r0
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0x60>
 8000f34:	4618      	mov	r0, r3
 8000f36:	e6fd      	b.n	8000d34 <__udivmoddi4+0x8c>
 8000f38:	4543      	cmp	r3, r8
 8000f3a:	d2e5      	bcs.n	8000f08 <__udivmoddi4+0x260>
 8000f3c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f40:	eb69 0104 	sbc.w	r1, r9, r4
 8000f44:	3801      	subs	r0, #1
 8000f46:	e7df      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e7d2      	b.n	8000ef2 <__udivmoddi4+0x24a>
 8000f4c:	4660      	mov	r0, ip
 8000f4e:	e78d      	b.n	8000e6c <__udivmoddi4+0x1c4>
 8000f50:	4681      	mov	r9, r0
 8000f52:	e7b9      	b.n	8000ec8 <__udivmoddi4+0x220>
 8000f54:	4666      	mov	r6, ip
 8000f56:	e775      	b.n	8000e44 <__udivmoddi4+0x19c>
 8000f58:	4630      	mov	r0, r6
 8000f5a:	e74a      	b.n	8000df2 <__udivmoddi4+0x14a>
 8000f5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f60:	4439      	add	r1, r7
 8000f62:	e713      	b.n	8000d8c <__udivmoddi4+0xe4>
 8000f64:	3802      	subs	r0, #2
 8000f66:	443c      	add	r4, r7
 8000f68:	e724      	b.n	8000db4 <__udivmoddi4+0x10c>
 8000f6a:	bf00      	nop

08000f6c <__aeabi_idiv0>:
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f74:	f3bf 8f4f 	dsb	sy
}
 8000f78:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <__NVIC_SystemReset+0x24>)
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000f82:	4904      	ldr	r1, [pc, #16]	; (8000f94 <__NVIC_SystemReset+0x24>)
 8000f84:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <__NVIC_SystemReset+0x28>)
 8000f86:	4313      	orrs	r3, r2
 8000f88:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f8a:	f3bf 8f4f 	dsb	sy
}
 8000f8e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <__NVIC_SystemReset+0x20>
 8000f94:	e000ed00 	.word	0xe000ed00
 8000f98:	05fa0004 	.word	0x05fa0004

08000f9c <selTemp>:
void changeLed (uint8_t state);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void selTemp (){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0

	  ADC_ChannelConfTypeDef sConfig = {0};
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]

	  sConfig.Channel = ADC_CHANNEL_0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000fb6:	2307      	movs	r3, #7
 8000fb8:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fba:	463b      	mov	r3, r7
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4806      	ldr	r0, [pc, #24]	; (8000fd8 <selTemp+0x3c>)
 8000fc0:	f001 fc94 	bl	80028ec <HAL_ADC_ConfigChannel>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <selTemp+0x32>
	  {
	    Error_Handler();
 8000fca:	f001 f83f 	bl	800204c <Error_Handler>
	  }
}
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20004b34 	.word	0x20004b34

08000fdc <selLight>:

void selLight (){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0

	  ADC_ChannelConfTypeDef sConfig = {0};
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]

	  sConfig.Channel = ADC_CHANNEL_1;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	607b      	str	r3, [r7, #4]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4806      	ldr	r0, [pc, #24]	; (8001014 <selLight+0x38>)
 8000ffc:	f001 fc76 	bl	80028ec <HAL_ADC_ConfigChannel>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <selLight+0x2e>
	  {
	    Error_Handler();
 8001006:	f001 f821 	bl	800204c <Error_Handler>
	  }
}
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20004b34 	.word	0x20004b34

08001018 <selRoll>:

void selRoll (){
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0

	  ADC_ChannelConfTypeDef sConfig = {0};
 800101e:	463b      	mov	r3, r7
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]

	  sConfig.Channel = ADC_CHANNEL_4;
 800102a:	2304      	movs	r3, #4
 800102c:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 800102e:	2301      	movs	r3, #1
 8001030:	607b      	str	r3, [r7, #4]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001032:	463b      	mov	r3, r7
 8001034:	4619      	mov	r1, r3
 8001036:	4806      	ldr	r0, [pc, #24]	; (8001050 <selRoll+0x38>)
 8001038:	f001 fc58 	bl	80028ec <HAL_ADC_ConfigChannel>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <selRoll+0x2e>
	  {
	    Error_Handler();
 8001042:	f001 f803 	bl	800204c <Error_Handler>
	  }
}
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20004b34 	.word	0x20004b34

08001054 <selPitch>:

void selPitch (){
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0

	  ADC_ChannelConfTypeDef sConfig = {0};
 800105a:	463b      	mov	r3, r7
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]

	  sConfig.Channel = ADC_CHANNEL_6;
 8001066:	2306      	movs	r3, #6
 8001068:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 800106a:	2301      	movs	r3, #1
 800106c:	607b      	str	r3, [r7, #4]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106e:	463b      	mov	r3, r7
 8001070:	4619      	mov	r1, r3
 8001072:	4806      	ldr	r0, [pc, #24]	; (800108c <selPitch+0x38>)
 8001074:	f001 fc3a 	bl	80028ec <HAL_ADC_ConfigChannel>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <selPitch+0x2e>
	  {
	    Error_Handler();
 800107e:	f000 ffe5 	bl	800204c <Error_Handler>
	  }
}
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20004b34 	.word	0x20004b34

08001090 <selYaw>:

void selYaw (){
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0

	ADC_ChannelConfTypeDef sConfig = {0};
 8001096:	463b      	mov	r3, r7
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]

	  sConfig.Channel = ADC_CHANNEL_7;
 80010a2:	2307      	movs	r3, #7
 80010a4:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 80010a6:	2301      	movs	r3, #1
 80010a8:	607b      	str	r3, [r7, #4]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010aa:	463b      	mov	r3, r7
 80010ac:	4619      	mov	r1, r3
 80010ae:	4806      	ldr	r0, [pc, #24]	; (80010c8 <selYaw+0x38>)
 80010b0:	f001 fc1c 	bl	80028ec <HAL_ADC_ConfigChannel>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <selYaw+0x2e>
	  {
	    Error_Handler();
 80010ba:	f000 ffc7 	bl	800204c <Error_Handler>
	  }
}
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20004b34 	.word	0x20004b34

080010cc <buildMessage>:

uint8_t buildMessage (uint8_t* string, struct sensors_t sensors){
 80010cc:	b084      	sub	sp, #16
 80010ce:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010d2:	b08e      	sub	sp, #56	; 0x38
 80010d4:	af08      	add	r7, sp, #32
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80010dc:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	uint8_t size;

	size = sprintf(str.c,"%.2f\t\t\t%.2f\t\t\t%.2f\t\t\t%.2f\t\t\t%.2f\n",sensors.temp,sensors.light,sensors.roll,sensors.pitch,sensors.yaw);
 80010e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff fa48 	bl	8000578 <__aeabi_f2d>
 80010e8:	e9c7 0100 	strd	r0, r1, [r7]
 80010ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fa42 	bl	8000578 <__aeabi_f2d>
 80010f4:	4604      	mov	r4, r0
 80010f6:	460d      	mov	r5, r1
 80010f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fa3c 	bl	8000578 <__aeabi_f2d>
 8001100:	4680      	mov	r8, r0
 8001102:	4689      	mov	r9, r1
 8001104:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fa36 	bl	8000578 <__aeabi_f2d>
 800110c:	4682      	mov	sl, r0
 800110e:	468b      	mov	fp, r1
 8001110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fa30 	bl	8000578 <__aeabi_f2d>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001120:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001124:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001128:	e9cd 4500 	strd	r4, r5, [sp]
 800112c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001130:	4906      	ldr	r1, [pc, #24]	; (800114c <buildMessage+0x80>)
 8001132:	4807      	ldr	r0, [pc, #28]	; (8001150 <buildMessage+0x84>)
 8001134:	f007 feec 	bl	8008f10 <siprintf>
 8001138:	4603      	mov	r3, r0
 800113a:	75fb      	strb	r3, [r7, #23]
	return size;
 800113c:	7dfb      	ldrb	r3, [r7, #23]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001148:	b004      	add	sp, #16
 800114a:	4770      	bx	lr
 800114c:	0800ba4c 	.word	0x0800ba4c
 8001150:	20004bf0 	.word	0x20004bf0
 8001154:	00000000 	.word	0x00000000

08001158 <changeTiltUnit>:

float changeTiltUnit (float tilt, char* unit){//rad to deg
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001162:	6038      	str	r0, [r7, #0]

	if (strcmp(unit,"deg") == 0){
 8001164:	4916      	ldr	r1, [pc, #88]	; (80011c0 <changeTiltUnit+0x68>)
 8001166:	6838      	ldr	r0, [r7, #0]
 8001168:	f7ff f83a 	bl	80001e0 <strcmp>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d118      	bne.n	80011a4 <changeTiltUnit+0x4c>

		tilt = tilt*180.0 / PI;
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff fa00 	bl	8000578 <__aeabi_f2d>
 8001178:	f04f 0200 	mov.w	r2, #0
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <changeTiltUnit+0x6c>)
 800117e:	f7ff fa53 	bl	8000628 <__aeabi_dmul>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	4610      	mov	r0, r2
 8001188:	4619      	mov	r1, r3
 800118a:	a30b      	add	r3, pc, #44	; (adr r3, 80011b8 <changeTiltUnit+0x60>)
 800118c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001190:	f7ff fb74 	bl	800087c <__aeabi_ddiv>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	4610      	mov	r0, r2
 800119a:	4619      	mov	r1, r3
 800119c:	f7ff fd1c 	bl	8000bd8 <__aeabi_d2f>
 80011a0:	4603      	mov	r3, r0
 80011a2:	607b      	str	r3, [r7, #4]
	}
	return tilt;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	ee07 3a90 	vmov	s15, r3
}
 80011aa:	eeb0 0a67 	vmov.f32	s0, s15
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	f3af 8000 	nop.w
 80011b8:	54442eea 	.word	0x54442eea
 80011bc:	400921fb 	.word	0x400921fb
 80011c0:	0800ba70 	.word	0x0800ba70
 80011c4:	40668000 	.word	0x40668000

080011c8 <changeTempUnit>:
float changeTempUnit (float temp, char unit){//C to whatever
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80011d2:	4603      	mov	r3, r0
 80011d4:	70fb      	strb	r3, [r7, #3]

	switch (unit){
 80011d6:	78fb      	ldrb	r3, [r7, #3]
 80011d8:	3b43      	subs	r3, #67	; 0x43
 80011da:	2b0f      	cmp	r3, #15
 80011dc:	d870      	bhi.n	80012c0 <changeTempUnit+0xf8>
 80011de:	a201      	add	r2, pc, #4	; (adr r2, 80011e4 <changeTempUnit+0x1c>)
 80011e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e4:	080012c1 	.word	0x080012c1
 80011e8:	080012c1 	.word	0x080012c1
 80011ec:	080012c1 	.word	0x080012c1
 80011f0:	08001247 	.word	0x08001247
 80011f4:	080012c1 	.word	0x080012c1
 80011f8:	080012c1 	.word	0x080012c1
 80011fc:	080012c1 	.word	0x080012c1
 8001200:	080012c1 	.word	0x080012c1
 8001204:	08001225 	.word	0x08001225
 8001208:	080012c1 	.word	0x080012c1
 800120c:	080012c1 	.word	0x080012c1
 8001210:	080012c1 	.word	0x080012c1
 8001214:	080012c1 	.word	0x080012c1
 8001218:	080012c1 	.word	0x080012c1
 800121c:	080012c1 	.word	0x080012c1
 8001220:	0800127b 	.word	0x0800127b

		case 'C':
			break;

		case 'K':
			temp += 273.15;
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff f9a7 	bl	8000578 <__aeabi_f2d>
 800122a:	a32e      	add	r3, pc, #184	; (adr r3, 80012e4 <changeTempUnit+0x11c>)
 800122c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001230:	f7ff f844 	bl	80002bc <__adddf3>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	4610      	mov	r0, r2
 800123a:	4619      	mov	r1, r3
 800123c:	f7ff fccc 	bl	8000bd8 <__aeabi_d2f>
 8001240:	4603      	mov	r3, r0
 8001242:	607b      	str	r3, [r7, #4]
			break;
 8001244:	e03c      	b.n	80012c0 <changeTempUnit+0xf8>

		case 'F':
			temp = temp*1.8 +32;
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff f996 	bl	8000578 <__aeabi_f2d>
 800124c:	a320      	add	r3, pc, #128	; (adr r3, 80012d0 <changeTempUnit+0x108>)
 800124e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001252:	f7ff f9e9 	bl	8000628 <__aeabi_dmul>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	4610      	mov	r0, r2
 800125c:	4619      	mov	r1, r3
 800125e:	f04f 0200 	mov.w	r2, #0
 8001262:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <changeTempUnit+0x118>)
 8001264:	f7ff f82a 	bl	80002bc <__adddf3>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4610      	mov	r0, r2
 800126e:	4619      	mov	r1, r3
 8001270:	f7ff fcb2 	bl	8000bd8 <__aeabi_d2f>
 8001274:	4603      	mov	r3, r0
 8001276:	607b      	str	r3, [r7, #4]
			break;
 8001278:	e022      	b.n	80012c0 <changeTempUnit+0xf8>

		case 'R':
			temp = temp*1.8 + 32 + 459.67;
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff f97c 	bl	8000578 <__aeabi_f2d>
 8001280:	a313      	add	r3, pc, #76	; (adr r3, 80012d0 <changeTempUnit+0x108>)
 8001282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001286:	f7ff f9cf 	bl	8000628 <__aeabi_dmul>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4610      	mov	r0, r2
 8001290:	4619      	mov	r1, r3
 8001292:	f04f 0200 	mov.w	r2, #0
 8001296:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <changeTempUnit+0x118>)
 8001298:	f7ff f810 	bl	80002bc <__adddf3>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	4610      	mov	r0, r2
 80012a2:	4619      	mov	r1, r3
 80012a4:	a30c      	add	r3, pc, #48	; (adr r3, 80012d8 <changeTempUnit+0x110>)
 80012a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012aa:	f7ff f807 	bl	80002bc <__adddf3>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	f7ff fc8f 	bl	8000bd8 <__aeabi_d2f>
 80012ba:	4603      	mov	r3, r0
 80012bc:	607b      	str	r3, [r7, #4]
			break;
 80012be:	bf00      	nop
	}

	return temp;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	ee07 3a90 	vmov	s15, r3
}
 80012c6:	eeb0 0a67 	vmov.f32	s0, s15
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	cccccccd 	.word	0xcccccccd
 80012d4:	3ffccccc 	.word	0x3ffccccc
 80012d8:	51eb851f 	.word	0x51eb851f
 80012dc:	407cbab8 	.word	0x407cbab8
 80012e0:	40400000 	.word	0x40400000
 80012e4:	66666666 	.word	0x66666666
 80012e8:	40711266 	.word	0x40711266
 80012ec:	00000000 	.word	0x00000000

080012f0 <convertTemp>:

float convertTemp (uint32_t raw){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]

	float volt, temp;

	volt = (3.3 * raw) / RESOLUTION;
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff f91b 	bl	8000534 <__aeabi_ui2d>
 80012fe:	a31f      	add	r3, pc, #124	; (adr r3, 800137c <convertTemp+0x8c>)
 8001300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001304:	f7ff f990 	bl	8000628 <__aeabi_dmul>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4610      	mov	r0, r2
 800130e:	4619      	mov	r1, r3
 8001310:	f04f 0200 	mov.w	r2, #0
 8001314:	4b16      	ldr	r3, [pc, #88]	; (8001370 <convertTemp+0x80>)
 8001316:	f7ff fab1 	bl	800087c <__aeabi_ddiv>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	4610      	mov	r0, r2
 8001320:	4619      	mov	r1, r3
 8001322:	f7ff fc59 	bl	8000bd8 <__aeabi_d2f>
 8001326:	4603      	mov	r3, r0
 8001328:	60fb      	str	r3, [r7, #12]
	temp = (volt - 0.5) * 100;
 800132a:	68f8      	ldr	r0, [r7, #12]
 800132c:	f7ff f924 	bl	8000578 <__aeabi_f2d>
 8001330:	f04f 0200 	mov.w	r2, #0
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <convertTemp+0x84>)
 8001336:	f7fe ffbf 	bl	80002b8 <__aeabi_dsub>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	4610      	mov	r0, r2
 8001340:	4619      	mov	r1, r3
 8001342:	f04f 0200 	mov.w	r2, #0
 8001346:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <convertTemp+0x88>)
 8001348:	f7ff f96e 	bl	8000628 <__aeabi_dmul>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	f7ff fc40 	bl	8000bd8 <__aeabi_d2f>
 8001358:	4603      	mov	r3, r0
 800135a:	60bb      	str	r3, [r7, #8]

	return temp;
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	ee07 3a90 	vmov	s15, r3
}
 8001362:	eeb0 0a67 	vmov.f32	s0, s15
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	f3af 8000 	nop.w
 8001370:	40b00000 	.word	0x40b00000
 8001374:	3fe00000 	.word	0x3fe00000
 8001378:	40590000 	.word	0x40590000
 800137c:	66666666 	.word	0x66666666
 8001380:	400a6666 	.word	0x400a6666
 8001384:	00000000 	.word	0x00000000

08001388 <convertLight>:

float convertLight (uint32_t raw){
 8001388:	b5b0      	push	{r4, r5, r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]

	float light,volt,r;

	volt = (3.3 * raw) / RESOLUTION;
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff f8cf 	bl	8000534 <__aeabi_ui2d>
 8001396:	a331      	add	r3, pc, #196	; (adr r3, 800145c <convertLight+0xd4>)
 8001398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139c:	f7ff f944 	bl	8000628 <__aeabi_dmul>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4610      	mov	r0, r2
 80013a6:	4619      	mov	r1, r3
 80013a8:	f04f 0200 	mov.w	r2, #0
 80013ac:	4b28      	ldr	r3, [pc, #160]	; (8001450 <convertLight+0xc8>)
 80013ae:	f7ff fa65 	bl	800087c <__aeabi_ddiv>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	4610      	mov	r0, r2
 80013b8:	4619      	mov	r1, r3
 80013ba:	f7ff fc0d 	bl	8000bd8 <__aeabi_d2f>
 80013be:	4603      	mov	r3, r0
 80013c0:	617b      	str	r3, [r7, #20]
	r = (1000.0 * 3.3 - 1000.0 * volt) / volt;
 80013c2:	6978      	ldr	r0, [r7, #20]
 80013c4:	f7ff f8d8 	bl	8000578 <__aeabi_f2d>
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	4b21      	ldr	r3, [pc, #132]	; (8001454 <convertLight+0xcc>)
 80013ce:	f7ff f92b 	bl	8000628 <__aeabi_dmul>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	a11c      	add	r1, pc, #112	; (adr r1, 8001448 <convertLight+0xc0>)
 80013d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80013dc:	f7fe ff6c 	bl	80002b8 <__aeabi_dsub>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4614      	mov	r4, r2
 80013e6:	461d      	mov	r5, r3
 80013e8:	6978      	ldr	r0, [r7, #20]
 80013ea:	f7ff f8c5 	bl	8000578 <__aeabi_f2d>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	4620      	mov	r0, r4
 80013f4:	4629      	mov	r1, r5
 80013f6:	f7ff fa41 	bl	800087c <__aeabi_ddiv>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	4610      	mov	r0, r2
 8001400:	4619      	mov	r1, r3
 8001402:	f7ff fbe9 	bl	8000bd8 <__aeabi_d2f>
 8001406:	4603      	mov	r3, r0
 8001408:	613b      	str	r3, [r7, #16]
	light = 500.0 / (r / 1000.0);
 800140a:	6938      	ldr	r0, [r7, #16]
 800140c:	f7ff f8b4 	bl	8000578 <__aeabi_f2d>
 8001410:	f04f 0200 	mov.w	r2, #0
 8001414:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <convertLight+0xcc>)
 8001416:	f7ff fa31 	bl	800087c <__aeabi_ddiv>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	f04f 0000 	mov.w	r0, #0
 8001422:	490d      	ldr	r1, [pc, #52]	; (8001458 <convertLight+0xd0>)
 8001424:	f7ff fa2a 	bl	800087c <__aeabi_ddiv>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4610      	mov	r0, r2
 800142e:	4619      	mov	r1, r3
 8001430:	f7ff fbd2 	bl	8000bd8 <__aeabi_d2f>
 8001434:	4603      	mov	r3, r0
 8001436:	60fb      	str	r3, [r7, #12]

	return light;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	ee07 3a90 	vmov	s15, r3
}
 800143e:	eeb0 0a67 	vmov.f32	s0, s15
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	bdb0      	pop	{r4, r5, r7, pc}
 8001448:	00000000 	.word	0x00000000
 800144c:	40a9c800 	.word	0x40a9c800
 8001450:	40b00000 	.word	0x40b00000
 8001454:	408f4000 	.word	0x408f4000
 8001458:	407f4000 	.word	0x407f4000
 800145c:	66666666 	.word	0x66666666
 8001460:	400a6666 	.word	0x400a6666
 8001464:	00000000 	.word	0x00000000

08001468 <convertTilt>:

void convertTilt (float* tilt,uint32_t raw, char axis){
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	4613      	mov	r3, r2
 8001474:	71fb      	strb	r3, [r7, #7]

	float volt,acc;

	volt = (3.3 * raw) / RESOLUTION;
 8001476:	68b8      	ldr	r0, [r7, #8]
 8001478:	f7ff f85c 	bl	8000534 <__aeabi_ui2d>
 800147c:	a369      	add	r3, pc, #420	; (adr r3, 8001624 <convertTilt+0x1bc>)
 800147e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001482:	f7ff f8d1 	bl	8000628 <__aeabi_dmul>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	4610      	mov	r0, r2
 800148c:	4619      	mov	r1, r3
 800148e:	f04f 0200 	mov.w	r2, #0
 8001492:	4b63      	ldr	r3, [pc, #396]	; (8001620 <convertTilt+0x1b8>)
 8001494:	f7ff f9f2 	bl	800087c <__aeabi_ddiv>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4610      	mov	r0, r2
 800149e:	4619      	mov	r1, r3
 80014a0:	f7ff fb9a 	bl	8000bd8 <__aeabi_d2f>
 80014a4:	4603      	mov	r3, r0
 80014a6:	617b      	str	r3, [r7, #20]

	switch (axis){
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	2b5a      	cmp	r3, #90	; 0x5a
 80014ac:	d06d      	beq.n	800158a <convertTilt+0x122>
 80014ae:	2b5a      	cmp	r3, #90	; 0x5a
 80014b0:	f300 8097 	bgt.w	80015e2 <convertTilt+0x17a>
 80014b4:	2b58      	cmp	r3, #88	; 0x58
 80014b6:	d002      	beq.n	80014be <convertTilt+0x56>
 80014b8:	2b59      	cmp	r3, #89	; 0x59
 80014ba:	d033      	beq.n	8001524 <convertTilt+0xbc>
		acc = (volt - ACC_Z_ZERO) / SENSITIVITY;
		*tilt = asin(acc) - ACC_Z_OFFSET;//rad
		break;
	}

}
 80014bc:	e091      	b.n	80015e2 <convertTilt+0x17a>
		acc = (volt - ACC_X_ZERO) / SENSITIVITY;
 80014be:	6978      	ldr	r0, [r7, #20]
 80014c0:	f7ff f85a 	bl	8000578 <__aeabi_f2d>
 80014c4:	a34a      	add	r3, pc, #296	; (adr r3, 80015f0 <convertTilt+0x188>)
 80014c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ca:	f7fe fef5 	bl	80002b8 <__aeabi_dsub>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4610      	mov	r0, r2
 80014d4:	4619      	mov	r1, r3
 80014d6:	a348      	add	r3, pc, #288	; (adr r3, 80015f8 <convertTilt+0x190>)
 80014d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014dc:	f7ff f9ce 	bl	800087c <__aeabi_ddiv>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	4610      	mov	r0, r2
 80014e6:	4619      	mov	r1, r3
 80014e8:	f7ff fb76 	bl	8000bd8 <__aeabi_d2f>
 80014ec:	4603      	mov	r3, r0
 80014ee:	613b      	str	r3, [r7, #16]
		*tilt = asin(acc) - ACC_X_OFFSET;//rad
 80014f0:	6938      	ldr	r0, [r7, #16]
 80014f2:	f7ff f841 	bl	8000578 <__aeabi_f2d>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	ec43 2b10 	vmov	d0, r2, r3
 80014fe:	f009 ff23 	bl	800b348 <asin>
 8001502:	ec51 0b10 	vmov	r0, r1, d0
 8001506:	a33e      	add	r3, pc, #248	; (adr r3, 8001600 <convertTilt+0x198>)
 8001508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150c:	f7fe fed6 	bl	80002bc <__adddf3>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4610      	mov	r0, r2
 8001516:	4619      	mov	r1, r3
 8001518:	f7ff fb5e 	bl	8000bd8 <__aeabi_d2f>
 800151c:	4602      	mov	r2, r0
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	601a      	str	r2, [r3, #0]
		break;
 8001522:	e05e      	b.n	80015e2 <convertTilt+0x17a>
		acc = (volt - ACC_Y_ZERO) / SENSITIVITY;
 8001524:	6978      	ldr	r0, [r7, #20]
 8001526:	f7ff f827 	bl	8000578 <__aeabi_f2d>
 800152a:	a337      	add	r3, pc, #220	; (adr r3, 8001608 <convertTilt+0x1a0>)
 800152c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001530:	f7fe fec2 	bl	80002b8 <__aeabi_dsub>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	a32e      	add	r3, pc, #184	; (adr r3, 80015f8 <convertTilt+0x190>)
 800153e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001542:	f7ff f99b 	bl	800087c <__aeabi_ddiv>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4610      	mov	r0, r2
 800154c:	4619      	mov	r1, r3
 800154e:	f7ff fb43 	bl	8000bd8 <__aeabi_d2f>
 8001552:	4603      	mov	r3, r0
 8001554:	613b      	str	r3, [r7, #16]
		*tilt = asin(acc) - ACC_Y_OFFSET;//rad
 8001556:	6938      	ldr	r0, [r7, #16]
 8001558:	f7ff f80e 	bl	8000578 <__aeabi_f2d>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	ec43 2b10 	vmov	d0, r2, r3
 8001564:	f009 fef0 	bl	800b348 <asin>
 8001568:	ec51 0b10 	vmov	r0, r1, d0
 800156c:	a328      	add	r3, pc, #160	; (adr r3, 8001610 <convertTilt+0x1a8>)
 800156e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001572:	f7fe fea1 	bl	80002b8 <__aeabi_dsub>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4610      	mov	r0, r2
 800157c:	4619      	mov	r1, r3
 800157e:	f7ff fb2b 	bl	8000bd8 <__aeabi_d2f>
 8001582:	4602      	mov	r2, r0
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	601a      	str	r2, [r3, #0]
		break;
 8001588:	e02b      	b.n	80015e2 <convertTilt+0x17a>
		acc = (volt - ACC_Z_ZERO) / SENSITIVITY;
 800158a:	6978      	ldr	r0, [r7, #20]
 800158c:	f7fe fff4 	bl	8000578 <__aeabi_f2d>
 8001590:	a321      	add	r3, pc, #132	; (adr r3, 8001618 <convertTilt+0x1b0>)
 8001592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001596:	f7fe fe8f 	bl	80002b8 <__aeabi_dsub>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4610      	mov	r0, r2
 80015a0:	4619      	mov	r1, r3
 80015a2:	a315      	add	r3, pc, #84	; (adr r3, 80015f8 <convertTilt+0x190>)
 80015a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a8:	f7ff f968 	bl	800087c <__aeabi_ddiv>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	4610      	mov	r0, r2
 80015b2:	4619      	mov	r1, r3
 80015b4:	f7ff fb10 	bl	8000bd8 <__aeabi_d2f>
 80015b8:	4603      	mov	r3, r0
 80015ba:	613b      	str	r3, [r7, #16]
		*tilt = asin(acc) - ACC_Z_OFFSET;//rad
 80015bc:	6938      	ldr	r0, [r7, #16]
 80015be:	f7fe ffdb 	bl	8000578 <__aeabi_f2d>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	ec43 2b10 	vmov	d0, r2, r3
 80015ca:	f009 febd 	bl	800b348 <asin>
 80015ce:	ec53 2b10 	vmov	r2, r3, d0
 80015d2:	4610      	mov	r0, r2
 80015d4:	4619      	mov	r1, r3
 80015d6:	f7ff faff 	bl	8000bd8 <__aeabi_d2f>
 80015da:	4602      	mov	r2, r0
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	601a      	str	r2, [r3, #0]
		break;
 80015e0:	bf00      	nop
}
 80015e2:	bf00      	nop
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	f3af 8000 	nop.w
 80015f0:	26e978d5 	.word	0x26e978d5
 80015f4:	3ffa0831 	.word	0x3ffa0831
 80015f8:	33333333 	.word	0x33333333
 80015fc:	3fd33333 	.word	0x3fd33333
 8001600:	7167a9e6 	.word	0x7167a9e6
 8001604:	3f890561 	.word	0x3f890561
 8001608:	66666666 	.word	0x66666666
 800160c:	3ffa6666 	.word	0x3ffa6666
 8001610:	7d4ed7a1 	.word	0x7d4ed7a1
 8001614:	3f9acee8 	.word	0x3f9acee8
 8001618:	851eb852 	.word	0x851eb852
 800161c:	400051eb 	.word	0x400051eb
 8001620:	40b00000 	.word	0x40b00000
 8001624:	66666666 	.word	0x66666666
 8001628:	400a6666 	.word	0x400a6666

0800162c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001634:	2120      	movs	r1, #32
 8001636:	4803      	ldr	r0, [pc, #12]	; (8001644 <HAL_UART_TxCpltCallback+0x18>)
 8001638:	f001 fec7 	bl	80033ca <HAL_GPIO_TogglePin>
}
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40020000 	.word	0x40020000

08001648 <changeLed>:

void changeLed(uint8_t state){
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	71fb      	strb	r3, [r7, #7]

	if (state == BLUE){
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	2b02      	cmp	r3, #2
 8001656:	d10f      	bne.n	8001678 <changeLed+0x30>

		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8001658:	f44f 7180 	mov.w	r1, #256	; 0x100
 800165c:	481b      	ldr	r0, [pc, #108]	; (80016cc <changeLed+0x84>)
 800165e:	f001 feb4 	bl	80033ca <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8001662:	2201      	movs	r2, #1
 8001664:	2110      	movs	r1, #16
 8001666:	481a      	ldr	r0, [pc, #104]	; (80016d0 <changeLed+0x88>)
 8001668:	f001 fe96 	bl	8003398 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 800166c:	2201      	movs	r2, #1
 800166e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001672:	4817      	ldr	r0, [pc, #92]	; (80016d0 <changeLed+0x88>)
 8001674:	f001 fe90 	bl	8003398 <HAL_GPIO_WritePin>
	}

	if (state == RED){
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d10f      	bne.n	800169e <changeLed+0x56>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 800167e:	2201      	movs	r2, #1
 8001680:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001684:	4811      	ldr	r0, [pc, #68]	; (80016cc <changeLed+0x84>)
 8001686:	f001 fe87 	bl	8003398 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 800168a:	2110      	movs	r1, #16
 800168c:	4810      	ldr	r0, [pc, #64]	; (80016d0 <changeLed+0x88>)
 800168e:	f001 fe9c 	bl	80033ca <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8001692:	2201      	movs	r2, #1
 8001694:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001698:	480d      	ldr	r0, [pc, #52]	; (80016d0 <changeLed+0x88>)
 800169a:	f001 fe7d 	bl	8003398 <HAL_GPIO_WritePin>
	}

	if (state == GREEN){
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d10f      	bne.n	80016c4 <changeLed+0x7c>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 80016a4:	2201      	movs	r2, #1
 80016a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016aa:	4808      	ldr	r0, [pc, #32]	; (80016cc <changeLed+0x84>)
 80016ac:	f001 fe74 	bl	8003398 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 80016b0:	2201      	movs	r2, #1
 80016b2:	2110      	movs	r1, #16
 80016b4:	4806      	ldr	r0, [pc, #24]	; (80016d0 <changeLed+0x88>)
 80016b6:	f001 fe6f 	bl	8003398 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
 80016ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016be:	4804      	ldr	r0, [pc, #16]	; (80016d0 <changeLed+0x88>)
 80016c0:	f001 fe83 	bl	80033ca <HAL_GPIO_TogglePin>
	}
}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40020000 	.word	0x40020000
 80016d0:	40020400 	.word	0x40020400

080016d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016da:	f000 fead 	bl	8002438 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016de:	f000 f921 	bl	8001924 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016e2:	f000 f9f5 	bl	8001ad0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80016e6:	f000 f9c9 	bl	8001a7c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80016ea:	f000 f985 	bl	80019f8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80016ee:	f003 fb2f 	bl	8004d50 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of adc */
  adcHandle = osMutexNew(&adc_attributes);
 80016f2:	485b      	ldr	r0, [pc, #364]	; (8001860 <main+0x18c>)
 80016f4:	f003 fc62 	bl	8004fbc <osMutexNew>
 80016f8:	4603      	mov	r3, r0
 80016fa:	4a5a      	ldr	r2, [pc, #360]	; (8001864 <main+0x190>)
 80016fc:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of tempQueue */
  tempQueueHandle = osMessageQueueNew (128, sizeof(float), &tempQueue_attributes);
 80016fe:	4a5a      	ldr	r2, [pc, #360]	; (8001868 <main+0x194>)
 8001700:	2104      	movs	r1, #4
 8001702:	2080      	movs	r0, #128	; 0x80
 8001704:	f003 fd68 	bl	80051d8 <osMessageQueueNew>
 8001708:	4603      	mov	r3, r0
 800170a:	4a58      	ldr	r2, [pc, #352]	; (800186c <main+0x198>)
 800170c:	6013      	str	r3, [r2, #0]

  /* creation of lightQueue */
  lightQueueHandle = osMessageQueueNew (128, sizeof(float), &lightQueue_attributes);
 800170e:	4a58      	ldr	r2, [pc, #352]	; (8001870 <main+0x19c>)
 8001710:	2104      	movs	r1, #4
 8001712:	2080      	movs	r0, #128	; 0x80
 8001714:	f003 fd60 	bl	80051d8 <osMessageQueueNew>
 8001718:	4603      	mov	r3, r0
 800171a:	4a56      	ldr	r2, [pc, #344]	; (8001874 <main+0x1a0>)
 800171c:	6013      	str	r3, [r2, #0]

  /* creation of rollQueue */
  rollQueueHandle = osMessageQueueNew (128, sizeof(float), &rollQueue_attributes);
 800171e:	4a56      	ldr	r2, [pc, #344]	; (8001878 <main+0x1a4>)
 8001720:	2104      	movs	r1, #4
 8001722:	2080      	movs	r0, #128	; 0x80
 8001724:	f003 fd58 	bl	80051d8 <osMessageQueueNew>
 8001728:	4603      	mov	r3, r0
 800172a:	4a54      	ldr	r2, [pc, #336]	; (800187c <main+0x1a8>)
 800172c:	6013      	str	r3, [r2, #0]

  /* creation of pitchQueue */
  pitchQueueHandle = osMessageQueueNew (128, sizeof(float), &pitchQueue_attributes);
 800172e:	4a54      	ldr	r2, [pc, #336]	; (8001880 <main+0x1ac>)
 8001730:	2104      	movs	r1, #4
 8001732:	2080      	movs	r0, #128	; 0x80
 8001734:	f003 fd50 	bl	80051d8 <osMessageQueueNew>
 8001738:	4603      	mov	r3, r0
 800173a:	4a52      	ldr	r2, [pc, #328]	; (8001884 <main+0x1b0>)
 800173c:	6013      	str	r3, [r2, #0]

  /* creation of yawQueue */
  yawQueueHandle = osMessageQueueNew (128, sizeof(float), &yawQueue_attributes);
 800173e:	4a52      	ldr	r2, [pc, #328]	; (8001888 <main+0x1b4>)
 8001740:	2104      	movs	r1, #4
 8001742:	2080      	movs	r0, #128	; 0x80
 8001744:	f003 fd48 	bl	80051d8 <osMessageQueueNew>
 8001748:	4603      	mov	r3, r0
 800174a:	4a50      	ldr	r2, [pc, #320]	; (800188c <main+0x1b8>)
 800174c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of serialConfig */
  serialConfigHandle = osThreadNew(startSerialConfig, NULL, &serialConfig_attributes);
 800174e:	4a50      	ldr	r2, [pc, #320]	; (8001890 <main+0x1bc>)
 8001750:	2100      	movs	r1, #0
 8001752:	4850      	ldr	r0, [pc, #320]	; (8001894 <main+0x1c0>)
 8001754:	f003 fb46 	bl	8004de4 <osThreadNew>
 8001758:	4603      	mov	r3, r0
 800175a:	4a4f      	ldr	r2, [pc, #316]	; (8001898 <main+0x1c4>)
 800175c:	6013      	str	r3, [r2, #0]

  /* creation of sendSerial */
  sendSerialHandle = osThreadNew(startSendSerial, NULL, &sendSerial_attributes);
 800175e:	4a4f      	ldr	r2, [pc, #316]	; (800189c <main+0x1c8>)
 8001760:	2100      	movs	r1, #0
 8001762:	484f      	ldr	r0, [pc, #316]	; (80018a0 <main+0x1cc>)
 8001764:	f003 fb3e 	bl	8004de4 <osThreadNew>
 8001768:	4603      	mov	r3, r0
 800176a:	4a4e      	ldr	r2, [pc, #312]	; (80018a4 <main+0x1d0>)
 800176c:	6013      	str	r3, [r2, #0]

  /* creation of getTemp */
  getTempHandle = osThreadNew(startGetTemp, NULL, &getTemp_attributes);
 800176e:	4a4e      	ldr	r2, [pc, #312]	; (80018a8 <main+0x1d4>)
 8001770:	2100      	movs	r1, #0
 8001772:	484e      	ldr	r0, [pc, #312]	; (80018ac <main+0x1d8>)
 8001774:	f003 fb36 	bl	8004de4 <osThreadNew>
 8001778:	4603      	mov	r3, r0
 800177a:	4a4d      	ldr	r2, [pc, #308]	; (80018b0 <main+0x1dc>)
 800177c:	6013      	str	r3, [r2, #0]

  /* creation of getLight */
  getLightHandle = osThreadNew(startGetLight, NULL, &getLight_attributes);
 800177e:	4a4d      	ldr	r2, [pc, #308]	; (80018b4 <main+0x1e0>)
 8001780:	2100      	movs	r1, #0
 8001782:	484d      	ldr	r0, [pc, #308]	; (80018b8 <main+0x1e4>)
 8001784:	f003 fb2e 	bl	8004de4 <osThreadNew>
 8001788:	4603      	mov	r3, r0
 800178a:	4a4c      	ldr	r2, [pc, #304]	; (80018bc <main+0x1e8>)
 800178c:	6013      	str	r3, [r2, #0]

  /* creation of getRoll */
  getRollHandle = osThreadNew(startGetRoll, NULL, &getRoll_attributes);
 800178e:	4a4c      	ldr	r2, [pc, #304]	; (80018c0 <main+0x1ec>)
 8001790:	2100      	movs	r1, #0
 8001792:	484c      	ldr	r0, [pc, #304]	; (80018c4 <main+0x1f0>)
 8001794:	f003 fb26 	bl	8004de4 <osThreadNew>
 8001798:	4603      	mov	r3, r0
 800179a:	4a4b      	ldr	r2, [pc, #300]	; (80018c8 <main+0x1f4>)
 800179c:	6013      	str	r3, [r2, #0]

  /* creation of getPitch */
  getPitchHandle = osThreadNew(startGetPitch, NULL, &getPitch_attributes);
 800179e:	4a4b      	ldr	r2, [pc, #300]	; (80018cc <main+0x1f8>)
 80017a0:	2100      	movs	r1, #0
 80017a2:	484b      	ldr	r0, [pc, #300]	; (80018d0 <main+0x1fc>)
 80017a4:	f003 fb1e 	bl	8004de4 <osThreadNew>
 80017a8:	4603      	mov	r3, r0
 80017aa:	4a4a      	ldr	r2, [pc, #296]	; (80018d4 <main+0x200>)
 80017ac:	6013      	str	r3, [r2, #0]

  /* creation of getYaw */
  getYawHandle = osThreadNew(startGetYaw, NULL, &getYaw_attributes);
 80017ae:	4a4a      	ldr	r2, [pc, #296]	; (80018d8 <main+0x204>)
 80017b0:	2100      	movs	r1, #0
 80017b2:	484a      	ldr	r0, [pc, #296]	; (80018dc <main+0x208>)
 80017b4:	f003 fb16 	bl	8004de4 <osThreadNew>
 80017b8:	4603      	mov	r3, r0
 80017ba:	4a49      	ldr	r2, [pc, #292]	; (80018e0 <main+0x20c>)
 80017bc:	6013      	str	r3, [r2, #0]

  /* creation of resetTask */
  resetTaskHandle = osThreadNew(StartTask08, NULL, &resetTask_attributes);
 80017be:	4a49      	ldr	r2, [pc, #292]	; (80018e4 <main+0x210>)
 80017c0:	2100      	movs	r1, #0
 80017c2:	4849      	ldr	r0, [pc, #292]	; (80018e8 <main+0x214>)
 80017c4:	f003 fb0e 	bl	8004de4 <osThreadNew>
 80017c8:	4603      	mov	r3, r0
 80017ca:	4a48      	ldr	r2, [pc, #288]	; (80018ec <main+0x218>)
 80017cc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of configUnits */
  configUnitsHandle = osEventFlagsNew(&configUnits_attributes);
 80017ce:	4848      	ldr	r0, [pc, #288]	; (80018f0 <main+0x21c>)
 80017d0:	f003 fbb5 	bl	8004f3e <osEventFlagsNew>
 80017d4:	4603      	mov	r3, r0
 80017d6:	4a47      	ldr	r2, [pc, #284]	; (80018f4 <main+0x220>)
 80017d8:	6013      	str	r3, [r2, #0]

  /* creation of conversion */
  conversionHandle = osEventFlagsNew(&conversion_attributes);
 80017da:	4847      	ldr	r0, [pc, #284]	; (80018f8 <main+0x224>)
 80017dc:	f003 fbaf 	bl	8004f3e <osEventFlagsNew>
 80017e0:	4603      	mov	r3, r0
 80017e2:	4a46      	ldr	r2, [pc, #280]	; (80018fc <main+0x228>)
 80017e4:	6013      	str	r3, [r2, #0]

  /* creation of dataReady */
  dataReadyHandle = osEventFlagsNew(&dataReady_attributes);
 80017e6:	4846      	ldr	r0, [pc, #280]	; (8001900 <main+0x22c>)
 80017e8:	f003 fba9 	bl	8004f3e <osEventFlagsNew>
 80017ec:	4603      	mov	r3, r0
 80017ee:	4a45      	ldr	r2, [pc, #276]	; (8001904 <main+0x230>)
 80017f0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 80017f2:	2201      	movs	r2, #1
 80017f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017f8:	4843      	ldr	r0, [pc, #268]	; (8001908 <main+0x234>)
 80017fa:	f001 fdcd 	bl	8003398 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 80017fe:	2201      	movs	r2, #1
 8001800:	2110      	movs	r1, #16
 8001802:	4842      	ldr	r0, [pc, #264]	; (800190c <main+0x238>)
 8001804:	f001 fdc8 	bl	8003398 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8001808:	2201      	movs	r2, #1
 800180a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800180e:	483f      	ldr	r0, [pc, #252]	; (800190c <main+0x238>)
 8001810:	f001 fdc2 	bl	8003398 <HAL_GPIO_WritePin>

	HAL_UART_Receive(&huart2, str.i, 7, HAL_MAX_DELAY);
 8001814:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001818:	2207      	movs	r2, #7
 800181a:	493d      	ldr	r1, [pc, #244]	; (8001910 <main+0x23c>)
 800181c:	483d      	ldr	r0, [pc, #244]	; (8001914 <main+0x240>)
 800181e:	f002 fb42 	bl	8003ea6 <HAL_UART_Receive>
	units.temp = str.c[6];
 8001822:	4b3b      	ldr	r3, [pc, #236]	; (8001910 <main+0x23c>)
 8001824:	799a      	ldrb	r2, [r3, #6]
 8001826:	4b3c      	ldr	r3, [pc, #240]	; (8001918 <main+0x244>)
 8001828:	701a      	strb	r2, [r3, #0]

	strcpy(str.c,"");
 800182a:	4b39      	ldr	r3, [pc, #228]	; (8001910 <main+0x23c>)
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive(&huart2, str.i, 9, HAL_MAX_DELAY);
 8001830:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001834:	2209      	movs	r2, #9
 8001836:	4936      	ldr	r1, [pc, #216]	; (8001910 <main+0x23c>)
 8001838:	4836      	ldr	r0, [pc, #216]	; (8001914 <main+0x240>)
 800183a:	f002 fb34 	bl	8003ea6 <HAL_UART_Receive>
	sprintf(units.tilt,"%c%c%c",str.i[6],str.i[7],str.i[8]);
 800183e:	4b34      	ldr	r3, [pc, #208]	; (8001910 <main+0x23c>)
 8001840:	799b      	ldrb	r3, [r3, #6]
 8001842:	461a      	mov	r2, r3
 8001844:	4b32      	ldr	r3, [pc, #200]	; (8001910 <main+0x23c>)
 8001846:	79db      	ldrb	r3, [r3, #7]
 8001848:	4619      	mov	r1, r3
 800184a:	4b31      	ldr	r3, [pc, #196]	; (8001910 <main+0x23c>)
 800184c:	7a1b      	ldrb	r3, [r3, #8]
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	460b      	mov	r3, r1
 8001852:	4932      	ldr	r1, [pc, #200]	; (800191c <main+0x248>)
 8001854:	4832      	ldr	r0, [pc, #200]	; (8001920 <main+0x24c>)
 8001856:	f007 fb5b 	bl	8008f10 <siprintf>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800185a:	f003 fa9d 	bl	8004d98 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800185e:	e7fe      	b.n	800185e <main+0x18a>
 8001860:	0800bc2c 	.word	0x0800bc2c
 8001864:	20004b88 	.word	0x20004b88
 8001868:	0800bbb4 	.word	0x0800bbb4
 800186c:	20004ba4 	.word	0x20004ba4
 8001870:	0800bbcc 	.word	0x0800bbcc
 8001874:	20004b80 	.word	0x20004b80
 8001878:	0800bbe4 	.word	0x0800bbe4
 800187c:	20004ba8 	.word	0x20004ba8
 8001880:	0800bbfc 	.word	0x0800bbfc
 8001884:	20004b84 	.word	0x20004b84
 8001888:	0800bc14 	.word	0x0800bc14
 800188c:	20004b7c 	.word	0x20004b7c
 8001890:	0800ba94 	.word	0x0800ba94
 8001894:	08001be1 	.word	0x08001be1
 8001898:	20004b94 	.word	0x20004b94
 800189c:	0800bab8 	.word	0x0800bab8
 80018a0:	08001bf1 	.word	0x08001bf1
 80018a4:	20004b1c 	.word	0x20004b1c
 80018a8:	0800badc 	.word	0x0800badc
 80018ac:	08001ce1 	.word	0x08001ce1
 80018b0:	20004b90 	.word	0x20004b90
 80018b4:	0800bb00 	.word	0x0800bb00
 80018b8:	08001d91 	.word	0x08001d91
 80018bc:	20004b9c 	.word	0x20004b9c
 80018c0:	0800bb24 	.word	0x0800bb24
 80018c4:	08001e25 	.word	0x08001e25
 80018c8:	20004b28 	.word	0x20004b28
 80018cc:	0800bb48 	.word	0x0800bb48
 80018d0:	08001ed1 	.word	0x08001ed1
 80018d4:	20004b24 	.word	0x20004b24
 80018d8:	0800bb6c 	.word	0x0800bb6c
 80018dc:	08001f7d 	.word	0x08001f7d
 80018e0:	20004b98 	.word	0x20004b98
 80018e4:	0800bb90 	.word	0x0800bb90
 80018e8:	08002029 	.word	0x08002029
 80018ec:	20004b30 	.word	0x20004b30
 80018f0:	0800bc3c 	.word	0x0800bc3c
 80018f4:	20004ba0 	.word	0x20004ba0
 80018f8:	0800bc4c 	.word	0x0800bc4c
 80018fc:	20004b20 	.word	0x20004b20
 8001900:	0800bc5c 	.word	0x0800bc5c
 8001904:	20004b2c 	.word	0x20004b2c
 8001908:	40020000 	.word	0x40020000
 800190c:	40020400 	.word	0x40020400
 8001910:	20004bf0 	.word	0x20004bf0
 8001914:	20004bac 	.word	0x20004bac
 8001918:	20004cf0 	.word	0x20004cf0
 800191c:	0800ba74 	.word	0x0800ba74
 8001920:	20004cf1 	.word	0x20004cf1

08001924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b094      	sub	sp, #80	; 0x50
 8001928:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800192a:	f107 0320 	add.w	r3, r7, #32
 800192e:	2230      	movs	r2, #48	; 0x30
 8001930:	2100      	movs	r1, #0
 8001932:	4618      	mov	r0, r3
 8001934:	f006 fe7a 	bl	800862c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001938:	f107 030c 	add.w	r3, r7, #12
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001948:	2300      	movs	r3, #0
 800194a:	60bb      	str	r3, [r7, #8]
 800194c:	4b28      	ldr	r3, [pc, #160]	; (80019f0 <SystemClock_Config+0xcc>)
 800194e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001950:	4a27      	ldr	r2, [pc, #156]	; (80019f0 <SystemClock_Config+0xcc>)
 8001952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001956:	6413      	str	r3, [r2, #64]	; 0x40
 8001958:	4b25      	ldr	r3, [pc, #148]	; (80019f0 <SystemClock_Config+0xcc>)
 800195a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001964:	2300      	movs	r3, #0
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	4b22      	ldr	r3, [pc, #136]	; (80019f4 <SystemClock_Config+0xd0>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a21      	ldr	r2, [pc, #132]	; (80019f4 <SystemClock_Config+0xd0>)
 800196e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001972:	6013      	str	r3, [r2, #0]
 8001974:	4b1f      	ldr	r3, [pc, #124]	; (80019f4 <SystemClock_Config+0xd0>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800197c:	607b      	str	r3, [r7, #4]
 800197e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001980:	2302      	movs	r3, #2
 8001982:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001984:	2301      	movs	r3, #1
 8001986:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001988:	2310      	movs	r3, #16
 800198a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800198c:	2302      	movs	r3, #2
 800198e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001990:	2300      	movs	r3, #0
 8001992:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001994:	2310      	movs	r3, #16
 8001996:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001998:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800199c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800199e:	2304      	movs	r3, #4
 80019a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80019a2:	2304      	movs	r3, #4
 80019a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019a6:	f107 0320 	add.w	r3, r7, #32
 80019aa:	4618      	mov	r0, r3
 80019ac:	f001 fd28 	bl	8003400 <HAL_RCC_OscConfig>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <SystemClock_Config+0x96>
  {
    Error_Handler();
 80019b6:	f000 fb49 	bl	800204c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ba:	230f      	movs	r3, #15
 80019bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019be:	2302      	movs	r3, #2
 80019c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019c2:	2300      	movs	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019d0:	f107 030c 	add.w	r3, r7, #12
 80019d4:	2102      	movs	r1, #2
 80019d6:	4618      	mov	r0, r3
 80019d8:	f001 ff8a 	bl	80038f0 <HAL_RCC_ClockConfig>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80019e2:	f000 fb33 	bl	800204c <Error_Handler>
  }
}
 80019e6:	bf00      	nop
 80019e8:	3750      	adds	r7, #80	; 0x50
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40007000 	.word	0x40007000

080019f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019fe:	463b      	mov	r3, r7
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a0a:	4b19      	ldr	r3, [pc, #100]	; (8001a70 <MX_ADC1_Init+0x78>)
 8001a0c:	4a19      	ldr	r2, [pc, #100]	; (8001a74 <MX_ADC1_Init+0x7c>)
 8001a0e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001a10:	4b17      	ldr	r3, [pc, #92]	; (8001a70 <MX_ADC1_Init+0x78>)
 8001a12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a16:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a18:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <MX_ADC1_Init+0x78>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001a1e:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <MX_ADC1_Init+0x78>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001a24:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <MX_ADC1_Init+0x78>)
 8001a26:	2201      	movs	r2, #1
 8001a28:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a2a:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <MX_ADC1_Init+0x78>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a32:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <MX_ADC1_Init+0x78>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a38:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <MX_ADC1_Init+0x78>)
 8001a3a:	4a0f      	ldr	r2, [pc, #60]	; (8001a78 <MX_ADC1_Init+0x80>)
 8001a3c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a3e:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <MX_ADC1_Init+0x78>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a44:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <MX_ADC1_Init+0x78>)
 8001a46:	2201      	movs	r2, #1
 8001a48:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a4a:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <MX_ADC1_Init+0x78>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a52:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <MX_ADC1_Init+0x78>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a58:	4805      	ldr	r0, [pc, #20]	; (8001a70 <MX_ADC1_Init+0x78>)
 8001a5a:	f000 fd83 	bl	8002564 <HAL_ADC_Init>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001a64:	f000 faf2 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a68:	bf00      	nop
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20004b34 	.word	0x20004b34
 8001a74:	40012000 	.word	0x40012000
 8001a78:	0f000001 	.word	0x0f000001

08001a7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a80:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <MX_USART2_UART_Init+0x4c>)
 8001a82:	4a12      	ldr	r2, [pc, #72]	; (8001acc <MX_USART2_UART_Init+0x50>)
 8001a84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a86:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <MX_USART2_UART_Init+0x4c>)
 8001a88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <MX_USART2_UART_Init+0x4c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a94:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <MX_USART2_UART_Init+0x4c>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <MX_USART2_UART_Init+0x4c>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001aa0:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <MX_USART2_UART_Init+0x4c>)
 8001aa2:	220c      	movs	r2, #12
 8001aa4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aa6:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <MX_USART2_UART_Init+0x4c>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <MX_USART2_UART_Init+0x4c>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ab2:	4805      	ldr	r0, [pc, #20]	; (8001ac8 <MX_USART2_UART_Init+0x4c>)
 8001ab4:	f002 f918 	bl	8003ce8 <HAL_UART_Init>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001abe:	f000 fac5 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20004bac 	.word	0x20004bac
 8001acc:	40004400 	.word	0x40004400

08001ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08a      	sub	sp, #40	; 0x28
 8001ad4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad6:	f107 0314 	add.w	r3, r7, #20
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	609a      	str	r2, [r3, #8]
 8001ae2:	60da      	str	r2, [r3, #12]
 8001ae4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	4b39      	ldr	r3, [pc, #228]	; (8001bd0 <MX_GPIO_Init+0x100>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	4a38      	ldr	r2, [pc, #224]	; (8001bd0 <MX_GPIO_Init+0x100>)
 8001af0:	f043 0304 	orr.w	r3, r3, #4
 8001af4:	6313      	str	r3, [r2, #48]	; 0x30
 8001af6:	4b36      	ldr	r3, [pc, #216]	; (8001bd0 <MX_GPIO_Init+0x100>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	f003 0304 	and.w	r3, r3, #4
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	4b32      	ldr	r3, [pc, #200]	; (8001bd0 <MX_GPIO_Init+0x100>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	4a31      	ldr	r2, [pc, #196]	; (8001bd0 <MX_GPIO_Init+0x100>)
 8001b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b10:	6313      	str	r3, [r2, #48]	; 0x30
 8001b12:	4b2f      	ldr	r3, [pc, #188]	; (8001bd0 <MX_GPIO_Init+0x100>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60bb      	str	r3, [r7, #8]
 8001b22:	4b2b      	ldr	r3, [pc, #172]	; (8001bd0 <MX_GPIO_Init+0x100>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	4a2a      	ldr	r2, [pc, #168]	; (8001bd0 <MX_GPIO_Init+0x100>)
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2e:	4b28      	ldr	r3, [pc, #160]	; (8001bd0 <MX_GPIO_Init+0x100>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	60bb      	str	r3, [r7, #8]
 8001b38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	607b      	str	r3, [r7, #4]
 8001b3e:	4b24      	ldr	r3, [pc, #144]	; (8001bd0 <MX_GPIO_Init+0x100>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	4a23      	ldr	r2, [pc, #140]	; (8001bd0 <MX_GPIO_Init+0x100>)
 8001b44:	f043 0302 	orr.w	r3, r3, #2
 8001b48:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4a:	4b21      	ldr	r3, [pc, #132]	; (8001bd0 <MX_GPIO_Init+0x100>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	607b      	str	r3, [r7, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8001b56:	2200      	movs	r2, #0
 8001b58:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001b5c:	481d      	ldr	r0, [pc, #116]	; (8001bd4 <MX_GPIO_Init+0x104>)
 8001b5e:	f001 fc1b 	bl	8003398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4, GPIO_PIN_RESET);
 8001b62:	2200      	movs	r2, #0
 8001b64:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8001b68:	481b      	ldr	r0, [pc, #108]	; (8001bd8 <MX_GPIO_Init+0x108>)
 8001b6a:	f001 fc15 	bl	8003398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b74:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b7e:	f107 0314 	add.w	r3, r7, #20
 8001b82:	4619      	mov	r1, r3
 8001b84:	4815      	ldr	r0, [pc, #84]	; (8001bdc <MX_GPIO_Init+0x10c>)
 8001b86:	f001 fa83 	bl	8003090 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 8001b8a:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b90:	2301      	movs	r3, #1
 8001b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	480c      	ldr	r0, [pc, #48]	; (8001bd4 <MX_GPIO_Init+0x104>)
 8001ba4:	f001 fa74 	bl	8003090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 8001ba8:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8001bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bba:	f107 0314 	add.w	r3, r7, #20
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4805      	ldr	r0, [pc, #20]	; (8001bd8 <MX_GPIO_Init+0x108>)
 8001bc2:	f001 fa65 	bl	8003090 <HAL_GPIO_Init>

}
 8001bc6:	bf00      	nop
 8001bc8:	3728      	adds	r7, #40	; 0x28
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40020000 	.word	0x40020000
 8001bd8:	40020400 	.word	0x40020400
 8001bdc:	40020800 	.word	0x40020800

08001be0 <startSerialConfig>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startSerialConfig */
void startSerialConfig(void *argument)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	vTaskSuspend( NULL );
 8001be8:	2000      	movs	r0, #0
 8001bea:	f004 feb7 	bl	800695c <vTaskSuspend>
 8001bee:	e7fb      	b.n	8001be8 <startSerialConfig+0x8>

08001bf0 <startSendSerial>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startSendSerial */
void startSendSerial(void *argument)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08a      	sub	sp, #40	; 0x28
 8001bf4:	af02      	add	r7, sp, #8
 8001bf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startSendSerial */
	struct sensors_t sensors;
	uint8_t prio = 1;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	72fb      	strb	r3, [r7, #11]
  /* Infinite loop */
  for(;;)
  {
	osMessageQueueGet(tempQueueHandle,&sensors.temp, &prio, osWaitForever);
 8001bfc:	4b30      	ldr	r3, [pc, #192]	; (8001cc0 <startSendSerial+0xd0>)
 8001bfe:	6818      	ldr	r0, [r3, #0]
 8001c00:	f107 020b 	add.w	r2, r7, #11
 8001c04:	f107 010c 	add.w	r1, r7, #12
 8001c08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c0c:	f003 fbb8 	bl	8005380 <osMessageQueueGet>
	osMessageQueueGet(lightQueueHandle,&sensors.light, &prio, osWaitForever);
 8001c10:	4b2c      	ldr	r3, [pc, #176]	; (8001cc4 <startSendSerial+0xd4>)
 8001c12:	6818      	ldr	r0, [r3, #0]
 8001c14:	f107 020b 	add.w	r2, r7, #11
 8001c18:	f107 030c 	add.w	r3, r7, #12
 8001c1c:	1d19      	adds	r1, r3, #4
 8001c1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c22:	f003 fbad 	bl	8005380 <osMessageQueueGet>
	osMessageQueueGet(rollQueueHandle,&sensors.roll, &prio, osWaitForever);
 8001c26:	4b28      	ldr	r3, [pc, #160]	; (8001cc8 <startSendSerial+0xd8>)
 8001c28:	6818      	ldr	r0, [r3, #0]
 8001c2a:	f107 020b 	add.w	r2, r7, #11
 8001c2e:	f107 030c 	add.w	r3, r7, #12
 8001c32:	f103 0108 	add.w	r1, r3, #8
 8001c36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c3a:	f003 fba1 	bl	8005380 <osMessageQueueGet>
	osMessageQueueGet(pitchQueueHandle,&sensors.pitch, &prio, osWaitForever);
 8001c3e:	4b23      	ldr	r3, [pc, #140]	; (8001ccc <startSendSerial+0xdc>)
 8001c40:	6818      	ldr	r0, [r3, #0]
 8001c42:	f107 020b 	add.w	r2, r7, #11
 8001c46:	f107 030c 	add.w	r3, r7, #12
 8001c4a:	f103 010c 	add.w	r1, r3, #12
 8001c4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c52:	f003 fb95 	bl	8005380 <osMessageQueueGet>
	osMessageQueueGet(yawQueueHandle,&sensors.yaw, &prio, osWaitForever);
 8001c56:	4b1e      	ldr	r3, [pc, #120]	; (8001cd0 <startSendSerial+0xe0>)
 8001c58:	6818      	ldr	r0, [r3, #0]
 8001c5a:	f107 020b 	add.w	r2, r7, #11
 8001c5e:	f107 030c 	add.w	r3, r7, #12
 8001c62:	f103 0110 	add.w	r1, r3, #16
 8001c66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c6a:	f003 fb89 	bl	8005380 <osMessageQueueGet>

	size = buildMessage(str.i, sensors);
 8001c6e:	466a      	mov	r2, sp
 8001c70:	f107 0318 	add.w	r3, r7, #24
 8001c74:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c78:	e882 0003 	stmia.w	r2, {r0, r1}
 8001c7c:	f107 030c 	add.w	r3, r7, #12
 8001c80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c82:	4814      	ldr	r0, [pc, #80]	; (8001cd4 <startSendSerial+0xe4>)
 8001c84:	f7ff fa22 	bl	80010cc <buildMessage>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <startSendSerial+0xe8>)
 8001c8e:	701a      	strb	r2, [r3, #0]
	if(HAL_UART_Transmit(&huart2, str.i, size,10) == HAL_OK){changeLed(GREEN);}
 8001c90:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <startSendSerial+0xe8>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	230a      	movs	r3, #10
 8001c98:	490e      	ldr	r1, [pc, #56]	; (8001cd4 <startSendSerial+0xe4>)
 8001c9a:	4810      	ldr	r0, [pc, #64]	; (8001cdc <startSendSerial+0xec>)
 8001c9c:	f002 f871 	bl	8003d82 <HAL_UART_Transmit>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d103      	bne.n	8001cae <startSendSerial+0xbe>
 8001ca6:	2001      	movs	r0, #1
 8001ca8:	f7ff fcce 	bl	8001648 <changeLed>
 8001cac:	e002      	b.n	8001cb4 <startSendSerial+0xc4>
	else{changeLed(RED);}
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f7ff fcca 	bl	8001648 <changeLed>
    osDelay(SERIAL_DELAY);
 8001cb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cb8:	f003 f926 	bl	8004f08 <osDelay>
	osMessageQueueGet(tempQueueHandle,&sensors.temp, &prio, osWaitForever);
 8001cbc:	e79e      	b.n	8001bfc <startSendSerial+0xc>
 8001cbe:	bf00      	nop
 8001cc0:	20004ba4 	.word	0x20004ba4
 8001cc4:	20004b80 	.word	0x20004b80
 8001cc8:	20004ba8 	.word	0x20004ba8
 8001ccc:	20004b84 	.word	0x20004b84
 8001cd0:	20004b7c 	.word	0x20004b7c
 8001cd4:	20004bf0 	.word	0x20004bf0
 8001cd8:	20004b8c 	.word	0x20004b8c
 8001cdc:	20004bac 	.word	0x20004bac

08001ce0 <startGetTemp>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startGetTemp */
void startGetTemp(void *argument)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;

  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(adcHandle, osWaitForever);
 8001ce8:	4b25      	ldr	r3, [pc, #148]	; (8001d80 <startGetTemp+0xa0>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f003 f9e9 	bl	80050c8 <osMutexAcquire>

	  selTemp();
 8001cf6:	f7ff f951 	bl	8000f9c <selTemp>
	  HAL_ADC_Start(&hadc1);
 8001cfa:	4822      	ldr	r0, [pc, #136]	; (8001d84 <startGetTemp+0xa4>)
 8001cfc:	f000 fc76 	bl	80025ec <HAL_ADC_Start>
	  status = HAL_ADC_PollForConversion (& hadc1 , 1);
 8001d00:	2101      	movs	r1, #1
 8001d02:	4820      	ldr	r0, [pc, #128]	; (8001d84 <startGetTemp+0xa4>)
 8001d04:	f000 fd59 	bl	80027ba <HAL_ADC_PollForConversion>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	75fb      	strb	r3, [r7, #23]
	  if (status == HAL_OK){
 8001d0c:	7dfb      	ldrb	r3, [r7, #23]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d121      	bne.n	8001d56 <startGetTemp+0x76>

		  raw_temp = HAL_ADC_GetValue(&hadc1);
 8001d12:	481c      	ldr	r0, [pc, #112]	; (8001d84 <startGetTemp+0xa4>)
 8001d14:	f000 fddc 	bl	80028d0 <HAL_ADC_GetValue>
 8001d18:	6138      	str	r0, [r7, #16]
		  temp = convertTemp (raw_temp);									 //convert raw to float
 8001d1a:	6938      	ldr	r0, [r7, #16]
 8001d1c:	f7ff fae8 	bl	80012f0 <convertTemp>
 8001d20:	eef0 7a40 	vmov.f32	s15, s0
 8001d24:	edc7 7a03 	vstr	s15, [r7, #12]
		  temp = changeTempUnit (temp,units.temp);
 8001d28:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d2c:	4b16      	ldr	r3, [pc, #88]	; (8001d88 <startGetTemp+0xa8>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	eeb0 0a67 	vmov.f32	s0, s15
 8001d36:	f7ff fa47 	bl	80011c8 <changeTempUnit>
 8001d3a:	eef0 7a40 	vmov.f32	s15, s0
 8001d3e:	edc7 7a03 	vstr	s15, [r7, #12]
		  osMessageQueuePut(tempQueueHandle,&temp,1,osWaitForever);  //put message
 8001d42:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <startGetTemp+0xac>)
 8001d44:	6818      	ldr	r0, [r3, #0]
 8001d46:	f107 010c 	add.w	r1, r7, #12
 8001d4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f003 fab6 	bl	80052c0 <osMessageQueuePut>
 8001d54:	e007      	b.n	8001d66 <startGetTemp+0x86>
	  }
	  else{
		  while(1){

			  changeLed(BLUE);
 8001d56:	2002      	movs	r0, #2
 8001d58:	f7ff fc76 	bl	8001648 <changeLed>
			  HAL_Delay(500);
 8001d5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d60:	f000 fbdc 	bl	800251c <HAL_Delay>
			  changeLed(BLUE);
 8001d64:	e7f7      	b.n	8001d56 <startGetTemp+0x76>
		  }
	  }
	  HAL_ADC_Stop(&hadc1);
 8001d66:	4807      	ldr	r0, [pc, #28]	; (8001d84 <startGetTemp+0xa4>)
 8001d68:	f000 fcf4 	bl	8002754 <HAL_ADC_Stop>
	  osMutexRelease(adcHandle);
 8001d6c:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <startGetTemp+0xa0>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f003 f9f4 	bl	800515e <osMutexRelease>
	  osDelay(SERIAL_DELAY);
 8001d76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d7a:	f003 f8c5 	bl	8004f08 <osDelay>
	  osMutexAcquire(adcHandle, osWaitForever);
 8001d7e:	e7b3      	b.n	8001ce8 <startGetTemp+0x8>
 8001d80:	20004b88 	.word	0x20004b88
 8001d84:	20004b34 	.word	0x20004b34
 8001d88:	20004cf0 	.word	0x20004cf0
 8001d8c:	20004ba4 	.word	0x20004ba4

08001d90 <startGetLight>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startGetLight */
void startGetLight(void *argument)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;

  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(adcHandle, osWaitForever);
 8001d98:	4b1f      	ldr	r3, [pc, #124]	; (8001e18 <startGetLight+0x88>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001da0:	4618      	mov	r0, r3
 8001da2:	f003 f991 	bl	80050c8 <osMutexAcquire>

	  selLight();
 8001da6:	f7ff f919 	bl	8000fdc <selLight>
	  HAL_ADC_Start(&hadc1);
 8001daa:	481c      	ldr	r0, [pc, #112]	; (8001e1c <startGetLight+0x8c>)
 8001dac:	f000 fc1e 	bl	80025ec <HAL_ADC_Start>
	  status = HAL_ADC_PollForConversion (& hadc1 , 1);
 8001db0:	2101      	movs	r1, #1
 8001db2:	481a      	ldr	r0, [pc, #104]	; (8001e1c <startGetLight+0x8c>)
 8001db4:	f000 fd01 	bl	80027ba <HAL_ADC_PollForConversion>
 8001db8:	4603      	mov	r3, r0
 8001dba:	75fb      	strb	r3, [r7, #23]
	  if (status == HAL_OK){
 8001dbc:	7dfb      	ldrb	r3, [r7, #23]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d114      	bne.n	8001dec <startGetLight+0x5c>

		  raw_light = HAL_ADC_GetValue(&hadc1);
 8001dc2:	4816      	ldr	r0, [pc, #88]	; (8001e1c <startGetLight+0x8c>)
 8001dc4:	f000 fd84 	bl	80028d0 <HAL_ADC_GetValue>
 8001dc8:	6138      	str	r0, [r7, #16]
		  light = convertLight(raw_light);					   				 //convert raw to float
 8001dca:	6938      	ldr	r0, [r7, #16]
 8001dcc:	f7ff fadc 	bl	8001388 <convertLight>
 8001dd0:	eef0 7a40 	vmov.f32	s15, s0
 8001dd4:	edc7 7a03 	vstr	s15, [r7, #12]
		  osMessageQueuePut(lightQueueHandle,&light,1,osWaitForever);  //put message
 8001dd8:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <startGetLight+0x90>)
 8001dda:	6818      	ldr	r0, [r3, #0]
 8001ddc:	f107 010c 	add.w	r1, r7, #12
 8001de0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001de4:	2201      	movs	r2, #1
 8001de6:	f003 fa6b 	bl	80052c0 <osMessageQueuePut>
 8001dea:	e007      	b.n	8001dfc <startGetLight+0x6c>
	  }
	  else{
		  while(1){

			  changeLed(BLUE);
 8001dec:	2002      	movs	r0, #2
 8001dee:	f7ff fc2b 	bl	8001648 <changeLed>
			  HAL_Delay(500);
 8001df2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001df6:	f000 fb91 	bl	800251c <HAL_Delay>
			  changeLed(BLUE);
 8001dfa:	e7f7      	b.n	8001dec <startGetLight+0x5c>
		  }
	  }
	  HAL_ADC_Stop(&hadc1);
 8001dfc:	4807      	ldr	r0, [pc, #28]	; (8001e1c <startGetLight+0x8c>)
 8001dfe:	f000 fca9 	bl	8002754 <HAL_ADC_Stop>
	  osMutexRelease(adcHandle);
 8001e02:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <startGetLight+0x88>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f003 f9a9 	bl	800515e <osMutexRelease>
	  osDelay(SERIAL_DELAY);
 8001e0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e10:	f003 f87a 	bl	8004f08 <osDelay>
	  osMutexAcquire(adcHandle, osWaitForever);
 8001e14:	e7c0      	b.n	8001d98 <startGetLight+0x8>
 8001e16:	bf00      	nop
 8001e18:	20004b88 	.word	0x20004b88
 8001e1c:	20004b34 	.word	0x20004b34
 8001e20:	20004b80 	.word	0x20004b80

08001e24 <startGetRoll>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startGetRoll */
void startGetRoll(void *argument)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;

  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(adcHandle, osWaitForever);
 8001e2c:	4b24      	ldr	r3, [pc, #144]	; (8001ec0 <startGetRoll+0x9c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e34:	4618      	mov	r0, r3
 8001e36:	f003 f947 	bl	80050c8 <osMutexAcquire>

	  selRoll();
 8001e3a:	f7ff f8ed 	bl	8001018 <selRoll>
	  HAL_ADC_Start(&hadc1);
 8001e3e:	4821      	ldr	r0, [pc, #132]	; (8001ec4 <startGetRoll+0xa0>)
 8001e40:	f000 fbd4 	bl	80025ec <HAL_ADC_Start>
	  status = HAL_ADC_PollForConversion (& hadc1 , 1);
 8001e44:	2101      	movs	r1, #1
 8001e46:	481f      	ldr	r0, [pc, #124]	; (8001ec4 <startGetRoll+0xa0>)
 8001e48:	f000 fcb7 	bl	80027ba <HAL_ADC_PollForConversion>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	75fb      	strb	r3, [r7, #23]
	  if (status == HAL_OK){
 8001e50:	7dfb      	ldrb	r3, [r7, #23]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d11f      	bne.n	8001e96 <startGetRoll+0x72>

		  raw_roll = HAL_ADC_GetValue(&hadc1);
 8001e56:	481b      	ldr	r0, [pc, #108]	; (8001ec4 <startGetRoll+0xa0>)
 8001e58:	f000 fd3a 	bl	80028d0 <HAL_ADC_GetValue>
 8001e5c:	6138      	str	r0, [r7, #16]
		  convertTilt(&roll, raw_roll, 'X');		   				 //convert raw to float
 8001e5e:	f107 030c 	add.w	r3, r7, #12
 8001e62:	2258      	movs	r2, #88	; 0x58
 8001e64:	6939      	ldr	r1, [r7, #16]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff fafe 	bl	8001468 <convertTilt>
		  roll = changeTiltUnit(roll,units.tilt);
 8001e6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e70:	4815      	ldr	r0, [pc, #84]	; (8001ec8 <startGetRoll+0xa4>)
 8001e72:	eeb0 0a67 	vmov.f32	s0, s15
 8001e76:	f7ff f96f 	bl	8001158 <changeTiltUnit>
 8001e7a:	eef0 7a40 	vmov.f32	s15, s0
 8001e7e:	edc7 7a03 	vstr	s15, [r7, #12]
		  osMessageQueuePut(rollQueueHandle,&roll,1,osWaitForever);  //put message
 8001e82:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <startGetRoll+0xa8>)
 8001e84:	6818      	ldr	r0, [r3, #0]
 8001e86:	f107 010c 	add.w	r1, r7, #12
 8001e8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f003 fa16 	bl	80052c0 <osMessageQueuePut>
 8001e94:	e007      	b.n	8001ea6 <startGetRoll+0x82>
	  }
	  else{
		  while(1){

			  changeLed(BLUE);
 8001e96:	2002      	movs	r0, #2
 8001e98:	f7ff fbd6 	bl	8001648 <changeLed>
			  HAL_Delay(500);
 8001e9c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ea0:	f000 fb3c 	bl	800251c <HAL_Delay>
			  changeLed(BLUE);
 8001ea4:	e7f7      	b.n	8001e96 <startGetRoll+0x72>
		  }
	  }
	  HAL_ADC_Stop(&hadc1);
 8001ea6:	4807      	ldr	r0, [pc, #28]	; (8001ec4 <startGetRoll+0xa0>)
 8001ea8:	f000 fc54 	bl	8002754 <HAL_ADC_Stop>
	  osMutexRelease(adcHandle);
 8001eac:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <startGetRoll+0x9c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f003 f954 	bl	800515e <osMutexRelease>

	  osDelay(SERIAL_DELAY);
 8001eb6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001eba:	f003 f825 	bl	8004f08 <osDelay>
	  osMutexAcquire(adcHandle, osWaitForever);
 8001ebe:	e7b5      	b.n	8001e2c <startGetRoll+0x8>
 8001ec0:	20004b88 	.word	0x20004b88
 8001ec4:	20004b34 	.word	0x20004b34
 8001ec8:	20004cf1 	.word	0x20004cf1
 8001ecc:	20004ba8 	.word	0x20004ba8

08001ed0 <startGetPitch>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startGetPitch */
void startGetPitch(void *argument)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;

  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(adcHandle, osWaitForever);
 8001ed8:	4b24      	ldr	r3, [pc, #144]	; (8001f6c <startGetPitch+0x9c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f003 f8f1 	bl	80050c8 <osMutexAcquire>

	  selPitch();
 8001ee6:	f7ff f8b5 	bl	8001054 <selPitch>
	  HAL_ADC_Start(&hadc1);
 8001eea:	4821      	ldr	r0, [pc, #132]	; (8001f70 <startGetPitch+0xa0>)
 8001eec:	f000 fb7e 	bl	80025ec <HAL_ADC_Start>
	  status = HAL_ADC_PollForConversion (& hadc1 , 1);
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	481f      	ldr	r0, [pc, #124]	; (8001f70 <startGetPitch+0xa0>)
 8001ef4:	f000 fc61 	bl	80027ba <HAL_ADC_PollForConversion>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	75fb      	strb	r3, [r7, #23]
	  if (status == HAL_OK){
 8001efc:	7dfb      	ldrb	r3, [r7, #23]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d11f      	bne.n	8001f42 <startGetPitch+0x72>

		  raw_pitch = HAL_ADC_GetValue(&hadc1);
 8001f02:	481b      	ldr	r0, [pc, #108]	; (8001f70 <startGetPitch+0xa0>)
 8001f04:	f000 fce4 	bl	80028d0 <HAL_ADC_GetValue>
 8001f08:	6138      	str	r0, [r7, #16]
		  convertTilt(&pitch, raw_pitch, 'Y');		   				 //convert raw to float
 8001f0a:	f107 030c 	add.w	r3, r7, #12
 8001f0e:	2259      	movs	r2, #89	; 0x59
 8001f10:	6939      	ldr	r1, [r7, #16]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff faa8 	bl	8001468 <convertTilt>
		  pitch = changeTiltUnit(pitch,units.tilt);
 8001f18:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f1c:	4815      	ldr	r0, [pc, #84]	; (8001f74 <startGetPitch+0xa4>)
 8001f1e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f22:	f7ff f919 	bl	8001158 <changeTiltUnit>
 8001f26:	eef0 7a40 	vmov.f32	s15, s0
 8001f2a:	edc7 7a03 	vstr	s15, [r7, #12]
		  osMessageQueuePut(pitchQueueHandle,&pitch,1,osWaitForever);  //put message
 8001f2e:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <startGetPitch+0xa8>)
 8001f30:	6818      	ldr	r0, [r3, #0]
 8001f32:	f107 010c 	add.w	r1, r7, #12
 8001f36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f003 f9c0 	bl	80052c0 <osMessageQueuePut>
 8001f40:	e007      	b.n	8001f52 <startGetPitch+0x82>
	  }
	  else{
		  while(1){

			  changeLed(BLUE);
 8001f42:	2002      	movs	r0, #2
 8001f44:	f7ff fb80 	bl	8001648 <changeLed>
			  HAL_Delay(500);
 8001f48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f4c:	f000 fae6 	bl	800251c <HAL_Delay>
			  changeLed(BLUE);
 8001f50:	e7f7      	b.n	8001f42 <startGetPitch+0x72>
		  }
	  }
	  HAL_ADC_Stop(&hadc1);
 8001f52:	4807      	ldr	r0, [pc, #28]	; (8001f70 <startGetPitch+0xa0>)
 8001f54:	f000 fbfe 	bl	8002754 <HAL_ADC_Stop>
	  osMutexRelease(adcHandle);
 8001f58:	4b04      	ldr	r3, [pc, #16]	; (8001f6c <startGetPitch+0x9c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f003 f8fe 	bl	800515e <osMutexRelease>

	  osDelay(SERIAL_DELAY);
 8001f62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f66:	f002 ffcf 	bl	8004f08 <osDelay>
	  osMutexAcquire(adcHandle, osWaitForever);
 8001f6a:	e7b5      	b.n	8001ed8 <startGetPitch+0x8>
 8001f6c:	20004b88 	.word	0x20004b88
 8001f70:	20004b34 	.word	0x20004b34
 8001f74:	20004cf1 	.word	0x20004cf1
 8001f78:	20004b84 	.word	0x20004b84

08001f7c <startGetYaw>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startGetYaw */
void startGetYaw(void *argument)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;

  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(adcHandle, osWaitForever);
 8001f84:	4b24      	ldr	r3, [pc, #144]	; (8002018 <startGetYaw+0x9c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f003 f89b 	bl	80050c8 <osMutexAcquire>

	  selYaw();
 8001f92:	f7ff f87d 	bl	8001090 <selYaw>
	  HAL_ADC_Start(&hadc1);
 8001f96:	4821      	ldr	r0, [pc, #132]	; (800201c <startGetYaw+0xa0>)
 8001f98:	f000 fb28 	bl	80025ec <HAL_ADC_Start>
	  status = HAL_ADC_PollForConversion (& hadc1 , 1);
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	481f      	ldr	r0, [pc, #124]	; (800201c <startGetYaw+0xa0>)
 8001fa0:	f000 fc0b 	bl	80027ba <HAL_ADC_PollForConversion>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	75fb      	strb	r3, [r7, #23]
	  if (status == HAL_OK){
 8001fa8:	7dfb      	ldrb	r3, [r7, #23]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d11f      	bne.n	8001fee <startGetYaw+0x72>

		  raw_yaw = HAL_ADC_GetValue(&hadc1);
 8001fae:	481b      	ldr	r0, [pc, #108]	; (800201c <startGetYaw+0xa0>)
 8001fb0:	f000 fc8e 	bl	80028d0 <HAL_ADC_GetValue>
 8001fb4:	6138      	str	r0, [r7, #16]
		  convertTilt(&yaw, raw_yaw, 'Z');		   				 //convert raw to float
 8001fb6:	f107 030c 	add.w	r3, r7, #12
 8001fba:	225a      	movs	r2, #90	; 0x5a
 8001fbc:	6939      	ldr	r1, [r7, #16]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff fa52 	bl	8001468 <convertTilt>
		  yaw = changeTiltUnit(yaw,units.tilt);
 8001fc4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fc8:	4815      	ldr	r0, [pc, #84]	; (8002020 <startGetYaw+0xa4>)
 8001fca:	eeb0 0a67 	vmov.f32	s0, s15
 8001fce:	f7ff f8c3 	bl	8001158 <changeTiltUnit>
 8001fd2:	eef0 7a40 	vmov.f32	s15, s0
 8001fd6:	edc7 7a03 	vstr	s15, [r7, #12]
		  osMessageQueuePut(yawQueueHandle,&yaw,1,osWaitForever);   //put message
 8001fda:	4b12      	ldr	r3, [pc, #72]	; (8002024 <startGetYaw+0xa8>)
 8001fdc:	6818      	ldr	r0, [r3, #0]
 8001fde:	f107 010c 	add.w	r1, r7, #12
 8001fe2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f003 f96a 	bl	80052c0 <osMessageQueuePut>
 8001fec:	e007      	b.n	8001ffe <startGetYaw+0x82>
	  }
	  else{
		  while(1){

			  changeLed(BLUE);
 8001fee:	2002      	movs	r0, #2
 8001ff0:	f7ff fb2a 	bl	8001648 <changeLed>
			  HAL_Delay(500);
 8001ff4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ff8:	f000 fa90 	bl	800251c <HAL_Delay>
			  changeLed(BLUE);
 8001ffc:	e7f7      	b.n	8001fee <startGetYaw+0x72>
		  }
	  }
	  HAL_ADC_Stop(&hadc1);
 8001ffe:	4807      	ldr	r0, [pc, #28]	; (800201c <startGetYaw+0xa0>)
 8002000:	f000 fba8 	bl	8002754 <HAL_ADC_Stop>
	  osMutexRelease(adcHandle);
 8002004:	4b04      	ldr	r3, [pc, #16]	; (8002018 <startGetYaw+0x9c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f003 f8a8 	bl	800515e <osMutexRelease>

	  osDelay(SERIAL_DELAY);
 800200e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002012:	f002 ff79 	bl	8004f08 <osDelay>
	  osMutexAcquire(adcHandle, osWaitForever);
 8002016:	e7b5      	b.n	8001f84 <startGetYaw+0x8>
 8002018:	20004b88 	.word	0x20004b88
 800201c:	20004b34 	.word	0x20004b34
 8002020:	20004cf1 	.word	0x20004cf1
 8002024:	20004b7c 	.word	0x20004b7c

08002028 <StartTask08>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask08 */
void StartTask08(void *argument)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask08 */
  /* Infinite loop */
  for(;;)
  {
	HAL_UART_Receive(&huart2, str.i, 1, HAL_MAX_DELAY);
 8002030:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002034:	2201      	movs	r2, #1
 8002036:	4903      	ldr	r1, [pc, #12]	; (8002044 <StartTask08+0x1c>)
 8002038:	4803      	ldr	r0, [pc, #12]	; (8002048 <StartTask08+0x20>)
 800203a:	f001 ff34 	bl	8003ea6 <HAL_UART_Receive>
	NVIC_SystemReset();
 800203e:	f7fe ff97 	bl	8000f70 <__NVIC_SystemReset>
 8002042:	bf00      	nop
 8002044:	20004bf0 	.word	0x20004bf0
 8002048:	20004bac 	.word	0x20004bac

0800204c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002050:	b672      	cpsid	i
}
 8002052:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002054:	e7fe      	b.n	8002054 <Error_Handler+0x8>
	...

08002058 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	607b      	str	r3, [r7, #4]
 8002062:	4b12      	ldr	r3, [pc, #72]	; (80020ac <HAL_MspInit+0x54>)
 8002064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002066:	4a11      	ldr	r2, [pc, #68]	; (80020ac <HAL_MspInit+0x54>)
 8002068:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800206c:	6453      	str	r3, [r2, #68]	; 0x44
 800206e:	4b0f      	ldr	r3, [pc, #60]	; (80020ac <HAL_MspInit+0x54>)
 8002070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002076:	607b      	str	r3, [r7, #4]
 8002078:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	603b      	str	r3, [r7, #0]
 800207e:	4b0b      	ldr	r3, [pc, #44]	; (80020ac <HAL_MspInit+0x54>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	4a0a      	ldr	r2, [pc, #40]	; (80020ac <HAL_MspInit+0x54>)
 8002084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002088:	6413      	str	r3, [r2, #64]	; 0x40
 800208a:	4b08      	ldr	r3, [pc, #32]	; (80020ac <HAL_MspInit+0x54>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002092:	603b      	str	r3, [r7, #0]
 8002094:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002096:	2200      	movs	r2, #0
 8002098:	210f      	movs	r1, #15
 800209a:	f06f 0001 	mvn.w	r0, #1
 800209e:	f000 ff2e 	bl	8002efe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40023800 	.word	0x40023800

080020b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08a      	sub	sp, #40	; 0x28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b8:	f107 0314 	add.w	r3, r7, #20
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a17      	ldr	r2, [pc, #92]	; (800212c <HAL_ADC_MspInit+0x7c>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d127      	bne.n	8002122 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	613b      	str	r3, [r7, #16]
 80020d6:	4b16      	ldr	r3, [pc, #88]	; (8002130 <HAL_ADC_MspInit+0x80>)
 80020d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020da:	4a15      	ldr	r2, [pc, #84]	; (8002130 <HAL_ADC_MspInit+0x80>)
 80020dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020e0:	6453      	str	r3, [r2, #68]	; 0x44
 80020e2:	4b13      	ldr	r3, [pc, #76]	; (8002130 <HAL_ADC_MspInit+0x80>)
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	4b0f      	ldr	r3, [pc, #60]	; (8002130 <HAL_ADC_MspInit+0x80>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	4a0e      	ldr	r2, [pc, #56]	; (8002130 <HAL_ADC_MspInit+0x80>)
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	6313      	str	r3, [r2, #48]	; 0x30
 80020fe:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <HAL_ADC_MspInit+0x80>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 800210a:	23d3      	movs	r3, #211	; 0xd3
 800210c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800210e:	2303      	movs	r3, #3
 8002110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002116:	f107 0314 	add.w	r3, r7, #20
 800211a:	4619      	mov	r1, r3
 800211c:	4805      	ldr	r0, [pc, #20]	; (8002134 <HAL_ADC_MspInit+0x84>)
 800211e:	f000 ffb7 	bl	8003090 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002122:	bf00      	nop
 8002124:	3728      	adds	r7, #40	; 0x28
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40012000 	.word	0x40012000
 8002130:	40023800 	.word	0x40023800
 8002134:	40020000 	.word	0x40020000

08002138 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b08a      	sub	sp, #40	; 0x28
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002140:	f107 0314 	add.w	r3, r7, #20
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	609a      	str	r2, [r3, #8]
 800214c:	60da      	str	r2, [r3, #12]
 800214e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a1d      	ldr	r2, [pc, #116]	; (80021cc <HAL_UART_MspInit+0x94>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d133      	bne.n	80021c2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	4b1c      	ldr	r3, [pc, #112]	; (80021d0 <HAL_UART_MspInit+0x98>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	4a1b      	ldr	r2, [pc, #108]	; (80021d0 <HAL_UART_MspInit+0x98>)
 8002164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002168:	6413      	str	r3, [r2, #64]	; 0x40
 800216a:	4b19      	ldr	r3, [pc, #100]	; (80021d0 <HAL_UART_MspInit+0x98>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002172:	613b      	str	r3, [r7, #16]
 8002174:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <HAL_UART_MspInit+0x98>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	4a14      	ldr	r2, [pc, #80]	; (80021d0 <HAL_UART_MspInit+0x98>)
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	6313      	str	r3, [r2, #48]	; 0x30
 8002186:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <HAL_UART_MspInit+0x98>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002192:	230c      	movs	r3, #12
 8002194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002196:	2302      	movs	r3, #2
 8002198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800219e:	2303      	movs	r3, #3
 80021a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021a2:	2307      	movs	r3, #7
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a6:	f107 0314 	add.w	r3, r7, #20
 80021aa:	4619      	mov	r1, r3
 80021ac:	4809      	ldr	r0, [pc, #36]	; (80021d4 <HAL_UART_MspInit+0x9c>)
 80021ae:	f000 ff6f 	bl	8003090 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80021b2:	2200      	movs	r2, #0
 80021b4:	2105      	movs	r1, #5
 80021b6:	2026      	movs	r0, #38	; 0x26
 80021b8:	f000 fea1 	bl	8002efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021bc:	2026      	movs	r0, #38	; 0x26
 80021be:	f000 feba 	bl	8002f36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021c2:	bf00      	nop
 80021c4:	3728      	adds	r7, #40	; 0x28
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40004400 	.word	0x40004400
 80021d0:	40023800 	.word	0x40023800
 80021d4:	40020000 	.word	0x40020000

080021d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021dc:	e7fe      	b.n	80021dc <NMI_Handler+0x4>

080021de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021de:	b480      	push	{r7}
 80021e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021e2:	e7fe      	b.n	80021e2 <HardFault_Handler+0x4>

080021e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021e8:	e7fe      	b.n	80021e8 <MemManage_Handler+0x4>

080021ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021ea:	b480      	push	{r7}
 80021ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ee:	e7fe      	b.n	80021ee <BusFault_Handler+0x4>

080021f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021f4:	e7fe      	b.n	80021f4 <UsageFault_Handler+0x4>

080021f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021f6:	b480      	push	{r7}
 80021f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021fa:	bf00      	nop
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002208:	f000 f968 	bl	80024dc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800220c:	f005 f874 	bl	80072f8 <xTaskGetSchedulerState>
 8002210:	4603      	mov	r3, r0
 8002212:	2b01      	cmp	r3, #1
 8002214:	d001      	beq.n	800221a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002216:	f005 ff57 	bl	80080c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
	...

08002220 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002224:	4802      	ldr	r0, [pc, #8]	; (8002230 <USART2_IRQHandler+0x10>)
 8002226:	f001 fee1 	bl	8003fec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20004bac 	.word	0x20004bac

08002234 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
	return 1;
 8002238:	2301      	movs	r3, #1
}
 800223a:	4618      	mov	r0, r3
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <_kill>:

int _kill(int pid, int sig)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800224e:	f006 f9b5 	bl	80085bc <__errno>
 8002252:	4603      	mov	r3, r0
 8002254:	2216      	movs	r2, #22
 8002256:	601a      	str	r2, [r3, #0]
	return -1;
 8002258:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800225c:	4618      	mov	r0, r3
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <_exit>:

void _exit (int status)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800226c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f7ff ffe7 	bl	8002244 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002276:	e7fe      	b.n	8002276 <_exit+0x12>

08002278 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002284:	2300      	movs	r3, #0
 8002286:	617b      	str	r3, [r7, #20]
 8002288:	e00a      	b.n	80022a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800228a:	f3af 8000 	nop.w
 800228e:	4601      	mov	r1, r0
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	1c5a      	adds	r2, r3, #1
 8002294:	60ba      	str	r2, [r7, #8]
 8002296:	b2ca      	uxtb	r2, r1
 8002298:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	3301      	adds	r3, #1
 800229e:	617b      	str	r3, [r7, #20]
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	dbf0      	blt.n	800228a <_read+0x12>
	}

return len;
 80022a8:	687b      	ldr	r3, [r7, #4]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3718      	adds	r7, #24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b086      	sub	sp, #24
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	60f8      	str	r0, [r7, #12]
 80022ba:	60b9      	str	r1, [r7, #8]
 80022bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]
 80022c2:	e009      	b.n	80022d8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	1c5a      	adds	r2, r3, #1
 80022c8:	60ba      	str	r2, [r7, #8]
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	3301      	adds	r3, #1
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	429a      	cmp	r2, r3
 80022de:	dbf1      	blt.n	80022c4 <_write+0x12>
	}
	return len;
 80022e0:	687b      	ldr	r3, [r7, #4]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3718      	adds	r7, #24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <_close>:

int _close(int file)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
	return -1;
 80022f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
 800230a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002312:	605a      	str	r2, [r3, #4]
	return 0;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <_isatty>:

int _isatty(int file)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
	return 1;
 800232a:	2301      	movs	r3, #1
}
 800232c:	4618      	mov	r0, r3
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
	return 0;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
	...

08002354 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800235c:	4a14      	ldr	r2, [pc, #80]	; (80023b0 <_sbrk+0x5c>)
 800235e:	4b15      	ldr	r3, [pc, #84]	; (80023b4 <_sbrk+0x60>)
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002368:	4b13      	ldr	r3, [pc, #76]	; (80023b8 <_sbrk+0x64>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d102      	bne.n	8002376 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002370:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <_sbrk+0x64>)
 8002372:	4a12      	ldr	r2, [pc, #72]	; (80023bc <_sbrk+0x68>)
 8002374:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002376:	4b10      	ldr	r3, [pc, #64]	; (80023b8 <_sbrk+0x64>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4413      	add	r3, r2
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	429a      	cmp	r2, r3
 8002382:	d207      	bcs.n	8002394 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002384:	f006 f91a 	bl	80085bc <__errno>
 8002388:	4603      	mov	r3, r0
 800238a:	220c      	movs	r2, #12
 800238c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800238e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002392:	e009      	b.n	80023a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002394:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <_sbrk+0x64>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800239a:	4b07      	ldr	r3, [pc, #28]	; (80023b8 <_sbrk+0x64>)
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4413      	add	r3, r2
 80023a2:	4a05      	ldr	r2, [pc, #20]	; (80023b8 <_sbrk+0x64>)
 80023a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023a6:	68fb      	ldr	r3, [r7, #12]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	20020000 	.word	0x20020000
 80023b4:	00000400 	.word	0x00000400
 80023b8:	20000200 	.word	0x20000200
 80023bc:	20004d50 	.word	0x20004d50

080023c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023c4:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <SystemInit+0x20>)
 80023c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ca:	4a05      	ldr	r2, [pc, #20]	; (80023e0 <SystemInit+0x20>)
 80023cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023d4:	bf00      	nop
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	e000ed00 	.word	0xe000ed00

080023e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80023e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800241c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023e8:	480d      	ldr	r0, [pc, #52]	; (8002420 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023ea:	490e      	ldr	r1, [pc, #56]	; (8002424 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023ec:	4a0e      	ldr	r2, [pc, #56]	; (8002428 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023f0:	e002      	b.n	80023f8 <LoopCopyDataInit>

080023f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023f6:	3304      	adds	r3, #4

080023f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023fc:	d3f9      	bcc.n	80023f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023fe:	4a0b      	ldr	r2, [pc, #44]	; (800242c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002400:	4c0b      	ldr	r4, [pc, #44]	; (8002430 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002404:	e001      	b.n	800240a <LoopFillZerobss>

08002406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002408:	3204      	adds	r2, #4

0800240a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800240a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800240c:	d3fb      	bcc.n	8002406 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800240e:	f7ff ffd7 	bl	80023c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002412:	f006 f8d9 	bl	80085c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002416:	f7ff f95d 	bl	80016d4 <main>
  bx  lr    
 800241a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800241c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002420:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002424:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002428:	0800c074 	.word	0x0800c074
  ldr r2, =_sbss
 800242c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002430:	20004d4c 	.word	0x20004d4c

08002434 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002434:	e7fe      	b.n	8002434 <ADC_IRQHandler>
	...

08002438 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800243c:	4b0e      	ldr	r3, [pc, #56]	; (8002478 <HAL_Init+0x40>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a0d      	ldr	r2, [pc, #52]	; (8002478 <HAL_Init+0x40>)
 8002442:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002446:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002448:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <HAL_Init+0x40>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a0a      	ldr	r2, [pc, #40]	; (8002478 <HAL_Init+0x40>)
 800244e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002452:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002454:	4b08      	ldr	r3, [pc, #32]	; (8002478 <HAL_Init+0x40>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a07      	ldr	r2, [pc, #28]	; (8002478 <HAL_Init+0x40>)
 800245a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800245e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002460:	2003      	movs	r0, #3
 8002462:	f000 fd41 	bl	8002ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002466:	200f      	movs	r0, #15
 8002468:	f000 f808 	bl	800247c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800246c:	f7ff fdf4 	bl	8002058 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40023c00 	.word	0x40023c00

0800247c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002484:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <HAL_InitTick+0x54>)
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <HAL_InitTick+0x58>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	4619      	mov	r1, r3
 800248e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002492:	fbb3 f3f1 	udiv	r3, r3, r1
 8002496:	fbb2 f3f3 	udiv	r3, r2, r3
 800249a:	4618      	mov	r0, r3
 800249c:	f000 fd59 	bl	8002f52 <HAL_SYSTICK_Config>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e00e      	b.n	80024c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b0f      	cmp	r3, #15
 80024ae:	d80a      	bhi.n	80024c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024b0:	2200      	movs	r2, #0
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024b8:	f000 fd21 	bl	8002efe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024bc:	4a06      	ldr	r2, [pc, #24]	; (80024d8 <HAL_InitTick+0x5c>)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
 80024c4:	e000      	b.n	80024c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	20000000 	.word	0x20000000
 80024d4:	20000008 	.word	0x20000008
 80024d8:	20000004 	.word	0x20000004

080024dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024e0:	4b06      	ldr	r3, [pc, #24]	; (80024fc <HAL_IncTick+0x20>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	461a      	mov	r2, r3
 80024e6:	4b06      	ldr	r3, [pc, #24]	; (8002500 <HAL_IncTick+0x24>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4413      	add	r3, r2
 80024ec:	4a04      	ldr	r2, [pc, #16]	; (8002500 <HAL_IncTick+0x24>)
 80024ee:	6013      	str	r3, [r2, #0]
}
 80024f0:	bf00      	nop
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	20000008 	.word	0x20000008
 8002500:	20004cf8 	.word	0x20004cf8

08002504 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  return uwTick;
 8002508:	4b03      	ldr	r3, [pc, #12]	; (8002518 <HAL_GetTick+0x14>)
 800250a:	681b      	ldr	r3, [r3, #0]
}
 800250c:	4618      	mov	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	20004cf8 	.word	0x20004cf8

0800251c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002524:	f7ff ffee 	bl	8002504 <HAL_GetTick>
 8002528:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002534:	d005      	beq.n	8002542 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002536:	4b0a      	ldr	r3, [pc, #40]	; (8002560 <HAL_Delay+0x44>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	461a      	mov	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4413      	add	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002542:	bf00      	nop
 8002544:	f7ff ffde 	bl	8002504 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	429a      	cmp	r2, r3
 8002552:	d8f7      	bhi.n	8002544 <HAL_Delay+0x28>
  {
  }
}
 8002554:	bf00      	nop
 8002556:	bf00      	nop
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20000008 	.word	0x20000008

08002564 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800256c:	2300      	movs	r3, #0
 800256e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e033      	b.n	80025e2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	2b00      	cmp	r3, #0
 8002580:	d109      	bne.n	8002596 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff fd94 	bl	80020b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f003 0310 	and.w	r3, r3, #16
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d118      	bne.n	80025d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025aa:	f023 0302 	bic.w	r3, r3, #2
 80025ae:	f043 0202 	orr.w	r2, r3, #2
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 faca 	bl	8002b50 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	f023 0303 	bic.w	r3, r3, #3
 80025ca:	f043 0201 	orr.w	r2, r3, #1
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	641a      	str	r2, [r3, #64]	; 0x40
 80025d2:	e001      	b.n	80025d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
	...

080025ec <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d101      	bne.n	8002606 <HAL_ADC_Start+0x1a>
 8002602:	2302      	movs	r3, #2
 8002604:	e097      	b.n	8002736 <HAL_ADC_Start+0x14a>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	2b01      	cmp	r3, #1
 800261a:	d018      	beq.n	800264e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f042 0201 	orr.w	r2, r2, #1
 800262a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800262c:	4b45      	ldr	r3, [pc, #276]	; (8002744 <HAL_ADC_Start+0x158>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a45      	ldr	r2, [pc, #276]	; (8002748 <HAL_ADC_Start+0x15c>)
 8002632:	fba2 2303 	umull	r2, r3, r2, r3
 8002636:	0c9a      	lsrs	r2, r3, #18
 8002638:	4613      	mov	r3, r2
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	4413      	add	r3, r2
 800263e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002640:	e002      	b.n	8002648 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	3b01      	subs	r3, #1
 8002646:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f9      	bne.n	8002642 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b01      	cmp	r3, #1
 800265a:	d15f      	bne.n	800271c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002664:	f023 0301 	bic.w	r3, r3, #1
 8002668:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800267a:	2b00      	cmp	r3, #0
 800267c:	d007      	beq.n	800268e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002686:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800269a:	d106      	bne.n	80026aa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a0:	f023 0206 	bic.w	r2, r3, #6
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	645a      	str	r2, [r3, #68]	; 0x44
 80026a8:	e002      	b.n	80026b0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026b8:	4b24      	ldr	r3, [pc, #144]	; (800274c <HAL_ADC_Start+0x160>)
 80026ba:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80026c4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f003 031f 	and.w	r3, r3, #31
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10f      	bne.n	80026f2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d129      	bne.n	8002734 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	e020      	b.n	8002734 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a16      	ldr	r2, [pc, #88]	; (8002750 <HAL_ADC_Start+0x164>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d11b      	bne.n	8002734 <HAL_ADC_Start+0x148>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d114      	bne.n	8002734 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002718:	609a      	str	r2, [r3, #8]
 800271a:	e00b      	b.n	8002734 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002720:	f043 0210 	orr.w	r2, r3, #16
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272c:	f043 0201 	orr.w	r2, r3, #1
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	20000000 	.word	0x20000000
 8002748:	431bde83 	.word	0x431bde83
 800274c:	40012300 	.word	0x40012300
 8002750:	40012000 	.word	0x40012000

08002754 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002762:	2b01      	cmp	r3, #1
 8002764:	d101      	bne.n	800276a <HAL_ADC_Stop+0x16>
 8002766:	2302      	movs	r3, #2
 8002768:	e021      	b.n	80027ae <HAL_ADC_Stop+0x5a>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0201 	bic.w	r2, r2, #1
 8002780:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b00      	cmp	r3, #0
 800278e:	d109      	bne.n	80027a4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002794:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002798:	f023 0301 	bic.w	r3, r3, #1
 800279c:	f043 0201 	orr.w	r2, r3, #1
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b084      	sub	sp, #16
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
 80027c2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027d6:	d113      	bne.n	8002800 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80027e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027e6:	d10b      	bne.n	8002800 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	f043 0220 	orr.w	r2, r3, #32
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e063      	b.n	80028c8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002800:	f7ff fe80 	bl	8002504 <HAL_GetTick>
 8002804:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002806:	e021      	b.n	800284c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800280e:	d01d      	beq.n	800284c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d007      	beq.n	8002826 <HAL_ADC_PollForConversion+0x6c>
 8002816:	f7ff fe75 	bl	8002504 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	429a      	cmp	r2, r3
 8002824:	d212      	bcs.n	800284c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b02      	cmp	r3, #2
 8002832:	d00b      	beq.n	800284c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002838:	f043 0204 	orr.w	r2, r3, #4
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e03d      	b.n	80028c8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b02      	cmp	r3, #2
 8002858:	d1d6      	bne.n	8002808 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f06f 0212 	mvn.w	r2, #18
 8002862:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d123      	bne.n	80028c6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002882:	2b00      	cmp	r3, #0
 8002884:	d11f      	bne.n	80028c6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002890:	2b00      	cmp	r3, #0
 8002892:	d006      	beq.n	80028a2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d111      	bne.n	80028c6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d105      	bne.n	80028c6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	f043 0201 	orr.w	r2, r3, #1
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80028de:	4618      	mov	r0, r3
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
	...

080028ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80028f6:	2300      	movs	r3, #0
 80028f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002900:	2b01      	cmp	r3, #1
 8002902:	d101      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x1c>
 8002904:	2302      	movs	r3, #2
 8002906:	e113      	b.n	8002b30 <HAL_ADC_ConfigChannel+0x244>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2b09      	cmp	r3, #9
 8002916:	d925      	bls.n	8002964 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68d9      	ldr	r1, [r3, #12]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	b29b      	uxth	r3, r3
 8002924:	461a      	mov	r2, r3
 8002926:	4613      	mov	r3, r2
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	4413      	add	r3, r2
 800292c:	3b1e      	subs	r3, #30
 800292e:	2207      	movs	r2, #7
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	43da      	mvns	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	400a      	ands	r2, r1
 800293c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68d9      	ldr	r1, [r3, #12]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	b29b      	uxth	r3, r3
 800294e:	4618      	mov	r0, r3
 8002950:	4603      	mov	r3, r0
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	4403      	add	r3, r0
 8002956:	3b1e      	subs	r3, #30
 8002958:	409a      	lsls	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	60da      	str	r2, [r3, #12]
 8002962:	e022      	b.n	80029aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6919      	ldr	r1, [r3, #16]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	b29b      	uxth	r3, r3
 8002970:	461a      	mov	r2, r3
 8002972:	4613      	mov	r3, r2
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	4413      	add	r3, r2
 8002978:	2207      	movs	r2, #7
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43da      	mvns	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	400a      	ands	r2, r1
 8002986:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6919      	ldr	r1, [r3, #16]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	b29b      	uxth	r3, r3
 8002998:	4618      	mov	r0, r3
 800299a:	4603      	mov	r3, r0
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	4403      	add	r3, r0
 80029a0:	409a      	lsls	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b06      	cmp	r3, #6
 80029b0:	d824      	bhi.n	80029fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	3b05      	subs	r3, #5
 80029c4:	221f      	movs	r2, #31
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43da      	mvns	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	400a      	ands	r2, r1
 80029d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	b29b      	uxth	r3, r3
 80029e0:	4618      	mov	r0, r3
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	3b05      	subs	r3, #5
 80029ee:	fa00 f203 	lsl.w	r2, r0, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	635a      	str	r2, [r3, #52]	; 0x34
 80029fa:	e04c      	b.n	8002a96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2b0c      	cmp	r3, #12
 8002a02:	d824      	bhi.n	8002a4e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	3b23      	subs	r3, #35	; 0x23
 8002a16:	221f      	movs	r2, #31
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43da      	mvns	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	400a      	ands	r2, r1
 8002a24:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	4618      	mov	r0, r3
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	3b23      	subs	r3, #35	; 0x23
 8002a40:	fa00 f203 	lsl.w	r2, r0, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	631a      	str	r2, [r3, #48]	; 0x30
 8002a4c:	e023      	b.n	8002a96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	3b41      	subs	r3, #65	; 0x41
 8002a60:	221f      	movs	r2, #31
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	43da      	mvns	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	400a      	ands	r2, r1
 8002a6e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	4613      	mov	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	3b41      	subs	r3, #65	; 0x41
 8002a8a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a96:	4b29      	ldr	r3, [pc, #164]	; (8002b3c <HAL_ADC_ConfigChannel+0x250>)
 8002a98:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a28      	ldr	r2, [pc, #160]	; (8002b40 <HAL_ADC_ConfigChannel+0x254>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d10f      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x1d8>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b12      	cmp	r3, #18
 8002aaa:	d10b      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a1d      	ldr	r2, [pc, #116]	; (8002b40 <HAL_ADC_ConfigChannel+0x254>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d12b      	bne.n	8002b26 <HAL_ADC_ConfigChannel+0x23a>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a1c      	ldr	r2, [pc, #112]	; (8002b44 <HAL_ADC_ConfigChannel+0x258>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d003      	beq.n	8002ae0 <HAL_ADC_ConfigChannel+0x1f4>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2b11      	cmp	r3, #17
 8002ade:	d122      	bne.n	8002b26 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a11      	ldr	r2, [pc, #68]	; (8002b44 <HAL_ADC_ConfigChannel+0x258>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d111      	bne.n	8002b26 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b02:	4b11      	ldr	r3, [pc, #68]	; (8002b48 <HAL_ADC_ConfigChannel+0x25c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a11      	ldr	r2, [pc, #68]	; (8002b4c <HAL_ADC_ConfigChannel+0x260>)
 8002b08:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0c:	0c9a      	lsrs	r2, r3, #18
 8002b0e:	4613      	mov	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b18:	e002      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1f9      	bne.n	8002b1a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	40012300 	.word	0x40012300
 8002b40:	40012000 	.word	0x40012000
 8002b44:	10000012 	.word	0x10000012
 8002b48:	20000000 	.word	0x20000000
 8002b4c:	431bde83 	.word	0x431bde83

08002b50 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b58:	4b79      	ldr	r3, [pc, #484]	; (8002d40 <ADC_Init+0x1f0>)
 8002b5a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	431a      	orrs	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6859      	ldr	r1, [r3, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	021a      	lsls	r2, r3, #8
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002ba8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6859      	ldr	r1, [r3, #4]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6899      	ldr	r1, [r3, #8]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68da      	ldr	r2, [r3, #12]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be2:	4a58      	ldr	r2, [pc, #352]	; (8002d44 <ADC_Init+0x1f4>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d022      	beq.n	8002c2e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bf6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6899      	ldr	r1, [r3, #8]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6899      	ldr	r1, [r3, #8]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	609a      	str	r2, [r3, #8]
 8002c2c:	e00f      	b.n	8002c4e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0202 	bic.w	r2, r2, #2
 8002c5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6899      	ldr	r1, [r3, #8]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	7e1b      	ldrb	r3, [r3, #24]
 8002c68:	005a      	lsls	r2, r3, #1
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d01b      	beq.n	8002cb4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c8a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002c9a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6859      	ldr	r1, [r3, #4]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	035a      	lsls	r2, r3, #13
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	605a      	str	r2, [r3, #4]
 8002cb2:	e007      	b.n	8002cc4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cc2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002cd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	051a      	lsls	r2, r3, #20
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002cf8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6899      	ldr	r1, [r3, #8]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d06:	025a      	lsls	r2, r3, #9
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689a      	ldr	r2, [r3, #8]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6899      	ldr	r1, [r3, #8]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	029a      	lsls	r2, r3, #10
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	609a      	str	r2, [r3, #8]
}
 8002d34:	bf00      	nop
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	40012300 	.word	0x40012300
 8002d44:	0f000001 	.word	0x0f000001

08002d48 <__NVIC_SetPriorityGrouping>:
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d58:	4b0c      	ldr	r3, [pc, #48]	; (8002d8c <__NVIC_SetPriorityGrouping+0x44>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d64:	4013      	ands	r3, r2
 8002d66:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d7a:	4a04      	ldr	r2, [pc, #16]	; (8002d8c <__NVIC_SetPriorityGrouping+0x44>)
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	60d3      	str	r3, [r2, #12]
}
 8002d80:	bf00      	nop
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	e000ed00 	.word	0xe000ed00

08002d90 <__NVIC_GetPriorityGrouping>:
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d94:	4b04      	ldr	r3, [pc, #16]	; (8002da8 <__NVIC_GetPriorityGrouping+0x18>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	0a1b      	lsrs	r3, r3, #8
 8002d9a:	f003 0307 	and.w	r3, r3, #7
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	e000ed00 	.word	0xe000ed00

08002dac <__NVIC_EnableIRQ>:
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	4603      	mov	r3, r0
 8002db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	db0b      	blt.n	8002dd6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dbe:	79fb      	ldrb	r3, [r7, #7]
 8002dc0:	f003 021f 	and.w	r2, r3, #31
 8002dc4:	4907      	ldr	r1, [pc, #28]	; (8002de4 <__NVIC_EnableIRQ+0x38>)
 8002dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dca:	095b      	lsrs	r3, r3, #5
 8002dcc:	2001      	movs	r0, #1
 8002dce:	fa00 f202 	lsl.w	r2, r0, r2
 8002dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	e000e100 	.word	0xe000e100

08002de8 <__NVIC_SetPriority>:
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	6039      	str	r1, [r7, #0]
 8002df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	db0a      	blt.n	8002e12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	b2da      	uxtb	r2, r3
 8002e00:	490c      	ldr	r1, [pc, #48]	; (8002e34 <__NVIC_SetPriority+0x4c>)
 8002e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e06:	0112      	lsls	r2, r2, #4
 8002e08:	b2d2      	uxtb	r2, r2
 8002e0a:	440b      	add	r3, r1
 8002e0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002e10:	e00a      	b.n	8002e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	4908      	ldr	r1, [pc, #32]	; (8002e38 <__NVIC_SetPriority+0x50>)
 8002e18:	79fb      	ldrb	r3, [r7, #7]
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	3b04      	subs	r3, #4
 8002e20:	0112      	lsls	r2, r2, #4
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	440b      	add	r3, r1
 8002e26:	761a      	strb	r2, [r3, #24]
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr
 8002e34:	e000e100 	.word	0xe000e100
 8002e38:	e000ed00 	.word	0xe000ed00

08002e3c <NVIC_EncodePriority>:
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b089      	sub	sp, #36	; 0x24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	f1c3 0307 	rsb	r3, r3, #7
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	bf28      	it	cs
 8002e5a:	2304      	movcs	r3, #4
 8002e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	3304      	adds	r3, #4
 8002e62:	2b06      	cmp	r3, #6
 8002e64:	d902      	bls.n	8002e6c <NVIC_EncodePriority+0x30>
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	3b03      	subs	r3, #3
 8002e6a:	e000      	b.n	8002e6e <NVIC_EncodePriority+0x32>
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	43da      	mvns	r2, r3
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	401a      	ands	r2, r3
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8e:	43d9      	mvns	r1, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e94:	4313      	orrs	r3, r2
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3724      	adds	r7, #36	; 0x24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
	...

08002ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002eb4:	d301      	bcc.n	8002eba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e00f      	b.n	8002eda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eba:	4a0a      	ldr	r2, [pc, #40]	; (8002ee4 <SysTick_Config+0x40>)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ec2:	210f      	movs	r1, #15
 8002ec4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ec8:	f7ff ff8e 	bl	8002de8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ecc:	4b05      	ldr	r3, [pc, #20]	; (8002ee4 <SysTick_Config+0x40>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ed2:	4b04      	ldr	r3, [pc, #16]	; (8002ee4 <SysTick_Config+0x40>)
 8002ed4:	2207      	movs	r2, #7
 8002ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	e000e010 	.word	0xe000e010

08002ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f7ff ff29 	bl	8002d48 <__NVIC_SetPriorityGrouping>
}
 8002ef6:	bf00      	nop
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b086      	sub	sp, #24
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	4603      	mov	r3, r0
 8002f06:	60b9      	str	r1, [r7, #8]
 8002f08:	607a      	str	r2, [r7, #4]
 8002f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f10:	f7ff ff3e 	bl	8002d90 <__NVIC_GetPriorityGrouping>
 8002f14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	68b9      	ldr	r1, [r7, #8]
 8002f1a:	6978      	ldr	r0, [r7, #20]
 8002f1c:	f7ff ff8e 	bl	8002e3c <NVIC_EncodePriority>
 8002f20:	4602      	mov	r2, r0
 8002f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f26:	4611      	mov	r1, r2
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff ff5d 	bl	8002de8 <__NVIC_SetPriority>
}
 8002f2e:	bf00      	nop
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b082      	sub	sp, #8
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff ff31 	bl	8002dac <__NVIC_EnableIRQ>
}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7ff ffa2 	bl	8002ea4 <SysTick_Config>
 8002f60:	4603      	mov	r3, r0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b084      	sub	sp, #16
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f76:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f78:	f7ff fac4 	bl	8002504 <HAL_GetTick>
 8002f7c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d008      	beq.n	8002f9c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2280      	movs	r2, #128	; 0x80
 8002f8e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e052      	b.n	8003042 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0216 	bic.w	r2, r2, #22
 8002faa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695a      	ldr	r2, [r3, #20]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d103      	bne.n	8002fcc <HAL_DMA_Abort+0x62>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d007      	beq.n	8002fdc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0208 	bic.w	r2, r2, #8
 8002fda:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0201 	bic.w	r2, r2, #1
 8002fea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fec:	e013      	b.n	8003016 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fee:	f7ff fa89 	bl	8002504 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b05      	cmp	r3, #5
 8002ffa:	d90c      	bls.n	8003016 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2220      	movs	r2, #32
 8003000:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2203      	movs	r2, #3
 8003006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e015      	b.n	8003042 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1e4      	bne.n	8002fee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003028:	223f      	movs	r2, #63	; 0x3f
 800302a:	409a      	lsls	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800304a:	b480      	push	{r7}
 800304c:	b083      	sub	sp, #12
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d004      	beq.n	8003068 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2280      	movs	r2, #128	; 0x80
 8003062:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e00c      	b.n	8003082 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2205      	movs	r2, #5
 800306c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0201 	bic.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
	...

08003090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003090:	b480      	push	{r7}
 8003092:	b089      	sub	sp, #36	; 0x24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800309a:	2300      	movs	r3, #0
 800309c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800309e:	2300      	movs	r3, #0
 80030a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030a6:	2300      	movs	r3, #0
 80030a8:	61fb      	str	r3, [r7, #28]
 80030aa:	e159      	b.n	8003360 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030ac:	2201      	movs	r2, #1
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	4013      	ands	r3, r2
 80030be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	f040 8148 	bne.w	800335a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d005      	beq.n	80030e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d130      	bne.n	8003144 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	2203      	movs	r2, #3
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	43db      	mvns	r3, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4013      	ands	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	4313      	orrs	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003118:	2201      	movs	r2, #1
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	43db      	mvns	r3, r3
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	4013      	ands	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	091b      	lsrs	r3, r3, #4
 800312e:	f003 0201 	and.w	r2, r3, #1
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4313      	orrs	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f003 0303 	and.w	r3, r3, #3
 800314c:	2b03      	cmp	r3, #3
 800314e:	d017      	beq.n	8003180 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	2203      	movs	r2, #3
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43db      	mvns	r3, r3
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4013      	ands	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4313      	orrs	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f003 0303 	and.w	r3, r3, #3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d123      	bne.n	80031d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	08da      	lsrs	r2, r3, #3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3208      	adds	r2, #8
 8003194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003198:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	220f      	movs	r2, #15
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	43db      	mvns	r3, r3
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	4013      	ands	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	691a      	ldr	r2, [r3, #16]
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	08da      	lsrs	r2, r3, #3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	3208      	adds	r2, #8
 80031ce:	69b9      	ldr	r1, [r7, #24]
 80031d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	2203      	movs	r2, #3
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	43db      	mvns	r3, r3
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	4013      	ands	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f003 0203 	and.w	r2, r3, #3
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	4313      	orrs	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 80a2 	beq.w	800335a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003216:	2300      	movs	r3, #0
 8003218:	60fb      	str	r3, [r7, #12]
 800321a:	4b57      	ldr	r3, [pc, #348]	; (8003378 <HAL_GPIO_Init+0x2e8>)
 800321c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321e:	4a56      	ldr	r2, [pc, #344]	; (8003378 <HAL_GPIO_Init+0x2e8>)
 8003220:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003224:	6453      	str	r3, [r2, #68]	; 0x44
 8003226:	4b54      	ldr	r3, [pc, #336]	; (8003378 <HAL_GPIO_Init+0x2e8>)
 8003228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003232:	4a52      	ldr	r2, [pc, #328]	; (800337c <HAL_GPIO_Init+0x2ec>)
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	089b      	lsrs	r3, r3, #2
 8003238:	3302      	adds	r3, #2
 800323a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800323e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	f003 0303 	and.w	r3, r3, #3
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	220f      	movs	r2, #15
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	43db      	mvns	r3, r3
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	4013      	ands	r3, r2
 8003254:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a49      	ldr	r2, [pc, #292]	; (8003380 <HAL_GPIO_Init+0x2f0>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d019      	beq.n	8003292 <HAL_GPIO_Init+0x202>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a48      	ldr	r2, [pc, #288]	; (8003384 <HAL_GPIO_Init+0x2f4>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d013      	beq.n	800328e <HAL_GPIO_Init+0x1fe>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a47      	ldr	r2, [pc, #284]	; (8003388 <HAL_GPIO_Init+0x2f8>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d00d      	beq.n	800328a <HAL_GPIO_Init+0x1fa>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a46      	ldr	r2, [pc, #280]	; (800338c <HAL_GPIO_Init+0x2fc>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d007      	beq.n	8003286 <HAL_GPIO_Init+0x1f6>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a45      	ldr	r2, [pc, #276]	; (8003390 <HAL_GPIO_Init+0x300>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d101      	bne.n	8003282 <HAL_GPIO_Init+0x1f2>
 800327e:	2304      	movs	r3, #4
 8003280:	e008      	b.n	8003294 <HAL_GPIO_Init+0x204>
 8003282:	2307      	movs	r3, #7
 8003284:	e006      	b.n	8003294 <HAL_GPIO_Init+0x204>
 8003286:	2303      	movs	r3, #3
 8003288:	e004      	b.n	8003294 <HAL_GPIO_Init+0x204>
 800328a:	2302      	movs	r3, #2
 800328c:	e002      	b.n	8003294 <HAL_GPIO_Init+0x204>
 800328e:	2301      	movs	r3, #1
 8003290:	e000      	b.n	8003294 <HAL_GPIO_Init+0x204>
 8003292:	2300      	movs	r3, #0
 8003294:	69fa      	ldr	r2, [r7, #28]
 8003296:	f002 0203 	and.w	r2, r2, #3
 800329a:	0092      	lsls	r2, r2, #2
 800329c:	4093      	lsls	r3, r2
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032a4:	4935      	ldr	r1, [pc, #212]	; (800337c <HAL_GPIO_Init+0x2ec>)
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	089b      	lsrs	r3, r3, #2
 80032aa:	3302      	adds	r3, #2
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032b2:	4b38      	ldr	r3, [pc, #224]	; (8003394 <HAL_GPIO_Init+0x304>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	43db      	mvns	r3, r3
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	4013      	ands	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032d6:	4a2f      	ldr	r2, [pc, #188]	; (8003394 <HAL_GPIO_Init+0x304>)
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80032dc:	4b2d      	ldr	r3, [pc, #180]	; (8003394 <HAL_GPIO_Init+0x304>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	43db      	mvns	r3, r3
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	4013      	ands	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d003      	beq.n	8003300 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003300:	4a24      	ldr	r2, [pc, #144]	; (8003394 <HAL_GPIO_Init+0x304>)
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003306:	4b23      	ldr	r3, [pc, #140]	; (8003394 <HAL_GPIO_Init+0x304>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	43db      	mvns	r3, r3
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	4013      	ands	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	4313      	orrs	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800332a:	4a1a      	ldr	r2, [pc, #104]	; (8003394 <HAL_GPIO_Init+0x304>)
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003330:	4b18      	ldr	r3, [pc, #96]	; (8003394 <HAL_GPIO_Init+0x304>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	43db      	mvns	r3, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4013      	ands	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	4313      	orrs	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003354:	4a0f      	ldr	r2, [pc, #60]	; (8003394 <HAL_GPIO_Init+0x304>)
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	3301      	adds	r3, #1
 800335e:	61fb      	str	r3, [r7, #28]
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	2b0f      	cmp	r3, #15
 8003364:	f67f aea2 	bls.w	80030ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003368:	bf00      	nop
 800336a:	bf00      	nop
 800336c:	3724      	adds	r7, #36	; 0x24
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	40023800 	.word	0x40023800
 800337c:	40013800 	.word	0x40013800
 8003380:	40020000 	.word	0x40020000
 8003384:	40020400 	.word	0x40020400
 8003388:	40020800 	.word	0x40020800
 800338c:	40020c00 	.word	0x40020c00
 8003390:	40021000 	.word	0x40021000
 8003394:	40013c00 	.word	0x40013c00

08003398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	460b      	mov	r3, r1
 80033a2:	807b      	strh	r3, [r7, #2]
 80033a4:	4613      	mov	r3, r2
 80033a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033a8:	787b      	ldrb	r3, [r7, #1]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033ae:	887a      	ldrh	r2, [r7, #2]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033b4:	e003      	b.n	80033be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033b6:	887b      	ldrh	r3, [r7, #2]
 80033b8:	041a      	lsls	r2, r3, #16
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	619a      	str	r2, [r3, #24]
}
 80033be:	bf00      	nop
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b085      	sub	sp, #20
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
 80033d2:	460b      	mov	r3, r1
 80033d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033dc:	887a      	ldrh	r2, [r7, #2]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	4013      	ands	r3, r2
 80033e2:	041a      	lsls	r2, r3, #16
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	43d9      	mvns	r1, r3
 80033e8:	887b      	ldrh	r3, [r7, #2]
 80033ea:	400b      	ands	r3, r1
 80033ec:	431a      	orrs	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	619a      	str	r2, [r3, #24]
}
 80033f2:	bf00      	nop
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
	...

08003400 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e264      	b.n	80038dc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d075      	beq.n	800350a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800341e:	4ba3      	ldr	r3, [pc, #652]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	2b04      	cmp	r3, #4
 8003428:	d00c      	beq.n	8003444 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800342a:	4ba0      	ldr	r3, [pc, #640]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003432:	2b08      	cmp	r3, #8
 8003434:	d112      	bne.n	800345c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003436:	4b9d      	ldr	r3, [pc, #628]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800343e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003442:	d10b      	bne.n	800345c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003444:	4b99      	ldr	r3, [pc, #612]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d05b      	beq.n	8003508 <HAL_RCC_OscConfig+0x108>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d157      	bne.n	8003508 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e23f      	b.n	80038dc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003464:	d106      	bne.n	8003474 <HAL_RCC_OscConfig+0x74>
 8003466:	4b91      	ldr	r3, [pc, #580]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a90      	ldr	r2, [pc, #576]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 800346c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003470:	6013      	str	r3, [r2, #0]
 8003472:	e01d      	b.n	80034b0 <HAL_RCC_OscConfig+0xb0>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800347c:	d10c      	bne.n	8003498 <HAL_RCC_OscConfig+0x98>
 800347e:	4b8b      	ldr	r3, [pc, #556]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a8a      	ldr	r2, [pc, #552]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 8003484:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003488:	6013      	str	r3, [r2, #0]
 800348a:	4b88      	ldr	r3, [pc, #544]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a87      	ldr	r2, [pc, #540]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 8003490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003494:	6013      	str	r3, [r2, #0]
 8003496:	e00b      	b.n	80034b0 <HAL_RCC_OscConfig+0xb0>
 8003498:	4b84      	ldr	r3, [pc, #528]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a83      	ldr	r2, [pc, #524]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 800349e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034a2:	6013      	str	r3, [r2, #0]
 80034a4:	4b81      	ldr	r3, [pc, #516]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a80      	ldr	r2, [pc, #512]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 80034aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d013      	beq.n	80034e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b8:	f7ff f824 	bl	8002504 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034c0:	f7ff f820 	bl	8002504 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b64      	cmp	r3, #100	; 0x64
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e204      	b.n	80038dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034d2:	4b76      	ldr	r3, [pc, #472]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0f0      	beq.n	80034c0 <HAL_RCC_OscConfig+0xc0>
 80034de:	e014      	b.n	800350a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e0:	f7ff f810 	bl	8002504 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034e8:	f7ff f80c 	bl	8002504 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b64      	cmp	r3, #100	; 0x64
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e1f0      	b.n	80038dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034fa:	4b6c      	ldr	r3, [pc, #432]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1f0      	bne.n	80034e8 <HAL_RCC_OscConfig+0xe8>
 8003506:	e000      	b.n	800350a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003508:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d063      	beq.n	80035de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003516:	4b65      	ldr	r3, [pc, #404]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 030c 	and.w	r3, r3, #12
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00b      	beq.n	800353a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003522:	4b62      	ldr	r3, [pc, #392]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800352a:	2b08      	cmp	r3, #8
 800352c:	d11c      	bne.n	8003568 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800352e:	4b5f      	ldr	r3, [pc, #380]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d116      	bne.n	8003568 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800353a:	4b5c      	ldr	r3, [pc, #368]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d005      	beq.n	8003552 <HAL_RCC_OscConfig+0x152>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d001      	beq.n	8003552 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e1c4      	b.n	80038dc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003552:	4b56      	ldr	r3, [pc, #344]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	4952      	ldr	r1, [pc, #328]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 8003562:	4313      	orrs	r3, r2
 8003564:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003566:	e03a      	b.n	80035de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d020      	beq.n	80035b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003570:	4b4f      	ldr	r3, [pc, #316]	; (80036b0 <HAL_RCC_OscConfig+0x2b0>)
 8003572:	2201      	movs	r2, #1
 8003574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003576:	f7fe ffc5 	bl	8002504 <HAL_GetTick>
 800357a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800357c:	e008      	b.n	8003590 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800357e:	f7fe ffc1 	bl	8002504 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e1a5      	b.n	80038dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003590:	4b46      	ldr	r3, [pc, #280]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d0f0      	beq.n	800357e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800359c:	4b43      	ldr	r3, [pc, #268]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	4940      	ldr	r1, [pc, #256]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	600b      	str	r3, [r1, #0]
 80035b0:	e015      	b.n	80035de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035b2:	4b3f      	ldr	r3, [pc, #252]	; (80036b0 <HAL_RCC_OscConfig+0x2b0>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b8:	f7fe ffa4 	bl	8002504 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035c0:	f7fe ffa0 	bl	8002504 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e184      	b.n	80038dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035d2:	4b36      	ldr	r3, [pc, #216]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f0      	bne.n	80035c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0308 	and.w	r3, r3, #8
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d030      	beq.n	800364c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d016      	beq.n	8003620 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035f2:	4b30      	ldr	r3, [pc, #192]	; (80036b4 <HAL_RCC_OscConfig+0x2b4>)
 80035f4:	2201      	movs	r2, #1
 80035f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f8:	f7fe ff84 	bl	8002504 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003600:	f7fe ff80 	bl	8002504 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e164      	b.n	80038dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003612:	4b26      	ldr	r3, [pc, #152]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 8003614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0f0      	beq.n	8003600 <HAL_RCC_OscConfig+0x200>
 800361e:	e015      	b.n	800364c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003620:	4b24      	ldr	r3, [pc, #144]	; (80036b4 <HAL_RCC_OscConfig+0x2b4>)
 8003622:	2200      	movs	r2, #0
 8003624:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003626:	f7fe ff6d 	bl	8002504 <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800362c:	e008      	b.n	8003640 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800362e:	f7fe ff69 	bl	8002504 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e14d      	b.n	80038dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003640:	4b1a      	ldr	r3, [pc, #104]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 8003642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1f0      	bne.n	800362e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 80a0 	beq.w	800379a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800365a:	2300      	movs	r3, #0
 800365c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800365e:	4b13      	ldr	r3, [pc, #76]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10f      	bne.n	800368a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800366a:	2300      	movs	r3, #0
 800366c:	60bb      	str	r3, [r7, #8]
 800366e:	4b0f      	ldr	r3, [pc, #60]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	4a0e      	ldr	r2, [pc, #56]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 8003674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003678:	6413      	str	r3, [r2, #64]	; 0x40
 800367a:	4b0c      	ldr	r3, [pc, #48]	; (80036ac <HAL_RCC_OscConfig+0x2ac>)
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003682:	60bb      	str	r3, [r7, #8]
 8003684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003686:	2301      	movs	r3, #1
 8003688:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800368a:	4b0b      	ldr	r3, [pc, #44]	; (80036b8 <HAL_RCC_OscConfig+0x2b8>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003692:	2b00      	cmp	r3, #0
 8003694:	d121      	bne.n	80036da <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003696:	4b08      	ldr	r3, [pc, #32]	; (80036b8 <HAL_RCC_OscConfig+0x2b8>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a07      	ldr	r2, [pc, #28]	; (80036b8 <HAL_RCC_OscConfig+0x2b8>)
 800369c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036a2:	f7fe ff2f 	bl	8002504 <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a8:	e011      	b.n	80036ce <HAL_RCC_OscConfig+0x2ce>
 80036aa:	bf00      	nop
 80036ac:	40023800 	.word	0x40023800
 80036b0:	42470000 	.word	0x42470000
 80036b4:	42470e80 	.word	0x42470e80
 80036b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036bc:	f7fe ff22 	bl	8002504 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e106      	b.n	80038dc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ce:	4b85      	ldr	r3, [pc, #532]	; (80038e4 <HAL_RCC_OscConfig+0x4e4>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d0f0      	beq.n	80036bc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d106      	bne.n	80036f0 <HAL_RCC_OscConfig+0x2f0>
 80036e2:	4b81      	ldr	r3, [pc, #516]	; (80038e8 <HAL_RCC_OscConfig+0x4e8>)
 80036e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e6:	4a80      	ldr	r2, [pc, #512]	; (80038e8 <HAL_RCC_OscConfig+0x4e8>)
 80036e8:	f043 0301 	orr.w	r3, r3, #1
 80036ec:	6713      	str	r3, [r2, #112]	; 0x70
 80036ee:	e01c      	b.n	800372a <HAL_RCC_OscConfig+0x32a>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	2b05      	cmp	r3, #5
 80036f6:	d10c      	bne.n	8003712 <HAL_RCC_OscConfig+0x312>
 80036f8:	4b7b      	ldr	r3, [pc, #492]	; (80038e8 <HAL_RCC_OscConfig+0x4e8>)
 80036fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fc:	4a7a      	ldr	r2, [pc, #488]	; (80038e8 <HAL_RCC_OscConfig+0x4e8>)
 80036fe:	f043 0304 	orr.w	r3, r3, #4
 8003702:	6713      	str	r3, [r2, #112]	; 0x70
 8003704:	4b78      	ldr	r3, [pc, #480]	; (80038e8 <HAL_RCC_OscConfig+0x4e8>)
 8003706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003708:	4a77      	ldr	r2, [pc, #476]	; (80038e8 <HAL_RCC_OscConfig+0x4e8>)
 800370a:	f043 0301 	orr.w	r3, r3, #1
 800370e:	6713      	str	r3, [r2, #112]	; 0x70
 8003710:	e00b      	b.n	800372a <HAL_RCC_OscConfig+0x32a>
 8003712:	4b75      	ldr	r3, [pc, #468]	; (80038e8 <HAL_RCC_OscConfig+0x4e8>)
 8003714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003716:	4a74      	ldr	r2, [pc, #464]	; (80038e8 <HAL_RCC_OscConfig+0x4e8>)
 8003718:	f023 0301 	bic.w	r3, r3, #1
 800371c:	6713      	str	r3, [r2, #112]	; 0x70
 800371e:	4b72      	ldr	r3, [pc, #456]	; (80038e8 <HAL_RCC_OscConfig+0x4e8>)
 8003720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003722:	4a71      	ldr	r2, [pc, #452]	; (80038e8 <HAL_RCC_OscConfig+0x4e8>)
 8003724:	f023 0304 	bic.w	r3, r3, #4
 8003728:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d015      	beq.n	800375e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003732:	f7fe fee7 	bl	8002504 <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003738:	e00a      	b.n	8003750 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800373a:	f7fe fee3 	bl	8002504 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	f241 3288 	movw	r2, #5000	; 0x1388
 8003748:	4293      	cmp	r3, r2
 800374a:	d901      	bls.n	8003750 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e0c5      	b.n	80038dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003750:	4b65      	ldr	r3, [pc, #404]	; (80038e8 <HAL_RCC_OscConfig+0x4e8>)
 8003752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0ee      	beq.n	800373a <HAL_RCC_OscConfig+0x33a>
 800375c:	e014      	b.n	8003788 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800375e:	f7fe fed1 	bl	8002504 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003764:	e00a      	b.n	800377c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003766:	f7fe fecd 	bl	8002504 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	f241 3288 	movw	r2, #5000	; 0x1388
 8003774:	4293      	cmp	r3, r2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e0af      	b.n	80038dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800377c:	4b5a      	ldr	r3, [pc, #360]	; (80038e8 <HAL_RCC_OscConfig+0x4e8>)
 800377e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1ee      	bne.n	8003766 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003788:	7dfb      	ldrb	r3, [r7, #23]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d105      	bne.n	800379a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800378e:	4b56      	ldr	r3, [pc, #344]	; (80038e8 <HAL_RCC_OscConfig+0x4e8>)
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	4a55      	ldr	r2, [pc, #340]	; (80038e8 <HAL_RCC_OscConfig+0x4e8>)
 8003794:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003798:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f000 809b 	beq.w	80038da <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037a4:	4b50      	ldr	r3, [pc, #320]	; (80038e8 <HAL_RCC_OscConfig+0x4e8>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 030c 	and.w	r3, r3, #12
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d05c      	beq.n	800386a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d141      	bne.n	800383c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037b8:	4b4c      	ldr	r3, [pc, #304]	; (80038ec <HAL_RCC_OscConfig+0x4ec>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037be:	f7fe fea1 	bl	8002504 <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037c4:	e008      	b.n	80037d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037c6:	f7fe fe9d 	bl	8002504 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e081      	b.n	80038dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037d8:	4b43      	ldr	r3, [pc, #268]	; (80038e8 <HAL_RCC_OscConfig+0x4e8>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1f0      	bne.n	80037c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	69da      	ldr	r2, [r3, #28]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	431a      	orrs	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f2:	019b      	lsls	r3, r3, #6
 80037f4:	431a      	orrs	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fa:	085b      	lsrs	r3, r3, #1
 80037fc:	3b01      	subs	r3, #1
 80037fe:	041b      	lsls	r3, r3, #16
 8003800:	431a      	orrs	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003806:	061b      	lsls	r3, r3, #24
 8003808:	4937      	ldr	r1, [pc, #220]	; (80038e8 <HAL_RCC_OscConfig+0x4e8>)
 800380a:	4313      	orrs	r3, r2
 800380c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800380e:	4b37      	ldr	r3, [pc, #220]	; (80038ec <HAL_RCC_OscConfig+0x4ec>)
 8003810:	2201      	movs	r2, #1
 8003812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003814:	f7fe fe76 	bl	8002504 <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800381c:	f7fe fe72 	bl	8002504 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e056      	b.n	80038dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800382e:	4b2e      	ldr	r3, [pc, #184]	; (80038e8 <HAL_RCC_OscConfig+0x4e8>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d0f0      	beq.n	800381c <HAL_RCC_OscConfig+0x41c>
 800383a:	e04e      	b.n	80038da <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800383c:	4b2b      	ldr	r3, [pc, #172]	; (80038ec <HAL_RCC_OscConfig+0x4ec>)
 800383e:	2200      	movs	r2, #0
 8003840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003842:	f7fe fe5f 	bl	8002504 <HAL_GetTick>
 8003846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003848:	e008      	b.n	800385c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800384a:	f7fe fe5b 	bl	8002504 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e03f      	b.n	80038dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800385c:	4b22      	ldr	r3, [pc, #136]	; (80038e8 <HAL_RCC_OscConfig+0x4e8>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1f0      	bne.n	800384a <HAL_RCC_OscConfig+0x44a>
 8003868:	e037      	b.n	80038da <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d101      	bne.n	8003876 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e032      	b.n	80038dc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003876:	4b1c      	ldr	r3, [pc, #112]	; (80038e8 <HAL_RCC_OscConfig+0x4e8>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d028      	beq.n	80038d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800388e:	429a      	cmp	r2, r3
 8003890:	d121      	bne.n	80038d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800389c:	429a      	cmp	r2, r3
 800389e:	d11a      	bne.n	80038d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038a6:	4013      	ands	r3, r2
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038ac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d111      	bne.n	80038d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038bc:	085b      	lsrs	r3, r3, #1
 80038be:	3b01      	subs	r3, #1
 80038c0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d107      	bne.n	80038d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d001      	beq.n	80038da <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e000      	b.n	80038dc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3718      	adds	r7, #24
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40007000 	.word	0x40007000
 80038e8:	40023800 	.word	0x40023800
 80038ec:	42470060 	.word	0x42470060

080038f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d101      	bne.n	8003904 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e0cc      	b.n	8003a9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003904:	4b68      	ldr	r3, [pc, #416]	; (8003aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	429a      	cmp	r2, r3
 8003910:	d90c      	bls.n	800392c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003912:	4b65      	ldr	r3, [pc, #404]	; (8003aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	b2d2      	uxtb	r2, r2
 8003918:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800391a:	4b63      	ldr	r3, [pc, #396]	; (8003aa8 <HAL_RCC_ClockConfig+0x1b8>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0307 	and.w	r3, r3, #7
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	429a      	cmp	r2, r3
 8003926:	d001      	beq.n	800392c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e0b8      	b.n	8003a9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d020      	beq.n	800397a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	2b00      	cmp	r3, #0
 8003942:	d005      	beq.n	8003950 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003944:	4b59      	ldr	r3, [pc, #356]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	4a58      	ldr	r2, [pc, #352]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 800394a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800394e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0308 	and.w	r3, r3, #8
 8003958:	2b00      	cmp	r3, #0
 800395a:	d005      	beq.n	8003968 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800395c:	4b53      	ldr	r3, [pc, #332]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	4a52      	ldr	r2, [pc, #328]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003962:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003966:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003968:	4b50      	ldr	r3, [pc, #320]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	494d      	ldr	r1, [pc, #308]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003976:	4313      	orrs	r3, r2
 8003978:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d044      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d107      	bne.n	800399e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800398e:	4b47      	ldr	r3, [pc, #284]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d119      	bne.n	80039ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e07f      	b.n	8003a9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d003      	beq.n	80039ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039aa:	2b03      	cmp	r3, #3
 80039ac:	d107      	bne.n	80039be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ae:	4b3f      	ldr	r3, [pc, #252]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d109      	bne.n	80039ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e06f      	b.n	8003a9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039be:	4b3b      	ldr	r3, [pc, #236]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e067      	b.n	8003a9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ce:	4b37      	ldr	r3, [pc, #220]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f023 0203 	bic.w	r2, r3, #3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	4934      	ldr	r1, [pc, #208]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039e0:	f7fe fd90 	bl	8002504 <HAL_GetTick>
 80039e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e6:	e00a      	b.n	80039fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039e8:	f7fe fd8c 	bl	8002504 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e04f      	b.n	8003a9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039fe:	4b2b      	ldr	r3, [pc, #172]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f003 020c 	and.w	r2, r3, #12
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d1eb      	bne.n	80039e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a10:	4b25      	ldr	r3, [pc, #148]	; (8003aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d20c      	bcs.n	8003a38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a1e:	4b22      	ldr	r3, [pc, #136]	; (8003aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	b2d2      	uxtb	r2, r2
 8003a24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a26:	4b20      	ldr	r3, [pc, #128]	; (8003aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0307 	and.w	r3, r3, #7
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d001      	beq.n	8003a38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e032      	b.n	8003a9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d008      	beq.n	8003a56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a44:	4b19      	ldr	r3, [pc, #100]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	4916      	ldr	r1, [pc, #88]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0308 	and.w	r3, r3, #8
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d009      	beq.n	8003a76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a62:	4b12      	ldr	r3, [pc, #72]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	490e      	ldr	r1, [pc, #56]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a76:	f000 f821 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	4b0b      	ldr	r3, [pc, #44]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	091b      	lsrs	r3, r3, #4
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	490a      	ldr	r1, [pc, #40]	; (8003ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a88:	5ccb      	ldrb	r3, [r1, r3]
 8003a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a8e:	4a09      	ldr	r2, [pc, #36]	; (8003ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a92:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fe fcf0 	bl	800247c <HAL_InitTick>

  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	40023c00 	.word	0x40023c00
 8003aac:	40023800 	.word	0x40023800
 8003ab0:	0800bc6c 	.word	0x0800bc6c
 8003ab4:	20000000 	.word	0x20000000
 8003ab8:	20000004 	.word	0x20000004

08003abc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003abc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003ac0:	b084      	sub	sp, #16
 8003ac2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	607b      	str	r3, [r7, #4]
 8003ac8:	2300      	movs	r3, #0
 8003aca:	60fb      	str	r3, [r7, #12]
 8003acc:	2300      	movs	r3, #0
 8003ace:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ad4:	4b67      	ldr	r3, [pc, #412]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 030c 	and.w	r3, r3, #12
 8003adc:	2b08      	cmp	r3, #8
 8003ade:	d00d      	beq.n	8003afc <HAL_RCC_GetSysClockFreq+0x40>
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	f200 80bd 	bhi.w	8003c60 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d002      	beq.n	8003af0 <HAL_RCC_GetSysClockFreq+0x34>
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	d003      	beq.n	8003af6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003aee:	e0b7      	b.n	8003c60 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003af0:	4b61      	ldr	r3, [pc, #388]	; (8003c78 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003af2:	60bb      	str	r3, [r7, #8]
       break;
 8003af4:	e0b7      	b.n	8003c66 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003af6:	4b61      	ldr	r3, [pc, #388]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003af8:	60bb      	str	r3, [r7, #8]
      break;
 8003afa:	e0b4      	b.n	8003c66 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003afc:	4b5d      	ldr	r3, [pc, #372]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b04:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b06:	4b5b      	ldr	r3, [pc, #364]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d04d      	beq.n	8003bae <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b12:	4b58      	ldr	r3, [pc, #352]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	099b      	lsrs	r3, r3, #6
 8003b18:	461a      	mov	r2, r3
 8003b1a:	f04f 0300 	mov.w	r3, #0
 8003b1e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b22:	f04f 0100 	mov.w	r1, #0
 8003b26:	ea02 0800 	and.w	r8, r2, r0
 8003b2a:	ea03 0901 	and.w	r9, r3, r1
 8003b2e:	4640      	mov	r0, r8
 8003b30:	4649      	mov	r1, r9
 8003b32:	f04f 0200 	mov.w	r2, #0
 8003b36:	f04f 0300 	mov.w	r3, #0
 8003b3a:	014b      	lsls	r3, r1, #5
 8003b3c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b40:	0142      	lsls	r2, r0, #5
 8003b42:	4610      	mov	r0, r2
 8003b44:	4619      	mov	r1, r3
 8003b46:	ebb0 0008 	subs.w	r0, r0, r8
 8003b4a:	eb61 0109 	sbc.w	r1, r1, r9
 8003b4e:	f04f 0200 	mov.w	r2, #0
 8003b52:	f04f 0300 	mov.w	r3, #0
 8003b56:	018b      	lsls	r3, r1, #6
 8003b58:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b5c:	0182      	lsls	r2, r0, #6
 8003b5e:	1a12      	subs	r2, r2, r0
 8003b60:	eb63 0301 	sbc.w	r3, r3, r1
 8003b64:	f04f 0000 	mov.w	r0, #0
 8003b68:	f04f 0100 	mov.w	r1, #0
 8003b6c:	00d9      	lsls	r1, r3, #3
 8003b6e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b72:	00d0      	lsls	r0, r2, #3
 8003b74:	4602      	mov	r2, r0
 8003b76:	460b      	mov	r3, r1
 8003b78:	eb12 0208 	adds.w	r2, r2, r8
 8003b7c:	eb43 0309 	adc.w	r3, r3, r9
 8003b80:	f04f 0000 	mov.w	r0, #0
 8003b84:	f04f 0100 	mov.w	r1, #0
 8003b88:	0259      	lsls	r1, r3, #9
 8003b8a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003b8e:	0250      	lsls	r0, r2, #9
 8003b90:	4602      	mov	r2, r0
 8003b92:	460b      	mov	r3, r1
 8003b94:	4610      	mov	r0, r2
 8003b96:	4619      	mov	r1, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	f04f 0300 	mov.w	r3, #0
 8003ba0:	f7fd f86a 	bl	8000c78 <__aeabi_uldivmod>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	4613      	mov	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	e04a      	b.n	8003c44 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bae:	4b31      	ldr	r3, [pc, #196]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	099b      	lsrs	r3, r3, #6
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	f04f 0300 	mov.w	r3, #0
 8003bba:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003bbe:	f04f 0100 	mov.w	r1, #0
 8003bc2:	ea02 0400 	and.w	r4, r2, r0
 8003bc6:	ea03 0501 	and.w	r5, r3, r1
 8003bca:	4620      	mov	r0, r4
 8003bcc:	4629      	mov	r1, r5
 8003bce:	f04f 0200 	mov.w	r2, #0
 8003bd2:	f04f 0300 	mov.w	r3, #0
 8003bd6:	014b      	lsls	r3, r1, #5
 8003bd8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003bdc:	0142      	lsls	r2, r0, #5
 8003bde:	4610      	mov	r0, r2
 8003be0:	4619      	mov	r1, r3
 8003be2:	1b00      	subs	r0, r0, r4
 8003be4:	eb61 0105 	sbc.w	r1, r1, r5
 8003be8:	f04f 0200 	mov.w	r2, #0
 8003bec:	f04f 0300 	mov.w	r3, #0
 8003bf0:	018b      	lsls	r3, r1, #6
 8003bf2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003bf6:	0182      	lsls	r2, r0, #6
 8003bf8:	1a12      	subs	r2, r2, r0
 8003bfa:	eb63 0301 	sbc.w	r3, r3, r1
 8003bfe:	f04f 0000 	mov.w	r0, #0
 8003c02:	f04f 0100 	mov.w	r1, #0
 8003c06:	00d9      	lsls	r1, r3, #3
 8003c08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c0c:	00d0      	lsls	r0, r2, #3
 8003c0e:	4602      	mov	r2, r0
 8003c10:	460b      	mov	r3, r1
 8003c12:	1912      	adds	r2, r2, r4
 8003c14:	eb45 0303 	adc.w	r3, r5, r3
 8003c18:	f04f 0000 	mov.w	r0, #0
 8003c1c:	f04f 0100 	mov.w	r1, #0
 8003c20:	0299      	lsls	r1, r3, #10
 8003c22:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003c26:	0290      	lsls	r0, r2, #10
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4610      	mov	r0, r2
 8003c2e:	4619      	mov	r1, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	461a      	mov	r2, r3
 8003c34:	f04f 0300 	mov.w	r3, #0
 8003c38:	f7fd f81e 	bl	8000c78 <__aeabi_uldivmod>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4613      	mov	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c44:	4b0b      	ldr	r3, [pc, #44]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	0c1b      	lsrs	r3, r3, #16
 8003c4a:	f003 0303 	and.w	r3, r3, #3
 8003c4e:	3301      	adds	r3, #1
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c5c:	60bb      	str	r3, [r7, #8]
      break;
 8003c5e:	e002      	b.n	8003c66 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c60:	4b05      	ldr	r3, [pc, #20]	; (8003c78 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003c62:	60bb      	str	r3, [r7, #8]
      break;
 8003c64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c66:	68bb      	ldr	r3, [r7, #8]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003c72:	bf00      	nop
 8003c74:	40023800 	.word	0x40023800
 8003c78:	00f42400 	.word	0x00f42400
 8003c7c:	007a1200 	.word	0x007a1200

08003c80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c84:	4b03      	ldr	r3, [pc, #12]	; (8003c94 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c86:	681b      	ldr	r3, [r3, #0]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	20000000 	.word	0x20000000

08003c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c9c:	f7ff fff0 	bl	8003c80 <HAL_RCC_GetHCLKFreq>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	4b05      	ldr	r3, [pc, #20]	; (8003cb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	0a9b      	lsrs	r3, r3, #10
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	4903      	ldr	r1, [pc, #12]	; (8003cbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cae:	5ccb      	ldrb	r3, [r1, r3]
 8003cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	40023800 	.word	0x40023800
 8003cbc:	0800bc7c 	.word	0x0800bc7c

08003cc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003cc4:	f7ff ffdc 	bl	8003c80 <HAL_RCC_GetHCLKFreq>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	4b05      	ldr	r3, [pc, #20]	; (8003ce0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	0b5b      	lsrs	r3, r3, #13
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	4903      	ldr	r1, [pc, #12]	; (8003ce4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cd6:	5ccb      	ldrb	r3, [r1, r3]
 8003cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40023800 	.word	0x40023800
 8003ce4:	0800bc7c 	.word	0x0800bc7c

08003ce8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e03f      	b.n	8003d7a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d106      	bne.n	8003d14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7fe fa12 	bl	8002138 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2224      	movs	r2, #36	; 0x24
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 fe13 	bl	8004958 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	691a      	ldr	r2, [r3, #16]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	695a      	ldr	r2, [r3, #20]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68da      	ldr	r2, [r3, #12]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2220      	movs	r2, #32
 8003d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b08a      	sub	sp, #40	; 0x28
 8003d86:	af02      	add	r7, sp, #8
 8003d88:	60f8      	str	r0, [r7, #12]
 8003d8a:	60b9      	str	r1, [r7, #8]
 8003d8c:	603b      	str	r3, [r7, #0]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d92:	2300      	movs	r3, #0
 8003d94:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b20      	cmp	r3, #32
 8003da0:	d17c      	bne.n	8003e9c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d002      	beq.n	8003dae <HAL_UART_Transmit+0x2c>
 8003da8:	88fb      	ldrh	r3, [r7, #6]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e075      	b.n	8003e9e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d101      	bne.n	8003dc0 <HAL_UART_Transmit+0x3e>
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	e06e      	b.n	8003e9e <HAL_UART_Transmit+0x11c>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2221      	movs	r2, #33	; 0x21
 8003dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dd6:	f7fe fb95 	bl	8002504 <HAL_GetTick>
 8003dda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	88fa      	ldrh	r2, [r7, #6]
 8003de0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	88fa      	ldrh	r2, [r7, #6]
 8003de6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003df0:	d108      	bne.n	8003e04 <HAL_UART_Transmit+0x82>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d104      	bne.n	8003e04 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	61bb      	str	r3, [r7, #24]
 8003e02:	e003      	b.n	8003e0c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003e14:	e02a      	b.n	8003e6c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	2180      	movs	r1, #128	; 0x80
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f000 fb91 	bl	8004548 <UART_WaitOnFlagUntilTimeout>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e036      	b.n	8003e9e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10b      	bne.n	8003e4e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	3302      	adds	r3, #2
 8003e4a:	61bb      	str	r3, [r7, #24]
 8003e4c:	e007      	b.n	8003e5e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	781a      	ldrb	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	3b01      	subs	r3, #1
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1cf      	bne.n	8003e16 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	2140      	movs	r1, #64	; 0x40
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f000 fb61 	bl	8004548 <UART_WaitOnFlagUntilTimeout>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e006      	b.n	8003e9e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2220      	movs	r2, #32
 8003e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	e000      	b.n	8003e9e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003e9c:	2302      	movs	r3, #2
  }
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3720      	adds	r7, #32
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b08a      	sub	sp, #40	; 0x28
 8003eaa:	af02      	add	r7, sp, #8
 8003eac:	60f8      	str	r0, [r7, #12]
 8003eae:	60b9      	str	r1, [r7, #8]
 8003eb0:	603b      	str	r3, [r7, #0]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b20      	cmp	r3, #32
 8003ec4:	f040 808c 	bne.w	8003fe0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d002      	beq.n	8003ed4 <HAL_UART_Receive+0x2e>
 8003ece:	88fb      	ldrh	r3, [r7, #6]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e084      	b.n	8003fe2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d101      	bne.n	8003ee6 <HAL_UART_Receive+0x40>
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	e07d      	b.n	8003fe2 <HAL_UART_Receive+0x13c>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2222      	movs	r2, #34	; 0x22
 8003ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f02:	f7fe faff 	bl	8002504 <HAL_GetTick>
 8003f06:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	88fa      	ldrh	r2, [r7, #6]
 8003f0c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	88fa      	ldrh	r2, [r7, #6]
 8003f12:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f1c:	d108      	bne.n	8003f30 <HAL_UART_Receive+0x8a>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d104      	bne.n	8003f30 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003f26:	2300      	movs	r3, #0
 8003f28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	61bb      	str	r3, [r7, #24]
 8003f2e:	e003      	b.n	8003f38 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f34:	2300      	movs	r3, #0
 8003f36:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003f40:	e043      	b.n	8003fca <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	2120      	movs	r1, #32
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f000 fafb 	bl	8004548 <UART_WaitOnFlagUntilTimeout>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e042      	b.n	8003fe2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d10c      	bne.n	8003f7c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	3302      	adds	r3, #2
 8003f78:	61bb      	str	r3, [r7, #24]
 8003f7a:	e01f      	b.n	8003fbc <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f84:	d007      	beq.n	8003f96 <HAL_UART_Receive+0xf0>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10a      	bne.n	8003fa4 <HAL_UART_Receive+0xfe>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d106      	bne.n	8003fa4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	b2da      	uxtb	r2, r3
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	701a      	strb	r2, [r3, #0]
 8003fa2:	e008      	b.n	8003fb6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1b6      	bne.n	8003f42 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	e000      	b.n	8003fe2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003fe0:	2302      	movs	r3, #2
  }
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3720      	adds	r7, #32
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
	...

08003fec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b0ba      	sub	sp, #232	; 0xe8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004012:	2300      	movs	r3, #0
 8004014:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004018:	2300      	movs	r3, #0
 800401a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800401e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004022:	f003 030f 	and.w	r3, r3, #15
 8004026:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800402a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10f      	bne.n	8004052 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004036:	f003 0320 	and.w	r3, r3, #32
 800403a:	2b00      	cmp	r3, #0
 800403c:	d009      	beq.n	8004052 <HAL_UART_IRQHandler+0x66>
 800403e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004042:	f003 0320 	and.w	r3, r3, #32
 8004046:	2b00      	cmp	r3, #0
 8004048:	d003      	beq.n	8004052 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 fbc9 	bl	80047e2 <UART_Receive_IT>
      return;
 8004050:	e256      	b.n	8004500 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004052:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 80de 	beq.w	8004218 <HAL_UART_IRQHandler+0x22c>
 800405c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	2b00      	cmp	r3, #0
 8004066:	d106      	bne.n	8004076 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800406c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 80d1 	beq.w	8004218 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00b      	beq.n	800409a <HAL_UART_IRQHandler+0xae>
 8004082:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408a:	2b00      	cmp	r3, #0
 800408c:	d005      	beq.n	800409a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	f043 0201 	orr.w	r2, r3, #1
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800409a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800409e:	f003 0304 	and.w	r3, r3, #4
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00b      	beq.n	80040be <HAL_UART_IRQHandler+0xd2>
 80040a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d005      	beq.n	80040be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	f043 0202 	orr.w	r2, r3, #2
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00b      	beq.n	80040e2 <HAL_UART_IRQHandler+0xf6>
 80040ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d005      	beq.n	80040e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	f043 0204 	orr.w	r2, r3, #4
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80040e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040e6:	f003 0308 	and.w	r3, r3, #8
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d011      	beq.n	8004112 <HAL_UART_IRQHandler+0x126>
 80040ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040f2:	f003 0320 	and.w	r3, r3, #32
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d105      	bne.n	8004106 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80040fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b00      	cmp	r3, #0
 8004104:	d005      	beq.n	8004112 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	f043 0208 	orr.w	r2, r3, #8
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 81ed 	beq.w	80044f6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800411c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004120:	f003 0320 	and.w	r3, r3, #32
 8004124:	2b00      	cmp	r3, #0
 8004126:	d008      	beq.n	800413a <HAL_UART_IRQHandler+0x14e>
 8004128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800412c:	f003 0320 	and.w	r3, r3, #32
 8004130:	2b00      	cmp	r3, #0
 8004132:	d002      	beq.n	800413a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 fb54 	bl	80047e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004144:	2b40      	cmp	r3, #64	; 0x40
 8004146:	bf0c      	ite	eq
 8004148:	2301      	moveq	r3, #1
 800414a:	2300      	movne	r3, #0
 800414c:	b2db      	uxtb	r3, r3
 800414e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004156:	f003 0308 	and.w	r3, r3, #8
 800415a:	2b00      	cmp	r3, #0
 800415c:	d103      	bne.n	8004166 <HAL_UART_IRQHandler+0x17a>
 800415e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004162:	2b00      	cmp	r3, #0
 8004164:	d04f      	beq.n	8004206 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 fa5c 	bl	8004624 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004176:	2b40      	cmp	r3, #64	; 0x40
 8004178:	d141      	bne.n	80041fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	3314      	adds	r3, #20
 8004180:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004184:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004188:	e853 3f00 	ldrex	r3, [r3]
 800418c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004190:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004194:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004198:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	3314      	adds	r3, #20
 80041a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80041a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80041aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80041b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80041b6:	e841 2300 	strex	r3, r2, [r1]
 80041ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80041be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1d9      	bne.n	800417a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d013      	beq.n	80041f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d2:	4a7d      	ldr	r2, [pc, #500]	; (80043c8 <HAL_UART_IRQHandler+0x3dc>)
 80041d4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041da:	4618      	mov	r0, r3
 80041dc:	f7fe ff35 	bl	800304a <HAL_DMA_Abort_IT>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d016      	beq.n	8004214 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041f0:	4610      	mov	r0, r2
 80041f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041f4:	e00e      	b.n	8004214 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f990 	bl	800451c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041fc:	e00a      	b.n	8004214 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 f98c 	bl	800451c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004204:	e006      	b.n	8004214 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f988 	bl	800451c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004212:	e170      	b.n	80044f6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004214:	bf00      	nop
    return;
 8004216:	e16e      	b.n	80044f6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421c:	2b01      	cmp	r3, #1
 800421e:	f040 814a 	bne.w	80044b6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004226:	f003 0310 	and.w	r3, r3, #16
 800422a:	2b00      	cmp	r3, #0
 800422c:	f000 8143 	beq.w	80044b6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004234:	f003 0310 	and.w	r3, r3, #16
 8004238:	2b00      	cmp	r3, #0
 800423a:	f000 813c 	beq.w	80044b6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800423e:	2300      	movs	r3, #0
 8004240:	60bb      	str	r3, [r7, #8]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	60bb      	str	r3, [r7, #8]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	60bb      	str	r3, [r7, #8]
 8004252:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425e:	2b40      	cmp	r3, #64	; 0x40
 8004260:	f040 80b4 	bne.w	80043cc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004270:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 8140 	beq.w	80044fa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800427e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004282:	429a      	cmp	r2, r3
 8004284:	f080 8139 	bcs.w	80044fa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800428e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800429a:	f000 8088 	beq.w	80043ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	330c      	adds	r3, #12
 80042a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042ac:	e853 3f00 	ldrex	r3, [r3]
 80042b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80042b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	330c      	adds	r3, #12
 80042c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80042ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80042ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80042d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80042da:	e841 2300 	strex	r3, r2, [r1]
 80042de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80042e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1d9      	bne.n	800429e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	3314      	adds	r3, #20
 80042f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042f4:	e853 3f00 	ldrex	r3, [r3]
 80042f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80042fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042fc:	f023 0301 	bic.w	r3, r3, #1
 8004300:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	3314      	adds	r3, #20
 800430a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800430e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004312:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004314:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004316:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800431a:	e841 2300 	strex	r3, r2, [r1]
 800431e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004320:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1e1      	bne.n	80042ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	3314      	adds	r3, #20
 800432c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004330:	e853 3f00 	ldrex	r3, [r3]
 8004334:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004336:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004338:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800433c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	3314      	adds	r3, #20
 8004346:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800434a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800434c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004350:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004352:	e841 2300 	strex	r3, r2, [r1]
 8004356:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004358:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1e3      	bne.n	8004326 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2220      	movs	r2, #32
 8004362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	330c      	adds	r3, #12
 8004372:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004376:	e853 3f00 	ldrex	r3, [r3]
 800437a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800437c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800437e:	f023 0310 	bic.w	r3, r3, #16
 8004382:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	330c      	adds	r3, #12
 800438c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004390:	65ba      	str	r2, [r7, #88]	; 0x58
 8004392:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004394:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004396:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004398:	e841 2300 	strex	r3, r2, [r1]
 800439c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800439e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1e3      	bne.n	800436c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7fe fdde 	bl	8002f6a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	4619      	mov	r1, r3
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f8b6 	bl	8004530 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043c4:	e099      	b.n	80044fa <HAL_UART_IRQHandler+0x50e>
 80043c6:	bf00      	nop
 80043c8:	080046eb 	.word	0x080046eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f000 808b 	beq.w	80044fe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80043e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 8086 	beq.w	80044fe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	330c      	adds	r3, #12
 80043f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043fc:	e853 3f00 	ldrex	r3, [r3]
 8004400:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004404:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004408:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	330c      	adds	r3, #12
 8004412:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004416:	647a      	str	r2, [r7, #68]	; 0x44
 8004418:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800441c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800441e:	e841 2300 	strex	r3, r2, [r1]
 8004422:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1e3      	bne.n	80043f2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	3314      	adds	r3, #20
 8004430:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004434:	e853 3f00 	ldrex	r3, [r3]
 8004438:	623b      	str	r3, [r7, #32]
   return(result);
 800443a:	6a3b      	ldr	r3, [r7, #32]
 800443c:	f023 0301 	bic.w	r3, r3, #1
 8004440:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	3314      	adds	r3, #20
 800444a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800444e:	633a      	str	r2, [r7, #48]	; 0x30
 8004450:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004452:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004456:	e841 2300 	strex	r3, r2, [r1]
 800445a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800445c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1e3      	bne.n	800442a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2220      	movs	r2, #32
 8004466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	330c      	adds	r3, #12
 8004476:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	e853 3f00 	ldrex	r3, [r3]
 800447e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f023 0310 	bic.w	r3, r3, #16
 8004486:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	330c      	adds	r3, #12
 8004490:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004494:	61fa      	str	r2, [r7, #28]
 8004496:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004498:	69b9      	ldr	r1, [r7, #24]
 800449a:	69fa      	ldr	r2, [r7, #28]
 800449c:	e841 2300 	strex	r3, r2, [r1]
 80044a0:	617b      	str	r3, [r7, #20]
   return(result);
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1e3      	bne.n	8004470 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80044ac:	4619      	mov	r1, r3
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f83e 	bl	8004530 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044b4:	e023      	b.n	80044fe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d009      	beq.n	80044d6 <HAL_UART_IRQHandler+0x4ea>
 80044c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d003      	beq.n	80044d6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 f91f 	bl	8004712 <UART_Transmit_IT>
    return;
 80044d4:	e014      	b.n	8004500 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00e      	beq.n	8004500 <HAL_UART_IRQHandler+0x514>
 80044e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d008      	beq.n	8004500 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f95f 	bl	80047b2 <UART_EndTransmit_IT>
    return;
 80044f4:	e004      	b.n	8004500 <HAL_UART_IRQHandler+0x514>
    return;
 80044f6:	bf00      	nop
 80044f8:	e002      	b.n	8004500 <HAL_UART_IRQHandler+0x514>
      return;
 80044fa:	bf00      	nop
 80044fc:	e000      	b.n	8004500 <HAL_UART_IRQHandler+0x514>
      return;
 80044fe:	bf00      	nop
  }
}
 8004500:	37e8      	adds	r7, #232	; 0xe8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop

08004508 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	460b      	mov	r3, r1
 800453a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b090      	sub	sp, #64	; 0x40
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	603b      	str	r3, [r7, #0]
 8004554:	4613      	mov	r3, r2
 8004556:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004558:	e050      	b.n	80045fc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800455a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800455c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004560:	d04c      	beq.n	80045fc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004562:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004564:	2b00      	cmp	r3, #0
 8004566:	d007      	beq.n	8004578 <UART_WaitOnFlagUntilTimeout+0x30>
 8004568:	f7fd ffcc 	bl	8002504 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004574:	429a      	cmp	r2, r3
 8004576:	d241      	bcs.n	80045fc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	330c      	adds	r3, #12
 800457e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004582:	e853 3f00 	ldrex	r3, [r3]
 8004586:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800458e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	330c      	adds	r3, #12
 8004596:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004598:	637a      	str	r2, [r7, #52]	; 0x34
 800459a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800459e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045a0:	e841 2300 	strex	r3, r2, [r1]
 80045a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80045a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1e5      	bne.n	8004578 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3314      	adds	r3, #20
 80045b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	e853 3f00 	ldrex	r3, [r3]
 80045ba:	613b      	str	r3, [r7, #16]
   return(result);
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	f023 0301 	bic.w	r3, r3, #1
 80045c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	3314      	adds	r3, #20
 80045ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045cc:	623a      	str	r2, [r7, #32]
 80045ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d0:	69f9      	ldr	r1, [r7, #28]
 80045d2:	6a3a      	ldr	r2, [r7, #32]
 80045d4:	e841 2300 	strex	r3, r2, [r1]
 80045d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1e5      	bne.n	80045ac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2220      	movs	r2, #32
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2220      	movs	r2, #32
 80045ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e00f      	b.n	800461c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	4013      	ands	r3, r2
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	429a      	cmp	r2, r3
 800460a:	bf0c      	ite	eq
 800460c:	2301      	moveq	r3, #1
 800460e:	2300      	movne	r3, #0
 8004610:	b2db      	uxtb	r3, r3
 8004612:	461a      	mov	r2, r3
 8004614:	79fb      	ldrb	r3, [r7, #7]
 8004616:	429a      	cmp	r2, r3
 8004618:	d09f      	beq.n	800455a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3740      	adds	r7, #64	; 0x40
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004624:	b480      	push	{r7}
 8004626:	b095      	sub	sp, #84	; 0x54
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	330c      	adds	r3, #12
 8004632:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004636:	e853 3f00 	ldrex	r3, [r3]
 800463a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800463c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004642:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	330c      	adds	r3, #12
 800464a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800464c:	643a      	str	r2, [r7, #64]	; 0x40
 800464e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004650:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004652:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004654:	e841 2300 	strex	r3, r2, [r1]
 8004658:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800465a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1e5      	bne.n	800462c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	3314      	adds	r3, #20
 8004666:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004668:	6a3b      	ldr	r3, [r7, #32]
 800466a:	e853 3f00 	ldrex	r3, [r3]
 800466e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	f023 0301 	bic.w	r3, r3, #1
 8004676:	64bb      	str	r3, [r7, #72]	; 0x48
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	3314      	adds	r3, #20
 800467e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004680:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004682:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004684:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004686:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004688:	e841 2300 	strex	r3, r2, [r1]
 800468c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1e5      	bne.n	8004660 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004698:	2b01      	cmp	r3, #1
 800469a:	d119      	bne.n	80046d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	330c      	adds	r3, #12
 80046a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	e853 3f00 	ldrex	r3, [r3]
 80046aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	f023 0310 	bic.w	r3, r3, #16
 80046b2:	647b      	str	r3, [r7, #68]	; 0x44
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	330c      	adds	r3, #12
 80046ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046bc:	61ba      	str	r2, [r7, #24]
 80046be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c0:	6979      	ldr	r1, [r7, #20]
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	e841 2300 	strex	r3, r2, [r1]
 80046c8:	613b      	str	r3, [r7, #16]
   return(result);
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1e5      	bne.n	800469c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2220      	movs	r2, #32
 80046d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80046de:	bf00      	nop
 80046e0:	3754      	adds	r7, #84	; 0x54
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr

080046ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b084      	sub	sp, #16
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f7ff ff09 	bl	800451c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800470a:	bf00      	nop
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004712:	b480      	push	{r7}
 8004714:	b085      	sub	sp, #20
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b21      	cmp	r3, #33	; 0x21
 8004724:	d13e      	bne.n	80047a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800472e:	d114      	bne.n	800475a <UART_Transmit_IT+0x48>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d110      	bne.n	800475a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	881b      	ldrh	r3, [r3, #0]
 8004742:	461a      	mov	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800474c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	1c9a      	adds	r2, r3, #2
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	621a      	str	r2, [r3, #32]
 8004758:	e008      	b.n	800476c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	1c59      	adds	r1, r3, #1
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6211      	str	r1, [r2, #32]
 8004764:	781a      	ldrb	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004770:	b29b      	uxth	r3, r3
 8004772:	3b01      	subs	r3, #1
 8004774:	b29b      	uxth	r3, r3
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	4619      	mov	r1, r3
 800477a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10f      	bne.n	80047a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68da      	ldr	r2, [r3, #12]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800478e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68da      	ldr	r2, [r3, #12]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800479e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80047a0:	2300      	movs	r3, #0
 80047a2:	e000      	b.n	80047a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80047a4:	2302      	movs	r3, #2
  }
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3714      	adds	r7, #20
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b082      	sub	sp, #8
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68da      	ldr	r2, [r3, #12]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2220      	movs	r2, #32
 80047ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f7fc ff2a 	bl	800162c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3708      	adds	r7, #8
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b08c      	sub	sp, #48	; 0x30
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b22      	cmp	r3, #34	; 0x22
 80047f4:	f040 80ab 	bne.w	800494e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004800:	d117      	bne.n	8004832 <UART_Receive_IT+0x50>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d113      	bne.n	8004832 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800480a:	2300      	movs	r3, #0
 800480c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004812:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	b29b      	uxth	r3, r3
 800481c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004820:	b29a      	uxth	r2, r3
 8004822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004824:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482a:	1c9a      	adds	r2, r3, #2
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	629a      	str	r2, [r3, #40]	; 0x28
 8004830:	e026      	b.n	8004880 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004836:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004838:	2300      	movs	r3, #0
 800483a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004844:	d007      	beq.n	8004856 <UART_Receive_IT+0x74>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10a      	bne.n	8004864 <UART_Receive_IT+0x82>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d106      	bne.n	8004864 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	b2da      	uxtb	r2, r3
 800485e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004860:	701a      	strb	r2, [r3, #0]
 8004862:	e008      	b.n	8004876 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	b2db      	uxtb	r3, r3
 800486c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004870:	b2da      	uxtb	r2, r3
 8004872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004874:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487a:	1c5a      	adds	r2, r3, #1
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004884:	b29b      	uxth	r3, r3
 8004886:	3b01      	subs	r3, #1
 8004888:	b29b      	uxth	r3, r3
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	4619      	mov	r1, r3
 800488e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004890:	2b00      	cmp	r3, #0
 8004892:	d15a      	bne.n	800494a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68da      	ldr	r2, [r3, #12]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f022 0220 	bic.w	r2, r2, #32
 80048a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68da      	ldr	r2, [r3, #12]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	695a      	ldr	r2, [r3, #20]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 0201 	bic.w	r2, r2, #1
 80048c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2220      	movs	r2, #32
 80048c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d135      	bne.n	8004940 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	330c      	adds	r3, #12
 80048e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	e853 3f00 	ldrex	r3, [r3]
 80048e8:	613b      	str	r3, [r7, #16]
   return(result);
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	f023 0310 	bic.w	r3, r3, #16
 80048f0:	627b      	str	r3, [r7, #36]	; 0x24
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	330c      	adds	r3, #12
 80048f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048fa:	623a      	str	r2, [r7, #32]
 80048fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fe:	69f9      	ldr	r1, [r7, #28]
 8004900:	6a3a      	ldr	r2, [r7, #32]
 8004902:	e841 2300 	strex	r3, r2, [r1]
 8004906:	61bb      	str	r3, [r7, #24]
   return(result);
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1e5      	bne.n	80048da <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0310 	and.w	r3, r3, #16
 8004918:	2b10      	cmp	r3, #16
 800491a:	d10a      	bne.n	8004932 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800491c:	2300      	movs	r3, #0
 800491e:	60fb      	str	r3, [r7, #12]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	60fb      	str	r3, [r7, #12]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	60fb      	str	r3, [r7, #12]
 8004930:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004936:	4619      	mov	r1, r3
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f7ff fdf9 	bl	8004530 <HAL_UARTEx_RxEventCallback>
 800493e:	e002      	b.n	8004946 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f7ff fde1 	bl	8004508 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004946:	2300      	movs	r3, #0
 8004948:	e002      	b.n	8004950 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800494a:	2300      	movs	r3, #0
 800494c:	e000      	b.n	8004950 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800494e:	2302      	movs	r3, #2
  }
}
 8004950:	4618      	mov	r0, r3
 8004952:	3730      	adds	r7, #48	; 0x30
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800495c:	b09f      	sub	sp, #124	; 0x7c
 800495e:	af00      	add	r7, sp, #0
 8004960:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800496c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800496e:	68d9      	ldr	r1, [r3, #12]
 8004970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	ea40 0301 	orr.w	r3, r0, r1
 8004978:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800497a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800497c:	689a      	ldr	r2, [r3, #8]
 800497e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	431a      	orrs	r2, r3
 8004984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004986:	695b      	ldr	r3, [r3, #20]
 8004988:	431a      	orrs	r2, r3
 800498a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800498c:	69db      	ldr	r3, [r3, #28]
 800498e:	4313      	orrs	r3, r2
 8004990:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800499c:	f021 010c 	bic.w	r1, r1, #12
 80049a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049a6:	430b      	orrs	r3, r1
 80049a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80049b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049b6:	6999      	ldr	r1, [r3, #24]
 80049b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	ea40 0301 	orr.w	r3, r0, r1
 80049c0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	4bc5      	ldr	r3, [pc, #788]	; (8004cdc <UART_SetConfig+0x384>)
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d004      	beq.n	80049d6 <UART_SetConfig+0x7e>
 80049cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	4bc3      	ldr	r3, [pc, #780]	; (8004ce0 <UART_SetConfig+0x388>)
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d103      	bne.n	80049de <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049d6:	f7ff f973 	bl	8003cc0 <HAL_RCC_GetPCLK2Freq>
 80049da:	6778      	str	r0, [r7, #116]	; 0x74
 80049dc:	e002      	b.n	80049e4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049de:	f7ff f95b 	bl	8003c98 <HAL_RCC_GetPCLK1Freq>
 80049e2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049e6:	69db      	ldr	r3, [r3, #28]
 80049e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049ec:	f040 80b6 	bne.w	8004b5c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049f2:	461c      	mov	r4, r3
 80049f4:	f04f 0500 	mov.w	r5, #0
 80049f8:	4622      	mov	r2, r4
 80049fa:	462b      	mov	r3, r5
 80049fc:	1891      	adds	r1, r2, r2
 80049fe:	6439      	str	r1, [r7, #64]	; 0x40
 8004a00:	415b      	adcs	r3, r3
 8004a02:	647b      	str	r3, [r7, #68]	; 0x44
 8004a04:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a08:	1912      	adds	r2, r2, r4
 8004a0a:	eb45 0303 	adc.w	r3, r5, r3
 8004a0e:	f04f 0000 	mov.w	r0, #0
 8004a12:	f04f 0100 	mov.w	r1, #0
 8004a16:	00d9      	lsls	r1, r3, #3
 8004a18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a1c:	00d0      	lsls	r0, r2, #3
 8004a1e:	4602      	mov	r2, r0
 8004a20:	460b      	mov	r3, r1
 8004a22:	1911      	adds	r1, r2, r4
 8004a24:	6639      	str	r1, [r7, #96]	; 0x60
 8004a26:	416b      	adcs	r3, r5
 8004a28:	667b      	str	r3, [r7, #100]	; 0x64
 8004a2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	f04f 0300 	mov.w	r3, #0
 8004a34:	1891      	adds	r1, r2, r2
 8004a36:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a38:	415b      	adcs	r3, r3
 8004a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a40:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004a44:	f7fc f918 	bl	8000c78 <__aeabi_uldivmod>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	4ba5      	ldr	r3, [pc, #660]	; (8004ce4 <UART_SetConfig+0x38c>)
 8004a4e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a52:	095b      	lsrs	r3, r3, #5
 8004a54:	011e      	lsls	r6, r3, #4
 8004a56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a58:	461c      	mov	r4, r3
 8004a5a:	f04f 0500 	mov.w	r5, #0
 8004a5e:	4622      	mov	r2, r4
 8004a60:	462b      	mov	r3, r5
 8004a62:	1891      	adds	r1, r2, r2
 8004a64:	6339      	str	r1, [r7, #48]	; 0x30
 8004a66:	415b      	adcs	r3, r3
 8004a68:	637b      	str	r3, [r7, #52]	; 0x34
 8004a6a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004a6e:	1912      	adds	r2, r2, r4
 8004a70:	eb45 0303 	adc.w	r3, r5, r3
 8004a74:	f04f 0000 	mov.w	r0, #0
 8004a78:	f04f 0100 	mov.w	r1, #0
 8004a7c:	00d9      	lsls	r1, r3, #3
 8004a7e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a82:	00d0      	lsls	r0, r2, #3
 8004a84:	4602      	mov	r2, r0
 8004a86:	460b      	mov	r3, r1
 8004a88:	1911      	adds	r1, r2, r4
 8004a8a:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a8c:	416b      	adcs	r3, r5
 8004a8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	461a      	mov	r2, r3
 8004a96:	f04f 0300 	mov.w	r3, #0
 8004a9a:	1891      	adds	r1, r2, r2
 8004a9c:	62b9      	str	r1, [r7, #40]	; 0x28
 8004a9e:	415b      	adcs	r3, r3
 8004aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004aa2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004aa6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004aaa:	f7fc f8e5 	bl	8000c78 <__aeabi_uldivmod>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	4b8c      	ldr	r3, [pc, #560]	; (8004ce4 <UART_SetConfig+0x38c>)
 8004ab4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ab8:	095b      	lsrs	r3, r3, #5
 8004aba:	2164      	movs	r1, #100	; 0x64
 8004abc:	fb01 f303 	mul.w	r3, r1, r3
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	00db      	lsls	r3, r3, #3
 8004ac4:	3332      	adds	r3, #50	; 0x32
 8004ac6:	4a87      	ldr	r2, [pc, #540]	; (8004ce4 <UART_SetConfig+0x38c>)
 8004ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8004acc:	095b      	lsrs	r3, r3, #5
 8004ace:	005b      	lsls	r3, r3, #1
 8004ad0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ad4:	441e      	add	r6, r3
 8004ad6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f04f 0100 	mov.w	r1, #0
 8004ade:	4602      	mov	r2, r0
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	1894      	adds	r4, r2, r2
 8004ae4:	623c      	str	r4, [r7, #32]
 8004ae6:	415b      	adcs	r3, r3
 8004ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8004aea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004aee:	1812      	adds	r2, r2, r0
 8004af0:	eb41 0303 	adc.w	r3, r1, r3
 8004af4:	f04f 0400 	mov.w	r4, #0
 8004af8:	f04f 0500 	mov.w	r5, #0
 8004afc:	00dd      	lsls	r5, r3, #3
 8004afe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b02:	00d4      	lsls	r4, r2, #3
 8004b04:	4622      	mov	r2, r4
 8004b06:	462b      	mov	r3, r5
 8004b08:	1814      	adds	r4, r2, r0
 8004b0a:	653c      	str	r4, [r7, #80]	; 0x50
 8004b0c:	414b      	adcs	r3, r1
 8004b0e:	657b      	str	r3, [r7, #84]	; 0x54
 8004b10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	461a      	mov	r2, r3
 8004b16:	f04f 0300 	mov.w	r3, #0
 8004b1a:	1891      	adds	r1, r2, r2
 8004b1c:	61b9      	str	r1, [r7, #24]
 8004b1e:	415b      	adcs	r3, r3
 8004b20:	61fb      	str	r3, [r7, #28]
 8004b22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b26:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004b2a:	f7fc f8a5 	bl	8000c78 <__aeabi_uldivmod>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	460b      	mov	r3, r1
 8004b32:	4b6c      	ldr	r3, [pc, #432]	; (8004ce4 <UART_SetConfig+0x38c>)
 8004b34:	fba3 1302 	umull	r1, r3, r3, r2
 8004b38:	095b      	lsrs	r3, r3, #5
 8004b3a:	2164      	movs	r1, #100	; 0x64
 8004b3c:	fb01 f303 	mul.w	r3, r1, r3
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	00db      	lsls	r3, r3, #3
 8004b44:	3332      	adds	r3, #50	; 0x32
 8004b46:	4a67      	ldr	r2, [pc, #412]	; (8004ce4 <UART_SetConfig+0x38c>)
 8004b48:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4c:	095b      	lsrs	r3, r3, #5
 8004b4e:	f003 0207 	and.w	r2, r3, #7
 8004b52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4432      	add	r2, r6
 8004b58:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b5a:	e0b9      	b.n	8004cd0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b5e:	461c      	mov	r4, r3
 8004b60:	f04f 0500 	mov.w	r5, #0
 8004b64:	4622      	mov	r2, r4
 8004b66:	462b      	mov	r3, r5
 8004b68:	1891      	adds	r1, r2, r2
 8004b6a:	6139      	str	r1, [r7, #16]
 8004b6c:	415b      	adcs	r3, r3
 8004b6e:	617b      	str	r3, [r7, #20]
 8004b70:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004b74:	1912      	adds	r2, r2, r4
 8004b76:	eb45 0303 	adc.w	r3, r5, r3
 8004b7a:	f04f 0000 	mov.w	r0, #0
 8004b7e:	f04f 0100 	mov.w	r1, #0
 8004b82:	00d9      	lsls	r1, r3, #3
 8004b84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b88:	00d0      	lsls	r0, r2, #3
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	eb12 0804 	adds.w	r8, r2, r4
 8004b92:	eb43 0905 	adc.w	r9, r3, r5
 8004b96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f04f 0100 	mov.w	r1, #0
 8004ba0:	f04f 0200 	mov.w	r2, #0
 8004ba4:	f04f 0300 	mov.w	r3, #0
 8004ba8:	008b      	lsls	r3, r1, #2
 8004baa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004bae:	0082      	lsls	r2, r0, #2
 8004bb0:	4640      	mov	r0, r8
 8004bb2:	4649      	mov	r1, r9
 8004bb4:	f7fc f860 	bl	8000c78 <__aeabi_uldivmod>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	460b      	mov	r3, r1
 8004bbc:	4b49      	ldr	r3, [pc, #292]	; (8004ce4 <UART_SetConfig+0x38c>)
 8004bbe:	fba3 2302 	umull	r2, r3, r3, r2
 8004bc2:	095b      	lsrs	r3, r3, #5
 8004bc4:	011e      	lsls	r6, r3, #4
 8004bc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f04f 0100 	mov.w	r1, #0
 8004bce:	4602      	mov	r2, r0
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	1894      	adds	r4, r2, r2
 8004bd4:	60bc      	str	r4, [r7, #8]
 8004bd6:	415b      	adcs	r3, r3
 8004bd8:	60fb      	str	r3, [r7, #12]
 8004bda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bde:	1812      	adds	r2, r2, r0
 8004be0:	eb41 0303 	adc.w	r3, r1, r3
 8004be4:	f04f 0400 	mov.w	r4, #0
 8004be8:	f04f 0500 	mov.w	r5, #0
 8004bec:	00dd      	lsls	r5, r3, #3
 8004bee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004bf2:	00d4      	lsls	r4, r2, #3
 8004bf4:	4622      	mov	r2, r4
 8004bf6:	462b      	mov	r3, r5
 8004bf8:	1814      	adds	r4, r2, r0
 8004bfa:	64bc      	str	r4, [r7, #72]	; 0x48
 8004bfc:	414b      	adcs	r3, r1
 8004bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f04f 0100 	mov.w	r1, #0
 8004c0a:	f04f 0200 	mov.w	r2, #0
 8004c0e:	f04f 0300 	mov.w	r3, #0
 8004c12:	008b      	lsls	r3, r1, #2
 8004c14:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004c18:	0082      	lsls	r2, r0, #2
 8004c1a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004c1e:	f7fc f82b 	bl	8000c78 <__aeabi_uldivmod>
 8004c22:	4602      	mov	r2, r0
 8004c24:	460b      	mov	r3, r1
 8004c26:	4b2f      	ldr	r3, [pc, #188]	; (8004ce4 <UART_SetConfig+0x38c>)
 8004c28:	fba3 1302 	umull	r1, r3, r3, r2
 8004c2c:	095b      	lsrs	r3, r3, #5
 8004c2e:	2164      	movs	r1, #100	; 0x64
 8004c30:	fb01 f303 	mul.w	r3, r1, r3
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	3332      	adds	r3, #50	; 0x32
 8004c3a:	4a2a      	ldr	r2, [pc, #168]	; (8004ce4 <UART_SetConfig+0x38c>)
 8004c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c40:	095b      	lsrs	r3, r3, #5
 8004c42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c46:	441e      	add	r6, r3
 8004c48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f04f 0100 	mov.w	r1, #0
 8004c50:	4602      	mov	r2, r0
 8004c52:	460b      	mov	r3, r1
 8004c54:	1894      	adds	r4, r2, r2
 8004c56:	603c      	str	r4, [r7, #0]
 8004c58:	415b      	adcs	r3, r3
 8004c5a:	607b      	str	r3, [r7, #4]
 8004c5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c60:	1812      	adds	r2, r2, r0
 8004c62:	eb41 0303 	adc.w	r3, r1, r3
 8004c66:	f04f 0400 	mov.w	r4, #0
 8004c6a:	f04f 0500 	mov.w	r5, #0
 8004c6e:	00dd      	lsls	r5, r3, #3
 8004c70:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004c74:	00d4      	lsls	r4, r2, #3
 8004c76:	4622      	mov	r2, r4
 8004c78:	462b      	mov	r3, r5
 8004c7a:	eb12 0a00 	adds.w	sl, r2, r0
 8004c7e:	eb43 0b01 	adc.w	fp, r3, r1
 8004c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f04f 0100 	mov.w	r1, #0
 8004c8c:	f04f 0200 	mov.w	r2, #0
 8004c90:	f04f 0300 	mov.w	r3, #0
 8004c94:	008b      	lsls	r3, r1, #2
 8004c96:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004c9a:	0082      	lsls	r2, r0, #2
 8004c9c:	4650      	mov	r0, sl
 8004c9e:	4659      	mov	r1, fp
 8004ca0:	f7fb ffea 	bl	8000c78 <__aeabi_uldivmod>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	4b0e      	ldr	r3, [pc, #56]	; (8004ce4 <UART_SetConfig+0x38c>)
 8004caa:	fba3 1302 	umull	r1, r3, r3, r2
 8004cae:	095b      	lsrs	r3, r3, #5
 8004cb0:	2164      	movs	r1, #100	; 0x64
 8004cb2:	fb01 f303 	mul.w	r3, r1, r3
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	011b      	lsls	r3, r3, #4
 8004cba:	3332      	adds	r3, #50	; 0x32
 8004cbc:	4a09      	ldr	r2, [pc, #36]	; (8004ce4 <UART_SetConfig+0x38c>)
 8004cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc2:	095b      	lsrs	r3, r3, #5
 8004cc4:	f003 020f 	and.w	r2, r3, #15
 8004cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4432      	add	r2, r6
 8004cce:	609a      	str	r2, [r3, #8]
}
 8004cd0:	bf00      	nop
 8004cd2:	377c      	adds	r7, #124	; 0x7c
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cda:	bf00      	nop
 8004cdc:	40011000 	.word	0x40011000
 8004ce0:	40011400 	.word	0x40011400
 8004ce4:	51eb851f 	.word	0x51eb851f

08004ce8 <__NVIC_SetPriority>:
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	4603      	mov	r3, r0
 8004cf0:	6039      	str	r1, [r7, #0]
 8004cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	db0a      	blt.n	8004d12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	b2da      	uxtb	r2, r3
 8004d00:	490c      	ldr	r1, [pc, #48]	; (8004d34 <__NVIC_SetPriority+0x4c>)
 8004d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d06:	0112      	lsls	r2, r2, #4
 8004d08:	b2d2      	uxtb	r2, r2
 8004d0a:	440b      	add	r3, r1
 8004d0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004d10:	e00a      	b.n	8004d28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	b2da      	uxtb	r2, r3
 8004d16:	4908      	ldr	r1, [pc, #32]	; (8004d38 <__NVIC_SetPriority+0x50>)
 8004d18:	79fb      	ldrb	r3, [r7, #7]
 8004d1a:	f003 030f 	and.w	r3, r3, #15
 8004d1e:	3b04      	subs	r3, #4
 8004d20:	0112      	lsls	r2, r2, #4
 8004d22:	b2d2      	uxtb	r2, r2
 8004d24:	440b      	add	r3, r1
 8004d26:	761a      	strb	r2, [r3, #24]
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr
 8004d34:	e000e100 	.word	0xe000e100
 8004d38:	e000ed00 	.word	0xe000ed00

08004d3c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004d40:	2100      	movs	r1, #0
 8004d42:	f06f 0004 	mvn.w	r0, #4
 8004d46:	f7ff ffcf 	bl	8004ce8 <__NVIC_SetPriority>
#endif
}
 8004d4a:	bf00      	nop
 8004d4c:	bd80      	pop	{r7, pc}
	...

08004d50 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d56:	f3ef 8305 	mrs	r3, IPSR
 8004d5a:	603b      	str	r3, [r7, #0]
  return(result);
 8004d5c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d003      	beq.n	8004d6a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004d62:	f06f 0305 	mvn.w	r3, #5
 8004d66:	607b      	str	r3, [r7, #4]
 8004d68:	e00c      	b.n	8004d84 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004d6a:	4b0a      	ldr	r3, [pc, #40]	; (8004d94 <osKernelInitialize+0x44>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d105      	bne.n	8004d7e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004d72:	4b08      	ldr	r3, [pc, #32]	; (8004d94 <osKernelInitialize+0x44>)
 8004d74:	2201      	movs	r2, #1
 8004d76:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	607b      	str	r3, [r7, #4]
 8004d7c:	e002      	b.n	8004d84 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004d7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d82:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004d84:	687b      	ldr	r3, [r7, #4]
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	20000204 	.word	0x20000204

08004d98 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d9e:	f3ef 8305 	mrs	r3, IPSR
 8004da2:	603b      	str	r3, [r7, #0]
  return(result);
 8004da4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d003      	beq.n	8004db2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004daa:	f06f 0305 	mvn.w	r3, #5
 8004dae:	607b      	str	r3, [r7, #4]
 8004db0:	e010      	b.n	8004dd4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004db2:	4b0b      	ldr	r3, [pc, #44]	; (8004de0 <osKernelStart+0x48>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d109      	bne.n	8004dce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004dba:	f7ff ffbf 	bl	8004d3c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004dbe:	4b08      	ldr	r3, [pc, #32]	; (8004de0 <osKernelStart+0x48>)
 8004dc0:	2202      	movs	r2, #2
 8004dc2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004dc4:	f001 fe40 	bl	8006a48 <vTaskStartScheduler>
      stat = osOK;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	607b      	str	r3, [r7, #4]
 8004dcc:	e002      	b.n	8004dd4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004dce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004dd2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004dd4:	687b      	ldr	r3, [r7, #4]
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3708      	adds	r7, #8
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	20000204 	.word	0x20000204

08004de4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b08e      	sub	sp, #56	; 0x38
 8004de8:	af04      	add	r7, sp, #16
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004df0:	2300      	movs	r3, #0
 8004df2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004df4:	f3ef 8305 	mrs	r3, IPSR
 8004df8:	617b      	str	r3, [r7, #20]
  return(result);
 8004dfa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d17e      	bne.n	8004efe <osThreadNew+0x11a>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d07b      	beq.n	8004efe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004e06:	2380      	movs	r3, #128	; 0x80
 8004e08:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004e0a:	2318      	movs	r3, #24
 8004e0c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004e12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e16:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d045      	beq.n	8004eaa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d002      	beq.n	8004e2c <osThreadNew+0x48>
        name = attr->name;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d002      	beq.n	8004e3a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d008      	beq.n	8004e52 <osThreadNew+0x6e>
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	2b38      	cmp	r3, #56	; 0x38
 8004e44:	d805      	bhi.n	8004e52 <osThreadNew+0x6e>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <osThreadNew+0x72>
        return (NULL);
 8004e52:	2300      	movs	r3, #0
 8004e54:	e054      	b.n	8004f00 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d003      	beq.n	8004e66 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	089b      	lsrs	r3, r3, #2
 8004e64:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00e      	beq.n	8004e8c <osThreadNew+0xa8>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	2b5b      	cmp	r3, #91	; 0x5b
 8004e74:	d90a      	bls.n	8004e8c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d006      	beq.n	8004e8c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d002      	beq.n	8004e8c <osThreadNew+0xa8>
        mem = 1;
 8004e86:	2301      	movs	r3, #1
 8004e88:	61bb      	str	r3, [r7, #24]
 8004e8a:	e010      	b.n	8004eae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10c      	bne.n	8004eae <osThreadNew+0xca>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d108      	bne.n	8004eae <osThreadNew+0xca>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d104      	bne.n	8004eae <osThreadNew+0xca>
          mem = 0;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	61bb      	str	r3, [r7, #24]
 8004ea8:	e001      	b.n	8004eae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d110      	bne.n	8004ed6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004ebc:	9202      	str	r2, [sp, #8]
 8004ebe:	9301      	str	r3, [sp, #4]
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	9300      	str	r3, [sp, #0]
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	6a3a      	ldr	r2, [r7, #32]
 8004ec8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f001 fb70 	bl	80065b0 <xTaskCreateStatic>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	613b      	str	r3, [r7, #16]
 8004ed4:	e013      	b.n	8004efe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d110      	bne.n	8004efe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004edc:	6a3b      	ldr	r3, [r7, #32]
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	f107 0310 	add.w	r3, r7, #16
 8004ee4:	9301      	str	r3, [sp, #4]
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	9300      	str	r3, [sp, #0]
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f001 fbbb 	bl	800666a <xTaskCreate>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d001      	beq.n	8004efe <osThreadNew+0x11a>
            hTask = NULL;
 8004efa:	2300      	movs	r3, #0
 8004efc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004efe:	693b      	ldr	r3, [r7, #16]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3728      	adds	r7, #40	; 0x28
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f10:	f3ef 8305 	mrs	r3, IPSR
 8004f14:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f16:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d003      	beq.n	8004f24 <osDelay+0x1c>
    stat = osErrorISR;
 8004f1c:	f06f 0305 	mvn.w	r3, #5
 8004f20:	60fb      	str	r3, [r7, #12]
 8004f22:	e007      	b.n	8004f34 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004f24:	2300      	movs	r3, #0
 8004f26:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d002      	beq.n	8004f34 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f001 fce0 	bl	80068f4 <vTaskDelay>
    }
  }

  return (stat);
 8004f34:	68fb      	ldr	r3, [r7, #12]
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b086      	sub	sp, #24
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8004f46:	2300      	movs	r3, #0
 8004f48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f4a:	f3ef 8305 	mrs	r3, IPSR
 8004f4e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f50:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d12d      	bne.n	8004fb2 <osEventFlagsNew+0x74>
    mem = -1;
 8004f56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f5a:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d015      	beq.n	8004f8e <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d006      	beq.n	8004f78 <osEventFlagsNew+0x3a>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	2b1f      	cmp	r3, #31
 8004f70:	d902      	bls.n	8004f78 <osEventFlagsNew+0x3a>
        mem = 1;
 8004f72:	2301      	movs	r3, #1
 8004f74:	613b      	str	r3, [r7, #16]
 8004f76:	e00c      	b.n	8004f92 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d108      	bne.n	8004f92 <osEventFlagsNew+0x54>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d104      	bne.n	8004f92 <osEventFlagsNew+0x54>
          mem = 0;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	613b      	str	r3, [r7, #16]
 8004f8c:	e001      	b.n	8004f92 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d106      	bne.n	8004fa6 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f000 fa81 	bl	80054a4 <xEventGroupCreateStatic>
 8004fa2:	6178      	str	r0, [r7, #20]
 8004fa4:	e005      	b.n	8004fb2 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d102      	bne.n	8004fb2 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8004fac:	f000 fab1 	bl	8005512 <xEventGroupCreate>
 8004fb0:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8004fb2:	697b      	ldr	r3, [r7, #20]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3718      	adds	r7, #24
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b088      	sub	sp, #32
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fc8:	f3ef 8305 	mrs	r3, IPSR
 8004fcc:	60bb      	str	r3, [r7, #8]
  return(result);
 8004fce:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d174      	bne.n	80050be <osMutexNew+0x102>
    if (attr != NULL) {
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <osMutexNew+0x26>
      type = attr->attr_bits;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	61bb      	str	r3, [r7, #24]
 8004fe0:	e001      	b.n	8004fe6 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d002      	beq.n	8004ff6 <osMutexNew+0x3a>
      rmtx = 1U;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	617b      	str	r3, [r7, #20]
 8004ff4:	e001      	b.n	8004ffa <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	f003 0308 	and.w	r3, r3, #8
 8005000:	2b00      	cmp	r3, #0
 8005002:	d15c      	bne.n	80050be <osMutexNew+0x102>
      mem = -1;
 8005004:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005008:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d015      	beq.n	800503c <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d006      	beq.n	8005026 <osMutexNew+0x6a>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	2b4f      	cmp	r3, #79	; 0x4f
 800501e:	d902      	bls.n	8005026 <osMutexNew+0x6a>
          mem = 1;
 8005020:	2301      	movs	r3, #1
 8005022:	613b      	str	r3, [r7, #16]
 8005024:	e00c      	b.n	8005040 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d108      	bne.n	8005040 <osMutexNew+0x84>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d104      	bne.n	8005040 <osMutexNew+0x84>
            mem = 0;
 8005036:	2300      	movs	r3, #0
 8005038:	613b      	str	r3, [r7, #16]
 800503a:	e001      	b.n	8005040 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800503c:	2300      	movs	r3, #0
 800503e:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d112      	bne.n	800506c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d007      	beq.n	800505c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	4619      	mov	r1, r3
 8005052:	2004      	movs	r0, #4
 8005054:	f000 fc9b 	bl	800598e <xQueueCreateMutexStatic>
 8005058:	61f8      	str	r0, [r7, #28]
 800505a:	e016      	b.n	800508a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	4619      	mov	r1, r3
 8005062:	2001      	movs	r0, #1
 8005064:	f000 fc93 	bl	800598e <xQueueCreateMutexStatic>
 8005068:	61f8      	str	r0, [r7, #28]
 800506a:	e00e      	b.n	800508a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d10b      	bne.n	800508a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d004      	beq.n	8005082 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005078:	2004      	movs	r0, #4
 800507a:	f000 fc70 	bl	800595e <xQueueCreateMutex>
 800507e:	61f8      	str	r0, [r7, #28]
 8005080:	e003      	b.n	800508a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005082:	2001      	movs	r0, #1
 8005084:	f000 fc6b 	bl	800595e <xQueueCreateMutex>
 8005088:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00c      	beq.n	80050aa <osMutexNew+0xee>
        if (attr != NULL) {
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d003      	beq.n	800509e <osMutexNew+0xe2>
          name = attr->name;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	60fb      	str	r3, [r7, #12]
 800509c:	e001      	b.n	80050a2 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800509e:	2300      	movs	r3, #0
 80050a0:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80050a2:	68f9      	ldr	r1, [r7, #12]
 80050a4:	69f8      	ldr	r0, [r7, #28]
 80050a6:	f001 fa25 	bl	80064f4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d006      	beq.n	80050be <osMutexNew+0x102>
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d003      	beq.n	80050be <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	f043 0301 	orr.w	r3, r3, #1
 80050bc:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80050be:	69fb      	ldr	r3, [r7, #28]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3720      	adds	r7, #32
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b086      	sub	sp, #24
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f023 0301 	bic.w	r3, r3, #1
 80050d8:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80050e2:	2300      	movs	r3, #0
 80050e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050e6:	f3ef 8305 	mrs	r3, IPSR
 80050ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80050ec:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d003      	beq.n	80050fa <osMutexAcquire+0x32>
    stat = osErrorISR;
 80050f2:	f06f 0305 	mvn.w	r3, #5
 80050f6:	617b      	str	r3, [r7, #20]
 80050f8:	e02c      	b.n	8005154 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d103      	bne.n	8005108 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005100:	f06f 0303 	mvn.w	r3, #3
 8005104:	617b      	str	r3, [r7, #20]
 8005106:	e025      	b.n	8005154 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d011      	beq.n	8005132 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800510e:	6839      	ldr	r1, [r7, #0]
 8005110:	6938      	ldr	r0, [r7, #16]
 8005112:	f000 fc8b 	bl	8005a2c <xQueueTakeMutexRecursive>
 8005116:	4603      	mov	r3, r0
 8005118:	2b01      	cmp	r3, #1
 800511a:	d01b      	beq.n	8005154 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d003      	beq.n	800512a <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005122:	f06f 0301 	mvn.w	r3, #1
 8005126:	617b      	str	r3, [r7, #20]
 8005128:	e014      	b.n	8005154 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800512a:	f06f 0302 	mvn.w	r3, #2
 800512e:	617b      	str	r3, [r7, #20]
 8005130:	e010      	b.n	8005154 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005132:	6839      	ldr	r1, [r7, #0]
 8005134:	6938      	ldr	r0, [r7, #16]
 8005136:	f000 ff29 	bl	8005f8c <xQueueSemaphoreTake>
 800513a:	4603      	mov	r3, r0
 800513c:	2b01      	cmp	r3, #1
 800513e:	d009      	beq.n	8005154 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d003      	beq.n	800514e <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005146:	f06f 0301 	mvn.w	r3, #1
 800514a:	617b      	str	r3, [r7, #20]
 800514c:	e002      	b.n	8005154 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800514e:	f06f 0302 	mvn.w	r3, #2
 8005152:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005154:	697b      	ldr	r3, [r7, #20]
}
 8005156:	4618      	mov	r0, r3
 8005158:	3718      	adds	r7, #24
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800515e:	b580      	push	{r7, lr}
 8005160:	b086      	sub	sp, #24
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f023 0301 	bic.w	r3, r3, #1
 800516c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005176:	2300      	movs	r3, #0
 8005178:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800517a:	f3ef 8305 	mrs	r3, IPSR
 800517e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005180:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <osMutexRelease+0x30>
    stat = osErrorISR;
 8005186:	f06f 0305 	mvn.w	r3, #5
 800518a:	617b      	str	r3, [r7, #20]
 800518c:	e01f      	b.n	80051ce <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d103      	bne.n	800519c <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005194:	f06f 0303 	mvn.w	r3, #3
 8005198:	617b      	str	r3, [r7, #20]
 800519a:	e018      	b.n	80051ce <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d009      	beq.n	80051b6 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80051a2:	6938      	ldr	r0, [r7, #16]
 80051a4:	f000 fc0e 	bl	80059c4 <xQueueGiveMutexRecursive>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d00f      	beq.n	80051ce <osMutexRelease+0x70>
        stat = osErrorResource;
 80051ae:	f06f 0302 	mvn.w	r3, #2
 80051b2:	617b      	str	r3, [r7, #20]
 80051b4:	e00b      	b.n	80051ce <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80051b6:	2300      	movs	r3, #0
 80051b8:	2200      	movs	r2, #0
 80051ba:	2100      	movs	r1, #0
 80051bc:	6938      	ldr	r0, [r7, #16]
 80051be:	f000 fc6b 	bl	8005a98 <xQueueGenericSend>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d002      	beq.n	80051ce <osMutexRelease+0x70>
        stat = osErrorResource;
 80051c8:	f06f 0302 	mvn.w	r3, #2
 80051cc:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80051ce:	697b      	ldr	r3, [r7, #20]
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3718      	adds	r7, #24
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80051d8:	b580      	push	{r7, lr}
 80051da:	b08a      	sub	sp, #40	; 0x28
 80051dc:	af02      	add	r7, sp, #8
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80051e4:	2300      	movs	r3, #0
 80051e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051e8:	f3ef 8305 	mrs	r3, IPSR
 80051ec:	613b      	str	r3, [r7, #16]
  return(result);
 80051ee:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d15f      	bne.n	80052b4 <osMessageQueueNew+0xdc>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d05c      	beq.n	80052b4 <osMessageQueueNew+0xdc>
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d059      	beq.n	80052b4 <osMessageQueueNew+0xdc>
    mem = -1;
 8005200:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005204:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d029      	beq.n	8005260 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d012      	beq.n	800523a <osMessageQueueNew+0x62>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	2b4f      	cmp	r3, #79	; 0x4f
 800521a:	d90e      	bls.n	800523a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00a      	beq.n	800523a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	695a      	ldr	r2, [r3, #20]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	68b9      	ldr	r1, [r7, #8]
 800522c:	fb01 f303 	mul.w	r3, r1, r3
 8005230:	429a      	cmp	r2, r3
 8005232:	d302      	bcc.n	800523a <osMessageQueueNew+0x62>
        mem = 1;
 8005234:	2301      	movs	r3, #1
 8005236:	61bb      	str	r3, [r7, #24]
 8005238:	e014      	b.n	8005264 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d110      	bne.n	8005264 <osMessageQueueNew+0x8c>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10c      	bne.n	8005264 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800524e:	2b00      	cmp	r3, #0
 8005250:	d108      	bne.n	8005264 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d104      	bne.n	8005264 <osMessageQueueNew+0x8c>
          mem = 0;
 800525a:	2300      	movs	r3, #0
 800525c:	61bb      	str	r3, [r7, #24]
 800525e:	e001      	b.n	8005264 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005260:	2300      	movs	r3, #0
 8005262:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d10b      	bne.n	8005282 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	691a      	ldr	r2, [r3, #16]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	2100      	movs	r1, #0
 8005274:	9100      	str	r1, [sp, #0]
 8005276:	68b9      	ldr	r1, [r7, #8]
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f000 fa81 	bl	8005780 <xQueueGenericCreateStatic>
 800527e:	61f8      	str	r0, [r7, #28]
 8005280:	e008      	b.n	8005294 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d105      	bne.n	8005294 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005288:	2200      	movs	r2, #0
 800528a:	68b9      	ldr	r1, [r7, #8]
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f000 faef 	bl	8005870 <xQueueGenericCreate>
 8005292:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00c      	beq.n	80052b4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d003      	beq.n	80052a8 <osMessageQueueNew+0xd0>
        name = attr->name;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	617b      	str	r3, [r7, #20]
 80052a6:	e001      	b.n	80052ac <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80052a8:	2300      	movs	r3, #0
 80052aa:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80052ac:	6979      	ldr	r1, [r7, #20]
 80052ae:	69f8      	ldr	r0, [r7, #28]
 80052b0:	f001 f920 	bl	80064f4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80052b4:	69fb      	ldr	r3, [r7, #28]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3720      	adds	r7, #32
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
	...

080052c0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b088      	sub	sp, #32
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	603b      	str	r3, [r7, #0]
 80052cc:	4613      	mov	r3, r2
 80052ce:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80052d4:	2300      	movs	r3, #0
 80052d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052d8:	f3ef 8305 	mrs	r3, IPSR
 80052dc:	617b      	str	r3, [r7, #20]
  return(result);
 80052de:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d028      	beq.n	8005336 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d005      	beq.n	80052f6 <osMessageQueuePut+0x36>
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d002      	beq.n	80052f6 <osMessageQueuePut+0x36>
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80052f6:	f06f 0303 	mvn.w	r3, #3
 80052fa:	61fb      	str	r3, [r7, #28]
 80052fc:	e038      	b.n	8005370 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80052fe:	2300      	movs	r3, #0
 8005300:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005302:	f107 0210 	add.w	r2, r7, #16
 8005306:	2300      	movs	r3, #0
 8005308:	68b9      	ldr	r1, [r7, #8]
 800530a:	69b8      	ldr	r0, [r7, #24]
 800530c:	f000 fcc2 	bl	8005c94 <xQueueGenericSendFromISR>
 8005310:	4603      	mov	r3, r0
 8005312:	2b01      	cmp	r3, #1
 8005314:	d003      	beq.n	800531e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005316:	f06f 0302 	mvn.w	r3, #2
 800531a:	61fb      	str	r3, [r7, #28]
 800531c:	e028      	b.n	8005370 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d025      	beq.n	8005370 <osMessageQueuePut+0xb0>
 8005324:	4b15      	ldr	r3, [pc, #84]	; (800537c <osMessageQueuePut+0xbc>)
 8005326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800532a:	601a      	str	r2, [r3, #0]
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	f3bf 8f6f 	isb	sy
 8005334:	e01c      	b.n	8005370 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d002      	beq.n	8005342 <osMessageQueuePut+0x82>
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d103      	bne.n	800534a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005342:	f06f 0303 	mvn.w	r3, #3
 8005346:	61fb      	str	r3, [r7, #28]
 8005348:	e012      	b.n	8005370 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800534a:	2300      	movs	r3, #0
 800534c:	683a      	ldr	r2, [r7, #0]
 800534e:	68b9      	ldr	r1, [r7, #8]
 8005350:	69b8      	ldr	r0, [r7, #24]
 8005352:	f000 fba1 	bl	8005a98 <xQueueGenericSend>
 8005356:	4603      	mov	r3, r0
 8005358:	2b01      	cmp	r3, #1
 800535a:	d009      	beq.n	8005370 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d003      	beq.n	800536a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005362:	f06f 0301 	mvn.w	r3, #1
 8005366:	61fb      	str	r3, [r7, #28]
 8005368:	e002      	b.n	8005370 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800536a:	f06f 0302 	mvn.w	r3, #2
 800536e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005370:	69fb      	ldr	r3, [r7, #28]
}
 8005372:	4618      	mov	r0, r3
 8005374:	3720      	adds	r7, #32
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	e000ed04 	.word	0xe000ed04

08005380 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005380:	b580      	push	{r7, lr}
 8005382:	b088      	sub	sp, #32
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
 800538c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005392:	2300      	movs	r3, #0
 8005394:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005396:	f3ef 8305 	mrs	r3, IPSR
 800539a:	617b      	str	r3, [r7, #20]
  return(result);
 800539c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d028      	beq.n	80053f4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d005      	beq.n	80053b4 <osMessageQueueGet+0x34>
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d002      	beq.n	80053b4 <osMessageQueueGet+0x34>
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d003      	beq.n	80053bc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80053b4:	f06f 0303 	mvn.w	r3, #3
 80053b8:	61fb      	str	r3, [r7, #28]
 80053ba:	e037      	b.n	800542c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80053bc:	2300      	movs	r3, #0
 80053be:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80053c0:	f107 0310 	add.w	r3, r7, #16
 80053c4:	461a      	mov	r2, r3
 80053c6:	68b9      	ldr	r1, [r7, #8]
 80053c8:	69b8      	ldr	r0, [r7, #24]
 80053ca:	f000 feeb 	bl	80061a4 <xQueueReceiveFromISR>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d003      	beq.n	80053dc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80053d4:	f06f 0302 	mvn.w	r3, #2
 80053d8:	61fb      	str	r3, [r7, #28]
 80053da:	e027      	b.n	800542c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d024      	beq.n	800542c <osMessageQueueGet+0xac>
 80053e2:	4b15      	ldr	r3, [pc, #84]	; (8005438 <osMessageQueueGet+0xb8>)
 80053e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	f3bf 8f6f 	isb	sy
 80053f2:	e01b      	b.n	800542c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d002      	beq.n	8005400 <osMessageQueueGet+0x80>
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d103      	bne.n	8005408 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005400:	f06f 0303 	mvn.w	r3, #3
 8005404:	61fb      	str	r3, [r7, #28]
 8005406:	e011      	b.n	800542c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	68b9      	ldr	r1, [r7, #8]
 800540c:	69b8      	ldr	r0, [r7, #24]
 800540e:	f000 fcdd 	bl	8005dcc <xQueueReceive>
 8005412:	4603      	mov	r3, r0
 8005414:	2b01      	cmp	r3, #1
 8005416:	d009      	beq.n	800542c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800541e:	f06f 0301 	mvn.w	r3, #1
 8005422:	61fb      	str	r3, [r7, #28]
 8005424:	e002      	b.n	800542c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005426:	f06f 0302 	mvn.w	r3, #2
 800542a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800542c:	69fb      	ldr	r3, [r7, #28]
}
 800542e:	4618      	mov	r0, r3
 8005430:	3720      	adds	r7, #32
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	e000ed04 	.word	0xe000ed04

0800543c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	4a07      	ldr	r2, [pc, #28]	; (8005468 <vApplicationGetIdleTaskMemory+0x2c>)
 800544c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	4a06      	ldr	r2, [pc, #24]	; (800546c <vApplicationGetIdleTaskMemory+0x30>)
 8005452:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2280      	movs	r2, #128	; 0x80
 8005458:	601a      	str	r2, [r3, #0]
}
 800545a:	bf00      	nop
 800545c:	3714      	adds	r7, #20
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	20000208 	.word	0x20000208
 800546c:	20000264 	.word	0x20000264

08005470 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	4a07      	ldr	r2, [pc, #28]	; (800549c <vApplicationGetTimerTaskMemory+0x2c>)
 8005480:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	4a06      	ldr	r2, [pc, #24]	; (80054a0 <vApplicationGetTimerTaskMemory+0x30>)
 8005486:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800548e:	601a      	str	r2, [r3, #0]
}
 8005490:	bf00      	nop
 8005492:	3714      	adds	r7, #20
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr
 800549c:	20000464 	.word	0x20000464
 80054a0:	200004c0 	.word	0x200004c0

080054a4 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10a      	bne.n	80054c8 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80054b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b6:	f383 8811 	msr	BASEPRI, r3
 80054ba:	f3bf 8f6f 	isb	sy
 80054be:	f3bf 8f4f 	dsb	sy
 80054c2:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80054c4:	bf00      	nop
 80054c6:	e7fe      	b.n	80054c6 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80054c8:	2320      	movs	r3, #32
 80054ca:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	2b20      	cmp	r3, #32
 80054d0:	d00a      	beq.n	80054e8 <xEventGroupCreateStatic+0x44>
	__asm volatile
 80054d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d6:	f383 8811 	msr	BASEPRI, r3
 80054da:	f3bf 8f6f 	isb	sy
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	60fb      	str	r3, [r7, #12]
}
 80054e4:	bf00      	nop
 80054e6:	e7fe      	b.n	80054e6 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00a      	beq.n	8005508 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	2200      	movs	r2, #0
 80054f6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	3304      	adds	r3, #4
 80054fc:	4618      	mov	r0, r3
 80054fe:	f000 f822 	bl	8005546 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	2201      	movs	r2, #1
 8005506:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8005508:	697b      	ldr	r3, [r7, #20]
	}
 800550a:	4618      	mov	r0, r3
 800550c:	3718      	adds	r7, #24
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8005512:	b580      	push	{r7, lr}
 8005514:	b082      	sub	sp, #8
 8005516:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8005518:	2020      	movs	r0, #32
 800551a:	f002 fe65 	bl	80081e8 <pvPortMalloc>
 800551e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00a      	beq.n	800553c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	3304      	adds	r3, #4
 8005530:	4618      	mov	r0, r3
 8005532:	f000 f808 	bl	8005546 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800553c:	687b      	ldr	r3, [r7, #4]
	}
 800553e:	4618      	mov	r0, r3
 8005540:	3708      	adds	r7, #8
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005546:	b480      	push	{r7}
 8005548:	b083      	sub	sp, #12
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f103 0208 	add.w	r2, r3, #8
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800555e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f103 0208 	add.w	r2, r3, #8
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f103 0208 	add.w	r2, r3, #8
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800557a:	bf00      	nop
 800557c:	370c      	adds	r7, #12
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005586:	b480      	push	{r7}
 8005588:	b083      	sub	sp, #12
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	689a      	ldr	r2, [r3, #8]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	683a      	ldr	r2, [r7, #0]
 80055ca:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	1c5a      	adds	r2, r3, #1
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	601a      	str	r2, [r3, #0]
}
 80055dc:	bf00      	nop
 80055de:	3714      	adds	r7, #20
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055fe:	d103      	bne.n	8005608 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	60fb      	str	r3, [r7, #12]
 8005606:	e00c      	b.n	8005622 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	3308      	adds	r3, #8
 800560c:	60fb      	str	r3, [r7, #12]
 800560e:	e002      	b.n	8005616 <vListInsert+0x2e>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	60fb      	str	r3, [r7, #12]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	429a      	cmp	r2, r3
 8005620:	d2f6      	bcs.n	8005610 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	685a      	ldr	r2, [r3, #4]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	683a      	ldr	r2, [r7, #0]
 8005630:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	1c5a      	adds	r2, r3, #1
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	601a      	str	r2, [r3, #0]
}
 800564e:	bf00      	nop
 8005650:	3714      	adds	r7, #20
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800565a:	b480      	push	{r7}
 800565c:	b085      	sub	sp, #20
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	6892      	ldr	r2, [r2, #8]
 8005670:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	6852      	ldr	r2, [r2, #4]
 800567a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	429a      	cmp	r2, r3
 8005684:	d103      	bne.n	800568e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	689a      	ldr	r2, [r3, #8]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	1e5a      	subs	r2, r3, #1
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3714      	adds	r7, #20
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
	...

080056b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d10a      	bne.n	80056da <xQueueGenericReset+0x2a>
	__asm volatile
 80056c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c8:	f383 8811 	msr	BASEPRI, r3
 80056cc:	f3bf 8f6f 	isb	sy
 80056d0:	f3bf 8f4f 	dsb	sy
 80056d4:	60bb      	str	r3, [r7, #8]
}
 80056d6:	bf00      	nop
 80056d8:	e7fe      	b.n	80056d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80056da:	f002 fc63 	bl	8007fa4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e6:	68f9      	ldr	r1, [r7, #12]
 80056e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80056ea:	fb01 f303 	mul.w	r3, r1, r3
 80056ee:	441a      	add	r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800570a:	3b01      	subs	r3, #1
 800570c:	68f9      	ldr	r1, [r7, #12]
 800570e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005710:	fb01 f303 	mul.w	r3, r1, r3
 8005714:	441a      	add	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	22ff      	movs	r2, #255	; 0xff
 800571e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	22ff      	movs	r2, #255	; 0xff
 8005726:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d114      	bne.n	800575a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d01a      	beq.n	800576e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	3310      	adds	r3, #16
 800573c:	4618      	mov	r0, r3
 800573e:	f001 fc0d 	bl	8006f5c <xTaskRemoveFromEventList>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d012      	beq.n	800576e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005748:	4b0c      	ldr	r3, [pc, #48]	; (800577c <xQueueGenericReset+0xcc>)
 800574a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800574e:	601a      	str	r2, [r3, #0]
 8005750:	f3bf 8f4f 	dsb	sy
 8005754:	f3bf 8f6f 	isb	sy
 8005758:	e009      	b.n	800576e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	3310      	adds	r3, #16
 800575e:	4618      	mov	r0, r3
 8005760:	f7ff fef1 	bl	8005546 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	3324      	adds	r3, #36	; 0x24
 8005768:	4618      	mov	r0, r3
 800576a:	f7ff feec 	bl	8005546 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800576e:	f002 fc49 	bl	8008004 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005772:	2301      	movs	r3, #1
}
 8005774:	4618      	mov	r0, r3
 8005776:	3710      	adds	r7, #16
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	e000ed04 	.word	0xe000ed04

08005780 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005780:	b580      	push	{r7, lr}
 8005782:	b08e      	sub	sp, #56	; 0x38
 8005784:	af02      	add	r7, sp, #8
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]
 800578c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10a      	bne.n	80057aa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005798:	f383 8811 	msr	BASEPRI, r3
 800579c:	f3bf 8f6f 	isb	sy
 80057a0:	f3bf 8f4f 	dsb	sy
 80057a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80057a6:	bf00      	nop
 80057a8:	e7fe      	b.n	80057a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10a      	bne.n	80057c6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80057b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b4:	f383 8811 	msr	BASEPRI, r3
 80057b8:	f3bf 8f6f 	isb	sy
 80057bc:	f3bf 8f4f 	dsb	sy
 80057c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80057c2:	bf00      	nop
 80057c4:	e7fe      	b.n	80057c4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d002      	beq.n	80057d2 <xQueueGenericCreateStatic+0x52>
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d001      	beq.n	80057d6 <xQueueGenericCreateStatic+0x56>
 80057d2:	2301      	movs	r3, #1
 80057d4:	e000      	b.n	80057d8 <xQueueGenericCreateStatic+0x58>
 80057d6:	2300      	movs	r3, #0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d10a      	bne.n	80057f2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80057dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e0:	f383 8811 	msr	BASEPRI, r3
 80057e4:	f3bf 8f6f 	isb	sy
 80057e8:	f3bf 8f4f 	dsb	sy
 80057ec:	623b      	str	r3, [r7, #32]
}
 80057ee:	bf00      	nop
 80057f0:	e7fe      	b.n	80057f0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d102      	bne.n	80057fe <xQueueGenericCreateStatic+0x7e>
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d101      	bne.n	8005802 <xQueueGenericCreateStatic+0x82>
 80057fe:	2301      	movs	r3, #1
 8005800:	e000      	b.n	8005804 <xQueueGenericCreateStatic+0x84>
 8005802:	2300      	movs	r3, #0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d10a      	bne.n	800581e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580c:	f383 8811 	msr	BASEPRI, r3
 8005810:	f3bf 8f6f 	isb	sy
 8005814:	f3bf 8f4f 	dsb	sy
 8005818:	61fb      	str	r3, [r7, #28]
}
 800581a:	bf00      	nop
 800581c:	e7fe      	b.n	800581c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800581e:	2350      	movs	r3, #80	; 0x50
 8005820:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	2b50      	cmp	r3, #80	; 0x50
 8005826:	d00a      	beq.n	800583e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582c:	f383 8811 	msr	BASEPRI, r3
 8005830:	f3bf 8f6f 	isb	sy
 8005834:	f3bf 8f4f 	dsb	sy
 8005838:	61bb      	str	r3, [r7, #24]
}
 800583a:	bf00      	nop
 800583c:	e7fe      	b.n	800583c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800583e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00d      	beq.n	8005866 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800584a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584c:	2201      	movs	r2, #1
 800584e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005852:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005858:	9300      	str	r3, [sp, #0]
 800585a:	4613      	mov	r3, r2
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	68b9      	ldr	r1, [r7, #8]
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 f83f 	bl	80058e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005868:	4618      	mov	r0, r3
 800586a:	3730      	adds	r7, #48	; 0x30
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005870:	b580      	push	{r7, lr}
 8005872:	b08a      	sub	sp, #40	; 0x28
 8005874:	af02      	add	r7, sp, #8
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	4613      	mov	r3, r2
 800587c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10a      	bne.n	800589a <xQueueGenericCreate+0x2a>
	__asm volatile
 8005884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005888:	f383 8811 	msr	BASEPRI, r3
 800588c:	f3bf 8f6f 	isb	sy
 8005890:	f3bf 8f4f 	dsb	sy
 8005894:	613b      	str	r3, [r7, #16]
}
 8005896:	bf00      	nop
 8005898:	e7fe      	b.n	8005898 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	fb02 f303 	mul.w	r3, r2, r3
 80058a2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	3350      	adds	r3, #80	; 0x50
 80058a8:	4618      	mov	r0, r3
 80058aa:	f002 fc9d 	bl	80081e8 <pvPortMalloc>
 80058ae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d011      	beq.n	80058da <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	3350      	adds	r3, #80	; 0x50
 80058be:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80058c8:	79fa      	ldrb	r2, [r7, #7]
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	9300      	str	r3, [sp, #0]
 80058ce:	4613      	mov	r3, r2
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	68b9      	ldr	r1, [r7, #8]
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f000 f805 	bl	80058e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80058da:	69bb      	ldr	r3, [r7, #24]
	}
 80058dc:	4618      	mov	r0, r3
 80058de:	3720      	adds	r7, #32
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
 80058f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d103      	bne.n	8005900 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	69ba      	ldr	r2, [r7, #24]
 80058fc:	601a      	str	r2, [r3, #0]
 80058fe:	e002      	b.n	8005906 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	68ba      	ldr	r2, [r7, #8]
 8005910:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005912:	2101      	movs	r1, #1
 8005914:	69b8      	ldr	r0, [r7, #24]
 8005916:	f7ff fecb 	bl	80056b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	78fa      	ldrb	r2, [r7, #3]
 800591e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005922:	bf00      	nop
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800592a:	b580      	push	{r7, lr}
 800592c:	b082      	sub	sp, #8
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00e      	beq.n	8005956 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800594a:	2300      	movs	r3, #0
 800594c:	2200      	movs	r2, #0
 800594e:	2100      	movs	r1, #0
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 f8a1 	bl	8005a98 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005956:	bf00      	nop
 8005958:	3708      	adds	r7, #8
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800595e:	b580      	push	{r7, lr}
 8005960:	b086      	sub	sp, #24
 8005962:	af00      	add	r7, sp, #0
 8005964:	4603      	mov	r3, r0
 8005966:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005968:	2301      	movs	r3, #1
 800596a:	617b      	str	r3, [r7, #20]
 800596c:	2300      	movs	r3, #0
 800596e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005970:	79fb      	ldrb	r3, [r7, #7]
 8005972:	461a      	mov	r2, r3
 8005974:	6939      	ldr	r1, [r7, #16]
 8005976:	6978      	ldr	r0, [r7, #20]
 8005978:	f7ff ff7a 	bl	8005870 <xQueueGenericCreate>
 800597c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f7ff ffd3 	bl	800592a <prvInitialiseMutex>

		return xNewQueue;
 8005984:	68fb      	ldr	r3, [r7, #12]
	}
 8005986:	4618      	mov	r0, r3
 8005988:	3718      	adds	r7, #24
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800598e:	b580      	push	{r7, lr}
 8005990:	b088      	sub	sp, #32
 8005992:	af02      	add	r7, sp, #8
 8005994:	4603      	mov	r3, r0
 8005996:	6039      	str	r1, [r7, #0]
 8005998:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800599a:	2301      	movs	r3, #1
 800599c:	617b      	str	r3, [r7, #20]
 800599e:	2300      	movs	r3, #0
 80059a0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80059a2:	79fb      	ldrb	r3, [r7, #7]
 80059a4:	9300      	str	r3, [sp, #0]
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2200      	movs	r2, #0
 80059aa:	6939      	ldr	r1, [r7, #16]
 80059ac:	6978      	ldr	r0, [r7, #20]
 80059ae:	f7ff fee7 	bl	8005780 <xQueueGenericCreateStatic>
 80059b2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f7ff ffb8 	bl	800592a <prvInitialiseMutex>

		return xNewQueue;
 80059ba:	68fb      	ldr	r3, [r7, #12]
	}
 80059bc:	4618      	mov	r0, r3
 80059be:	3718      	adds	r7, #24
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80059c4:	b590      	push	{r4, r7, lr}
 80059c6:	b087      	sub	sp, #28
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d10a      	bne.n	80059ec <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80059d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059da:	f383 8811 	msr	BASEPRI, r3
 80059de:	f3bf 8f6f 	isb	sy
 80059e2:	f3bf 8f4f 	dsb	sy
 80059e6:	60fb      	str	r3, [r7, #12]
}
 80059e8:	bf00      	nop
 80059ea:	e7fe      	b.n	80059ea <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	689c      	ldr	r4, [r3, #8]
 80059f0:	f001 fc72 	bl	80072d8 <xTaskGetCurrentTaskHandle>
 80059f4:	4603      	mov	r3, r0
 80059f6:	429c      	cmp	r4, r3
 80059f8:	d111      	bne.n	8005a1e <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	1e5a      	subs	r2, r3, #1
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d105      	bne.n	8005a18 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	2200      	movs	r2, #0
 8005a10:	2100      	movs	r1, #0
 8005a12:	6938      	ldr	r0, [r7, #16]
 8005a14:	f000 f840 	bl	8005a98 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	617b      	str	r3, [r7, #20]
 8005a1c:	e001      	b.n	8005a22 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005a22:	697b      	ldr	r3, [r7, #20]
	}
 8005a24:	4618      	mov	r0, r3
 8005a26:	371c      	adds	r7, #28
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd90      	pop	{r4, r7, pc}

08005a2c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005a2c:	b590      	push	{r4, r7, lr}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d10a      	bne.n	8005a56 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8005a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a44:	f383 8811 	msr	BASEPRI, r3
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	60fb      	str	r3, [r7, #12]
}
 8005a52:	bf00      	nop
 8005a54:	e7fe      	b.n	8005a54 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	689c      	ldr	r4, [r3, #8]
 8005a5a:	f001 fc3d 	bl	80072d8 <xTaskGetCurrentTaskHandle>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	429c      	cmp	r4, r3
 8005a62:	d107      	bne.n	8005a74 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	1c5a      	adds	r2, r3, #1
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	617b      	str	r3, [r7, #20]
 8005a72:	e00c      	b.n	8005a8e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005a74:	6839      	ldr	r1, [r7, #0]
 8005a76:	6938      	ldr	r0, [r7, #16]
 8005a78:	f000 fa88 	bl	8005f8c <xQueueSemaphoreTake>
 8005a7c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d004      	beq.n	8005a8e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	1c5a      	adds	r2, r3, #1
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005a8e:	697b      	ldr	r3, [r7, #20]
	}
 8005a90:	4618      	mov	r0, r3
 8005a92:	371c      	adds	r7, #28
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd90      	pop	{r4, r7, pc}

08005a98 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b08e      	sub	sp, #56	; 0x38
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
 8005aa4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10a      	bne.n	8005aca <xQueueGenericSend+0x32>
	__asm volatile
 8005ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab8:	f383 8811 	msr	BASEPRI, r3
 8005abc:	f3bf 8f6f 	isb	sy
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ac6:	bf00      	nop
 8005ac8:	e7fe      	b.n	8005ac8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d103      	bne.n	8005ad8 <xQueueGenericSend+0x40>
 8005ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d101      	bne.n	8005adc <xQueueGenericSend+0x44>
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e000      	b.n	8005ade <xQueueGenericSend+0x46>
 8005adc:	2300      	movs	r3, #0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10a      	bne.n	8005af8 <xQueueGenericSend+0x60>
	__asm volatile
 8005ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae6:	f383 8811 	msr	BASEPRI, r3
 8005aea:	f3bf 8f6f 	isb	sy
 8005aee:	f3bf 8f4f 	dsb	sy
 8005af2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005af4:	bf00      	nop
 8005af6:	e7fe      	b.n	8005af6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d103      	bne.n	8005b06 <xQueueGenericSend+0x6e>
 8005afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d101      	bne.n	8005b0a <xQueueGenericSend+0x72>
 8005b06:	2301      	movs	r3, #1
 8005b08:	e000      	b.n	8005b0c <xQueueGenericSend+0x74>
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10a      	bne.n	8005b26 <xQueueGenericSend+0x8e>
	__asm volatile
 8005b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b14:	f383 8811 	msr	BASEPRI, r3
 8005b18:	f3bf 8f6f 	isb	sy
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	623b      	str	r3, [r7, #32]
}
 8005b22:	bf00      	nop
 8005b24:	e7fe      	b.n	8005b24 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b26:	f001 fbe7 	bl	80072f8 <xTaskGetSchedulerState>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d102      	bne.n	8005b36 <xQueueGenericSend+0x9e>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d101      	bne.n	8005b3a <xQueueGenericSend+0xa2>
 8005b36:	2301      	movs	r3, #1
 8005b38:	e000      	b.n	8005b3c <xQueueGenericSend+0xa4>
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d10a      	bne.n	8005b56 <xQueueGenericSend+0xbe>
	__asm volatile
 8005b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b44:	f383 8811 	msr	BASEPRI, r3
 8005b48:	f3bf 8f6f 	isb	sy
 8005b4c:	f3bf 8f4f 	dsb	sy
 8005b50:	61fb      	str	r3, [r7, #28]
}
 8005b52:	bf00      	nop
 8005b54:	e7fe      	b.n	8005b54 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b56:	f002 fa25 	bl	8007fa4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d302      	bcc.n	8005b6c <xQueueGenericSend+0xd4>
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d129      	bne.n	8005bc0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b6c:	683a      	ldr	r2, [r7, #0]
 8005b6e:	68b9      	ldr	r1, [r7, #8]
 8005b70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b72:	f000 fbaf 	bl	80062d4 <prvCopyDataToQueue>
 8005b76:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d010      	beq.n	8005ba2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b82:	3324      	adds	r3, #36	; 0x24
 8005b84:	4618      	mov	r0, r3
 8005b86:	f001 f9e9 	bl	8006f5c <xTaskRemoveFromEventList>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d013      	beq.n	8005bb8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005b90:	4b3f      	ldr	r3, [pc, #252]	; (8005c90 <xQueueGenericSend+0x1f8>)
 8005b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b96:	601a      	str	r2, [r3, #0]
 8005b98:	f3bf 8f4f 	dsb	sy
 8005b9c:	f3bf 8f6f 	isb	sy
 8005ba0:	e00a      	b.n	8005bb8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d007      	beq.n	8005bb8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005ba8:	4b39      	ldr	r3, [pc, #228]	; (8005c90 <xQueueGenericSend+0x1f8>)
 8005baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bae:	601a      	str	r2, [r3, #0]
 8005bb0:	f3bf 8f4f 	dsb	sy
 8005bb4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005bb8:	f002 fa24 	bl	8008004 <vPortExitCritical>
				return pdPASS;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e063      	b.n	8005c88 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d103      	bne.n	8005bce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005bc6:	f002 fa1d 	bl	8008004 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	e05c      	b.n	8005c88 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d106      	bne.n	8005be2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005bd4:	f107 0314 	add.w	r3, r7, #20
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f001 fa23 	bl	8007024 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005bde:	2301      	movs	r3, #1
 8005be0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005be2:	f002 fa0f 	bl	8008004 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005be6:	f000 ff95 	bl	8006b14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005bea:	f002 f9db 	bl	8007fa4 <vPortEnterCritical>
 8005bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bf4:	b25b      	sxtb	r3, r3
 8005bf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bfa:	d103      	bne.n	8005c04 <xQueueGenericSend+0x16c>
 8005bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c0a:	b25b      	sxtb	r3, r3
 8005c0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c10:	d103      	bne.n	8005c1a <xQueueGenericSend+0x182>
 8005c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c1a:	f002 f9f3 	bl	8008004 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c1e:	1d3a      	adds	r2, r7, #4
 8005c20:	f107 0314 	add.w	r3, r7, #20
 8005c24:	4611      	mov	r1, r2
 8005c26:	4618      	mov	r0, r3
 8005c28:	f001 fa12 	bl	8007050 <xTaskCheckForTimeOut>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d124      	bne.n	8005c7c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005c32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c34:	f000 fc46 	bl	80064c4 <prvIsQueueFull>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d018      	beq.n	8005c70 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c40:	3310      	adds	r3, #16
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	4611      	mov	r1, r2
 8005c46:	4618      	mov	r0, r3
 8005c48:	f001 f938 	bl	8006ebc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005c4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c4e:	f000 fbd1 	bl	80063f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005c52:	f000 ff6d 	bl	8006b30 <xTaskResumeAll>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f47f af7c 	bne.w	8005b56 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005c5e:	4b0c      	ldr	r3, [pc, #48]	; (8005c90 <xQueueGenericSend+0x1f8>)
 8005c60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c64:	601a      	str	r2, [r3, #0]
 8005c66:	f3bf 8f4f 	dsb	sy
 8005c6a:	f3bf 8f6f 	isb	sy
 8005c6e:	e772      	b.n	8005b56 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005c70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c72:	f000 fbbf 	bl	80063f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c76:	f000 ff5b 	bl	8006b30 <xTaskResumeAll>
 8005c7a:	e76c      	b.n	8005b56 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005c7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c7e:	f000 fbb9 	bl	80063f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c82:	f000 ff55 	bl	8006b30 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005c86:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3738      	adds	r7, #56	; 0x38
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	e000ed04 	.word	0xe000ed04

08005c94 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b090      	sub	sp, #64	; 0x40
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
 8005ca0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d10a      	bne.n	8005cc2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb0:	f383 8811 	msr	BASEPRI, r3
 8005cb4:	f3bf 8f6f 	isb	sy
 8005cb8:	f3bf 8f4f 	dsb	sy
 8005cbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005cbe:	bf00      	nop
 8005cc0:	e7fe      	b.n	8005cc0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d103      	bne.n	8005cd0 <xQueueGenericSendFromISR+0x3c>
 8005cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d101      	bne.n	8005cd4 <xQueueGenericSendFromISR+0x40>
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e000      	b.n	8005cd6 <xQueueGenericSendFromISR+0x42>
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10a      	bne.n	8005cf0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cde:	f383 8811 	msr	BASEPRI, r3
 8005ce2:	f3bf 8f6f 	isb	sy
 8005ce6:	f3bf 8f4f 	dsb	sy
 8005cea:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005cec:	bf00      	nop
 8005cee:	e7fe      	b.n	8005cee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d103      	bne.n	8005cfe <xQueueGenericSendFromISR+0x6a>
 8005cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d101      	bne.n	8005d02 <xQueueGenericSendFromISR+0x6e>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e000      	b.n	8005d04 <xQueueGenericSendFromISR+0x70>
 8005d02:	2300      	movs	r3, #0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10a      	bne.n	8005d1e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0c:	f383 8811 	msr	BASEPRI, r3
 8005d10:	f3bf 8f6f 	isb	sy
 8005d14:	f3bf 8f4f 	dsb	sy
 8005d18:	623b      	str	r3, [r7, #32]
}
 8005d1a:	bf00      	nop
 8005d1c:	e7fe      	b.n	8005d1c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d1e:	f002 fa23 	bl	8008168 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005d22:	f3ef 8211 	mrs	r2, BASEPRI
 8005d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2a:	f383 8811 	msr	BASEPRI, r3
 8005d2e:	f3bf 8f6f 	isb	sy
 8005d32:	f3bf 8f4f 	dsb	sy
 8005d36:	61fa      	str	r2, [r7, #28]
 8005d38:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005d3a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d3c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d302      	bcc.n	8005d50 <xQueueGenericSendFromISR+0xbc>
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d12f      	bne.n	8005db0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d60:	683a      	ldr	r2, [r7, #0]
 8005d62:	68b9      	ldr	r1, [r7, #8]
 8005d64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005d66:	f000 fab5 	bl	80062d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005d6a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005d6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d72:	d112      	bne.n	8005d9a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d016      	beq.n	8005daa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7e:	3324      	adds	r3, #36	; 0x24
 8005d80:	4618      	mov	r0, r3
 8005d82:	f001 f8eb 	bl	8006f5c <xTaskRemoveFromEventList>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00e      	beq.n	8005daa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00b      	beq.n	8005daa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	601a      	str	r2, [r3, #0]
 8005d98:	e007      	b.n	8005daa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005d9a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005d9e:	3301      	adds	r3, #1
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	b25a      	sxtb	r2, r3
 8005da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005daa:	2301      	movs	r3, #1
 8005dac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005dae:	e001      	b.n	8005db4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005db0:	2300      	movs	r3, #0
 8005db2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005dbe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3740      	adds	r7, #64	; 0x40
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
	...

08005dcc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b08c      	sub	sp, #48	; 0x30
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10a      	bne.n	8005dfc <xQueueReceive+0x30>
	__asm volatile
 8005de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dea:	f383 8811 	msr	BASEPRI, r3
 8005dee:	f3bf 8f6f 	isb	sy
 8005df2:	f3bf 8f4f 	dsb	sy
 8005df6:	623b      	str	r3, [r7, #32]
}
 8005df8:	bf00      	nop
 8005dfa:	e7fe      	b.n	8005dfa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d103      	bne.n	8005e0a <xQueueReceive+0x3e>
 8005e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d101      	bne.n	8005e0e <xQueueReceive+0x42>
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e000      	b.n	8005e10 <xQueueReceive+0x44>
 8005e0e:	2300      	movs	r3, #0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10a      	bne.n	8005e2a <xQueueReceive+0x5e>
	__asm volatile
 8005e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e18:	f383 8811 	msr	BASEPRI, r3
 8005e1c:	f3bf 8f6f 	isb	sy
 8005e20:	f3bf 8f4f 	dsb	sy
 8005e24:	61fb      	str	r3, [r7, #28]
}
 8005e26:	bf00      	nop
 8005e28:	e7fe      	b.n	8005e28 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e2a:	f001 fa65 	bl	80072f8 <xTaskGetSchedulerState>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d102      	bne.n	8005e3a <xQueueReceive+0x6e>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d101      	bne.n	8005e3e <xQueueReceive+0x72>
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e000      	b.n	8005e40 <xQueueReceive+0x74>
 8005e3e:	2300      	movs	r3, #0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10a      	bne.n	8005e5a <xQueueReceive+0x8e>
	__asm volatile
 8005e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e48:	f383 8811 	msr	BASEPRI, r3
 8005e4c:	f3bf 8f6f 	isb	sy
 8005e50:	f3bf 8f4f 	dsb	sy
 8005e54:	61bb      	str	r3, [r7, #24]
}
 8005e56:	bf00      	nop
 8005e58:	e7fe      	b.n	8005e58 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e5a:	f002 f8a3 	bl	8007fa4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e62:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d01f      	beq.n	8005eaa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005e6a:	68b9      	ldr	r1, [r7, #8]
 8005e6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e6e:	f000 fa9b 	bl	80063a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e74:	1e5a      	subs	r2, r3, #1
 8005e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e78:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00f      	beq.n	8005ea2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e84:	3310      	adds	r3, #16
 8005e86:	4618      	mov	r0, r3
 8005e88:	f001 f868 	bl	8006f5c <xTaskRemoveFromEventList>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d007      	beq.n	8005ea2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005e92:	4b3d      	ldr	r3, [pc, #244]	; (8005f88 <xQueueReceive+0x1bc>)
 8005e94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e98:	601a      	str	r2, [r3, #0]
 8005e9a:	f3bf 8f4f 	dsb	sy
 8005e9e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ea2:	f002 f8af 	bl	8008004 <vPortExitCritical>
				return pdPASS;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e069      	b.n	8005f7e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d103      	bne.n	8005eb8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005eb0:	f002 f8a8 	bl	8008004 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	e062      	b.n	8005f7e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d106      	bne.n	8005ecc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ebe:	f107 0310 	add.w	r3, r7, #16
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f001 f8ae 	bl	8007024 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ecc:	f002 f89a 	bl	8008004 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ed0:	f000 fe20 	bl	8006b14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ed4:	f002 f866 	bl	8007fa4 <vPortEnterCritical>
 8005ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ede:	b25b      	sxtb	r3, r3
 8005ee0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ee4:	d103      	bne.n	8005eee <xQueueReceive+0x122>
 8005ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ef4:	b25b      	sxtb	r3, r3
 8005ef6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005efa:	d103      	bne.n	8005f04 <xQueueReceive+0x138>
 8005efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f04:	f002 f87e 	bl	8008004 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f08:	1d3a      	adds	r2, r7, #4
 8005f0a:	f107 0310 	add.w	r3, r7, #16
 8005f0e:	4611      	mov	r1, r2
 8005f10:	4618      	mov	r0, r3
 8005f12:	f001 f89d 	bl	8007050 <xTaskCheckForTimeOut>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d123      	bne.n	8005f64 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f1e:	f000 fabb 	bl	8006498 <prvIsQueueEmpty>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d017      	beq.n	8005f58 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2a:	3324      	adds	r3, #36	; 0x24
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	4611      	mov	r1, r2
 8005f30:	4618      	mov	r0, r3
 8005f32:	f000 ffc3 	bl	8006ebc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005f36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f38:	f000 fa5c 	bl	80063f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005f3c:	f000 fdf8 	bl	8006b30 <xTaskResumeAll>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d189      	bne.n	8005e5a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005f46:	4b10      	ldr	r3, [pc, #64]	; (8005f88 <xQueueReceive+0x1bc>)
 8005f48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f4c:	601a      	str	r2, [r3, #0]
 8005f4e:	f3bf 8f4f 	dsb	sy
 8005f52:	f3bf 8f6f 	isb	sy
 8005f56:	e780      	b.n	8005e5a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005f58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f5a:	f000 fa4b 	bl	80063f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f5e:	f000 fde7 	bl	8006b30 <xTaskResumeAll>
 8005f62:	e77a      	b.n	8005e5a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005f64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f66:	f000 fa45 	bl	80063f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f6a:	f000 fde1 	bl	8006b30 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f70:	f000 fa92 	bl	8006498 <prvIsQueueEmpty>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f43f af6f 	beq.w	8005e5a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005f7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3730      	adds	r7, #48	; 0x30
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	e000ed04 	.word	0xe000ed04

08005f8c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b08e      	sub	sp, #56	; 0x38
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005f96:	2300      	movs	r3, #0
 8005f98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d10a      	bne.n	8005fbe <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fac:	f383 8811 	msr	BASEPRI, r3
 8005fb0:	f3bf 8f6f 	isb	sy
 8005fb4:	f3bf 8f4f 	dsb	sy
 8005fb8:	623b      	str	r3, [r7, #32]
}
 8005fba:	bf00      	nop
 8005fbc:	e7fe      	b.n	8005fbc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00a      	beq.n	8005fdc <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fca:	f383 8811 	msr	BASEPRI, r3
 8005fce:	f3bf 8f6f 	isb	sy
 8005fd2:	f3bf 8f4f 	dsb	sy
 8005fd6:	61fb      	str	r3, [r7, #28]
}
 8005fd8:	bf00      	nop
 8005fda:	e7fe      	b.n	8005fda <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fdc:	f001 f98c 	bl	80072f8 <xTaskGetSchedulerState>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d102      	bne.n	8005fec <xQueueSemaphoreTake+0x60>
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d101      	bne.n	8005ff0 <xQueueSemaphoreTake+0x64>
 8005fec:	2301      	movs	r3, #1
 8005fee:	e000      	b.n	8005ff2 <xQueueSemaphoreTake+0x66>
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10a      	bne.n	800600c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffa:	f383 8811 	msr	BASEPRI, r3
 8005ffe:	f3bf 8f6f 	isb	sy
 8006002:	f3bf 8f4f 	dsb	sy
 8006006:	61bb      	str	r3, [r7, #24]
}
 8006008:	bf00      	nop
 800600a:	e7fe      	b.n	800600a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800600c:	f001 ffca 	bl	8007fa4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006014:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006018:	2b00      	cmp	r3, #0
 800601a:	d024      	beq.n	8006066 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800601c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601e:	1e5a      	subs	r2, r3, #1
 8006020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006022:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d104      	bne.n	8006036 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800602c:	f001 fada 	bl	80075e4 <pvTaskIncrementMutexHeldCount>
 8006030:	4602      	mov	r2, r0
 8006032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006034:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00f      	beq.n	800605e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800603e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006040:	3310      	adds	r3, #16
 8006042:	4618      	mov	r0, r3
 8006044:	f000 ff8a 	bl	8006f5c <xTaskRemoveFromEventList>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d007      	beq.n	800605e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800604e:	4b54      	ldr	r3, [pc, #336]	; (80061a0 <xQueueSemaphoreTake+0x214>)
 8006050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006054:	601a      	str	r2, [r3, #0]
 8006056:	f3bf 8f4f 	dsb	sy
 800605a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800605e:	f001 ffd1 	bl	8008004 <vPortExitCritical>
				return pdPASS;
 8006062:	2301      	movs	r3, #1
 8006064:	e097      	b.n	8006196 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d111      	bne.n	8006090 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800606c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00a      	beq.n	8006088 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006076:	f383 8811 	msr	BASEPRI, r3
 800607a:	f3bf 8f6f 	isb	sy
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	617b      	str	r3, [r7, #20]
}
 8006084:	bf00      	nop
 8006086:	e7fe      	b.n	8006086 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006088:	f001 ffbc 	bl	8008004 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800608c:	2300      	movs	r3, #0
 800608e:	e082      	b.n	8006196 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006092:	2b00      	cmp	r3, #0
 8006094:	d106      	bne.n	80060a4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006096:	f107 030c 	add.w	r3, r7, #12
 800609a:	4618      	mov	r0, r3
 800609c:	f000 ffc2 	bl	8007024 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80060a0:	2301      	movs	r3, #1
 80060a2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80060a4:	f001 ffae 	bl	8008004 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80060a8:	f000 fd34 	bl	8006b14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060ac:	f001 ff7a 	bl	8007fa4 <vPortEnterCritical>
 80060b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060b6:	b25b      	sxtb	r3, r3
 80060b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060bc:	d103      	bne.n	80060c6 <xQueueSemaphoreTake+0x13a>
 80060be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060cc:	b25b      	sxtb	r3, r3
 80060ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060d2:	d103      	bne.n	80060dc <xQueueSemaphoreTake+0x150>
 80060d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060dc:	f001 ff92 	bl	8008004 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060e0:	463a      	mov	r2, r7
 80060e2:	f107 030c 	add.w	r3, r7, #12
 80060e6:	4611      	mov	r1, r2
 80060e8:	4618      	mov	r0, r3
 80060ea:	f000 ffb1 	bl	8007050 <xTaskCheckForTimeOut>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d132      	bne.n	800615a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80060f6:	f000 f9cf 	bl	8006498 <prvIsQueueEmpty>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d026      	beq.n	800614e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d109      	bne.n	800611c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006108:	f001 ff4c 	bl	8007fa4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800610c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	4618      	mov	r0, r3
 8006112:	f001 f90f 	bl	8007334 <xTaskPriorityInherit>
 8006116:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006118:	f001 ff74 	bl	8008004 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800611c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800611e:	3324      	adds	r3, #36	; 0x24
 8006120:	683a      	ldr	r2, [r7, #0]
 8006122:	4611      	mov	r1, r2
 8006124:	4618      	mov	r0, r3
 8006126:	f000 fec9 	bl	8006ebc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800612a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800612c:	f000 f962 	bl	80063f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006130:	f000 fcfe 	bl	8006b30 <xTaskResumeAll>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	f47f af68 	bne.w	800600c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800613c:	4b18      	ldr	r3, [pc, #96]	; (80061a0 <xQueueSemaphoreTake+0x214>)
 800613e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006142:	601a      	str	r2, [r3, #0]
 8006144:	f3bf 8f4f 	dsb	sy
 8006148:	f3bf 8f6f 	isb	sy
 800614c:	e75e      	b.n	800600c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800614e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006150:	f000 f950 	bl	80063f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006154:	f000 fcec 	bl	8006b30 <xTaskResumeAll>
 8006158:	e758      	b.n	800600c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800615a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800615c:	f000 f94a 	bl	80063f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006160:	f000 fce6 	bl	8006b30 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006164:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006166:	f000 f997 	bl	8006498 <prvIsQueueEmpty>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	f43f af4d 	beq.w	800600c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00d      	beq.n	8006194 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006178:	f001 ff14 	bl	8007fa4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800617c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800617e:	f000 f891 	bl	80062a4 <prvGetDisinheritPriorityAfterTimeout>
 8006182:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800618a:	4618      	mov	r0, r3
 800618c:	f001 f9a8 	bl	80074e0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006190:	f001 ff38 	bl	8008004 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006194:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006196:	4618      	mov	r0, r3
 8006198:	3738      	adds	r7, #56	; 0x38
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	e000ed04 	.word	0xe000ed04

080061a4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b08e      	sub	sp, #56	; 0x38
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80061b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10a      	bne.n	80061d0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80061ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061be:	f383 8811 	msr	BASEPRI, r3
 80061c2:	f3bf 8f6f 	isb	sy
 80061c6:	f3bf 8f4f 	dsb	sy
 80061ca:	623b      	str	r3, [r7, #32]
}
 80061cc:	bf00      	nop
 80061ce:	e7fe      	b.n	80061ce <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d103      	bne.n	80061de <xQueueReceiveFromISR+0x3a>
 80061d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <xQueueReceiveFromISR+0x3e>
 80061de:	2301      	movs	r3, #1
 80061e0:	e000      	b.n	80061e4 <xQueueReceiveFromISR+0x40>
 80061e2:	2300      	movs	r3, #0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10a      	bne.n	80061fe <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80061e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ec:	f383 8811 	msr	BASEPRI, r3
 80061f0:	f3bf 8f6f 	isb	sy
 80061f4:	f3bf 8f4f 	dsb	sy
 80061f8:	61fb      	str	r3, [r7, #28]
}
 80061fa:	bf00      	nop
 80061fc:	e7fe      	b.n	80061fc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80061fe:	f001 ffb3 	bl	8008168 <vPortValidateInterruptPriority>
	__asm volatile
 8006202:	f3ef 8211 	mrs	r2, BASEPRI
 8006206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620a:	f383 8811 	msr	BASEPRI, r3
 800620e:	f3bf 8f6f 	isb	sy
 8006212:	f3bf 8f4f 	dsb	sy
 8006216:	61ba      	str	r2, [r7, #24]
 8006218:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800621a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800621c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800621e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006222:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006226:	2b00      	cmp	r3, #0
 8006228:	d02f      	beq.n	800628a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800622a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006230:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006234:	68b9      	ldr	r1, [r7, #8]
 8006236:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006238:	f000 f8b6 	bl	80063a8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800623c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623e:	1e5a      	subs	r2, r3, #1
 8006240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006242:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006244:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006248:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800624c:	d112      	bne.n	8006274 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800624e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d016      	beq.n	8006284 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006258:	3310      	adds	r3, #16
 800625a:	4618      	mov	r0, r3
 800625c:	f000 fe7e 	bl	8006f5c <xTaskRemoveFromEventList>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00e      	beq.n	8006284 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00b      	beq.n	8006284 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	601a      	str	r2, [r3, #0]
 8006272:	e007      	b.n	8006284 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006274:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006278:	3301      	adds	r3, #1
 800627a:	b2db      	uxtb	r3, r3
 800627c:	b25a      	sxtb	r2, r3
 800627e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006280:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006284:	2301      	movs	r3, #1
 8006286:	637b      	str	r3, [r7, #52]	; 0x34
 8006288:	e001      	b.n	800628e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800628a:	2300      	movs	r3, #0
 800628c:	637b      	str	r3, [r7, #52]	; 0x34
 800628e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006290:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	f383 8811 	msr	BASEPRI, r3
}
 8006298:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800629a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800629c:	4618      	mov	r0, r3
 800629e:	3738      	adds	r7, #56	; 0x38
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d006      	beq.n	80062c2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80062be:	60fb      	str	r3, [r7, #12]
 80062c0:	e001      	b.n	80062c6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80062c2:	2300      	movs	r3, #0
 80062c4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80062c6:	68fb      	ldr	r3, [r7, #12]
	}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3714      	adds	r7, #20
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b086      	sub	sp, #24
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80062e0:	2300      	movs	r3, #0
 80062e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d10d      	bne.n	800630e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d14d      	bne.n	8006396 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	4618      	mov	r0, r3
 8006300:	f001 f880 	bl	8007404 <xTaskPriorityDisinherit>
 8006304:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	609a      	str	r2, [r3, #8]
 800630c:	e043      	b.n	8006396 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d119      	bne.n	8006348 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6858      	ldr	r0, [r3, #4]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631c:	461a      	mov	r2, r3
 800631e:	68b9      	ldr	r1, [r7, #8]
 8006320:	f002 f976 	bl	8008610 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	685a      	ldr	r2, [r3, #4]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632c:	441a      	add	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	685a      	ldr	r2, [r3, #4]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	429a      	cmp	r2, r3
 800633c:	d32b      	bcc.n	8006396 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	605a      	str	r2, [r3, #4]
 8006346:	e026      	b.n	8006396 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	68d8      	ldr	r0, [r3, #12]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006350:	461a      	mov	r2, r3
 8006352:	68b9      	ldr	r1, [r7, #8]
 8006354:	f002 f95c 	bl	8008610 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	68da      	ldr	r2, [r3, #12]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006360:	425b      	negs	r3, r3
 8006362:	441a      	add	r2, r3
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	68da      	ldr	r2, [r3, #12]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	429a      	cmp	r2, r3
 8006372:	d207      	bcs.n	8006384 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	689a      	ldr	r2, [r3, #8]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637c:	425b      	negs	r3, r3
 800637e:	441a      	add	r2, r3
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2b02      	cmp	r3, #2
 8006388:	d105      	bne.n	8006396 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d002      	beq.n	8006396 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	3b01      	subs	r3, #1
 8006394:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	1c5a      	adds	r2, r3, #1
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800639e:	697b      	ldr	r3, [r7, #20]
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3718      	adds	r7, #24
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d018      	beq.n	80063ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	68da      	ldr	r2, [r3, #12]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c2:	441a      	add	r2, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	68da      	ldr	r2, [r3, #12]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d303      	bcc.n	80063dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	68d9      	ldr	r1, [r3, #12]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e4:	461a      	mov	r2, r3
 80063e6:	6838      	ldr	r0, [r7, #0]
 80063e8:	f002 f912 	bl	8008610 <memcpy>
	}
}
 80063ec:	bf00      	nop
 80063ee:	3708      	adds	r7, #8
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80063fc:	f001 fdd2 	bl	8007fa4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006406:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006408:	e011      	b.n	800642e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640e:	2b00      	cmp	r3, #0
 8006410:	d012      	beq.n	8006438 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	3324      	adds	r3, #36	; 0x24
 8006416:	4618      	mov	r0, r3
 8006418:	f000 fda0 	bl	8006f5c <xTaskRemoveFromEventList>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006422:	f000 fe77 	bl	8007114 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006426:	7bfb      	ldrb	r3, [r7, #15]
 8006428:	3b01      	subs	r3, #1
 800642a:	b2db      	uxtb	r3, r3
 800642c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800642e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006432:	2b00      	cmp	r3, #0
 8006434:	dce9      	bgt.n	800640a <prvUnlockQueue+0x16>
 8006436:	e000      	b.n	800643a <prvUnlockQueue+0x46>
					break;
 8006438:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	22ff      	movs	r2, #255	; 0xff
 800643e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006442:	f001 fddf 	bl	8008004 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006446:	f001 fdad 	bl	8007fa4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006450:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006452:	e011      	b.n	8006478 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d012      	beq.n	8006482 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	3310      	adds	r3, #16
 8006460:	4618      	mov	r0, r3
 8006462:	f000 fd7b 	bl	8006f5c <xTaskRemoveFromEventList>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d001      	beq.n	8006470 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800646c:	f000 fe52 	bl	8007114 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006470:	7bbb      	ldrb	r3, [r7, #14]
 8006472:	3b01      	subs	r3, #1
 8006474:	b2db      	uxtb	r3, r3
 8006476:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006478:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800647c:	2b00      	cmp	r3, #0
 800647e:	dce9      	bgt.n	8006454 <prvUnlockQueue+0x60>
 8006480:	e000      	b.n	8006484 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006482:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	22ff      	movs	r2, #255	; 0xff
 8006488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800648c:	f001 fdba 	bl	8008004 <vPortExitCritical>
}
 8006490:	bf00      	nop
 8006492:	3710      	adds	r7, #16
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80064a0:	f001 fd80 	bl	8007fa4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d102      	bne.n	80064b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80064ac:	2301      	movs	r3, #1
 80064ae:	60fb      	str	r3, [r7, #12]
 80064b0:	e001      	b.n	80064b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80064b2:	2300      	movs	r3, #0
 80064b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80064b6:	f001 fda5 	bl	8008004 <vPortExitCritical>

	return xReturn;
 80064ba:	68fb      	ldr	r3, [r7, #12]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80064cc:	f001 fd6a 	bl	8007fa4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064d8:	429a      	cmp	r2, r3
 80064da:	d102      	bne.n	80064e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80064dc:	2301      	movs	r3, #1
 80064de:	60fb      	str	r3, [r7, #12]
 80064e0:	e001      	b.n	80064e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80064e2:	2300      	movs	r3, #0
 80064e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80064e6:	f001 fd8d 	bl	8008004 <vPortExitCritical>

	return xReturn;
 80064ea:	68fb      	ldr	r3, [r7, #12]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80064f4:	b480      	push	{r7}
 80064f6:	b085      	sub	sp, #20
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80064fe:	2300      	movs	r3, #0
 8006500:	60fb      	str	r3, [r7, #12]
 8006502:	e014      	b.n	800652e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006504:	4a0f      	ldr	r2, [pc, #60]	; (8006544 <vQueueAddToRegistry+0x50>)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d10b      	bne.n	8006528 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006510:	490c      	ldr	r1, [pc, #48]	; (8006544 <vQueueAddToRegistry+0x50>)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	683a      	ldr	r2, [r7, #0]
 8006516:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800651a:	4a0a      	ldr	r2, [pc, #40]	; (8006544 <vQueueAddToRegistry+0x50>)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	00db      	lsls	r3, r3, #3
 8006520:	4413      	add	r3, r2
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006526:	e006      	b.n	8006536 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	3301      	adds	r3, #1
 800652c:	60fb      	str	r3, [r7, #12]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2b07      	cmp	r3, #7
 8006532:	d9e7      	bls.n	8006504 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006534:	bf00      	nop
 8006536:	bf00      	nop
 8006538:	3714      	adds	r7, #20
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	20004cfc 	.word	0x20004cfc

08006548 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006548:	b580      	push	{r7, lr}
 800654a:	b086      	sub	sp, #24
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006558:	f001 fd24 	bl	8007fa4 <vPortEnterCritical>
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006562:	b25b      	sxtb	r3, r3
 8006564:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006568:	d103      	bne.n	8006572 <vQueueWaitForMessageRestricted+0x2a>
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006578:	b25b      	sxtb	r3, r3
 800657a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800657e:	d103      	bne.n	8006588 <vQueueWaitForMessageRestricted+0x40>
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006588:	f001 fd3c 	bl	8008004 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006590:	2b00      	cmp	r3, #0
 8006592:	d106      	bne.n	80065a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	3324      	adds	r3, #36	; 0x24
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	68b9      	ldr	r1, [r7, #8]
 800659c:	4618      	mov	r0, r3
 800659e:	f000 fcb1 	bl	8006f04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80065a2:	6978      	ldr	r0, [r7, #20]
 80065a4:	f7ff ff26 	bl	80063f4 <prvUnlockQueue>
	}
 80065a8:	bf00      	nop
 80065aa:	3718      	adds	r7, #24
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b08e      	sub	sp, #56	; 0x38
 80065b4:	af04      	add	r7, sp, #16
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
 80065bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80065be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10a      	bne.n	80065da <xTaskCreateStatic+0x2a>
	__asm volatile
 80065c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c8:	f383 8811 	msr	BASEPRI, r3
 80065cc:	f3bf 8f6f 	isb	sy
 80065d0:	f3bf 8f4f 	dsb	sy
 80065d4:	623b      	str	r3, [r7, #32]
}
 80065d6:	bf00      	nop
 80065d8:	e7fe      	b.n	80065d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80065da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d10a      	bne.n	80065f6 <xTaskCreateStatic+0x46>
	__asm volatile
 80065e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e4:	f383 8811 	msr	BASEPRI, r3
 80065e8:	f3bf 8f6f 	isb	sy
 80065ec:	f3bf 8f4f 	dsb	sy
 80065f0:	61fb      	str	r3, [r7, #28]
}
 80065f2:	bf00      	nop
 80065f4:	e7fe      	b.n	80065f4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80065f6:	235c      	movs	r3, #92	; 0x5c
 80065f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	2b5c      	cmp	r3, #92	; 0x5c
 80065fe:	d00a      	beq.n	8006616 <xTaskCreateStatic+0x66>
	__asm volatile
 8006600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006604:	f383 8811 	msr	BASEPRI, r3
 8006608:	f3bf 8f6f 	isb	sy
 800660c:	f3bf 8f4f 	dsb	sy
 8006610:	61bb      	str	r3, [r7, #24]
}
 8006612:	bf00      	nop
 8006614:	e7fe      	b.n	8006614 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006616:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661a:	2b00      	cmp	r3, #0
 800661c:	d01e      	beq.n	800665c <xTaskCreateStatic+0xac>
 800661e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006620:	2b00      	cmp	r3, #0
 8006622:	d01b      	beq.n	800665c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006626:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800662c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800662e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006630:	2202      	movs	r2, #2
 8006632:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006636:	2300      	movs	r3, #0
 8006638:	9303      	str	r3, [sp, #12]
 800663a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663c:	9302      	str	r3, [sp, #8]
 800663e:	f107 0314 	add.w	r3, r7, #20
 8006642:	9301      	str	r3, [sp, #4]
 8006644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006646:	9300      	str	r3, [sp, #0]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	68b9      	ldr	r1, [r7, #8]
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f000 f850 	bl	80066f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006654:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006656:	f000 f8dd 	bl	8006814 <prvAddNewTaskToReadyList>
 800665a:	e001      	b.n	8006660 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800665c:	2300      	movs	r3, #0
 800665e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006660:	697b      	ldr	r3, [r7, #20]
	}
 8006662:	4618      	mov	r0, r3
 8006664:	3728      	adds	r7, #40	; 0x28
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800666a:	b580      	push	{r7, lr}
 800666c:	b08c      	sub	sp, #48	; 0x30
 800666e:	af04      	add	r7, sp, #16
 8006670:	60f8      	str	r0, [r7, #12]
 8006672:	60b9      	str	r1, [r7, #8]
 8006674:	603b      	str	r3, [r7, #0]
 8006676:	4613      	mov	r3, r2
 8006678:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800667a:	88fb      	ldrh	r3, [r7, #6]
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	4618      	mov	r0, r3
 8006680:	f001 fdb2 	bl	80081e8 <pvPortMalloc>
 8006684:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00e      	beq.n	80066aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800668c:	205c      	movs	r0, #92	; 0x5c
 800668e:	f001 fdab 	bl	80081e8 <pvPortMalloc>
 8006692:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d003      	beq.n	80066a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	697a      	ldr	r2, [r7, #20]
 800669e:	631a      	str	r2, [r3, #48]	; 0x30
 80066a0:	e005      	b.n	80066ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80066a2:	6978      	ldr	r0, [r7, #20]
 80066a4:	f001 fe6c 	bl	8008380 <vPortFree>
 80066a8:	e001      	b.n	80066ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80066aa:	2300      	movs	r3, #0
 80066ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d017      	beq.n	80066e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80066bc:	88fa      	ldrh	r2, [r7, #6]
 80066be:	2300      	movs	r3, #0
 80066c0:	9303      	str	r3, [sp, #12]
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	9302      	str	r3, [sp, #8]
 80066c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c8:	9301      	str	r3, [sp, #4]
 80066ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066cc:	9300      	str	r3, [sp, #0]
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	68b9      	ldr	r1, [r7, #8]
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f000 f80e 	bl	80066f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066d8:	69f8      	ldr	r0, [r7, #28]
 80066da:	f000 f89b 	bl	8006814 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80066de:	2301      	movs	r3, #1
 80066e0:	61bb      	str	r3, [r7, #24]
 80066e2:	e002      	b.n	80066ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80066e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80066ea:	69bb      	ldr	r3, [r7, #24]
	}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3720      	adds	r7, #32
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b088      	sub	sp, #32
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
 8006700:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006704:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	461a      	mov	r2, r3
 800670c:	21a5      	movs	r1, #165	; 0xa5
 800670e:	f001 ff8d 	bl	800862c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006714:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800671c:	3b01      	subs	r3, #1
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	4413      	add	r3, r2
 8006722:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	f023 0307 	bic.w	r3, r3, #7
 800672a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	f003 0307 	and.w	r3, r3, #7
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00a      	beq.n	800674c <prvInitialiseNewTask+0x58>
	__asm volatile
 8006736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673a:	f383 8811 	msr	BASEPRI, r3
 800673e:	f3bf 8f6f 	isb	sy
 8006742:	f3bf 8f4f 	dsb	sy
 8006746:	617b      	str	r3, [r7, #20]
}
 8006748:	bf00      	nop
 800674a:	e7fe      	b.n	800674a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d01f      	beq.n	8006792 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006752:	2300      	movs	r3, #0
 8006754:	61fb      	str	r3, [r7, #28]
 8006756:	e012      	b.n	800677e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	4413      	add	r3, r2
 800675e:	7819      	ldrb	r1, [r3, #0]
 8006760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	4413      	add	r3, r2
 8006766:	3334      	adds	r3, #52	; 0x34
 8006768:	460a      	mov	r2, r1
 800676a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800676c:	68ba      	ldr	r2, [r7, #8]
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	4413      	add	r3, r2
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d006      	beq.n	8006786 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	3301      	adds	r3, #1
 800677c:	61fb      	str	r3, [r7, #28]
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	2b0f      	cmp	r3, #15
 8006782:	d9e9      	bls.n	8006758 <prvInitialiseNewTask+0x64>
 8006784:	e000      	b.n	8006788 <prvInitialiseNewTask+0x94>
			{
				break;
 8006786:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678a:	2200      	movs	r2, #0
 800678c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006790:	e003      	b.n	800679a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006794:	2200      	movs	r2, #0
 8006796:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800679a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679c:	2b37      	cmp	r3, #55	; 0x37
 800679e:	d901      	bls.n	80067a4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80067a0:	2337      	movs	r3, #55	; 0x37
 80067a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80067a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80067aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067ae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80067b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b2:	2200      	movs	r2, #0
 80067b4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80067b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b8:	3304      	adds	r3, #4
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7fe fee3 	bl	8005586 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80067c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c2:	3318      	adds	r3, #24
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7fe fede 	bl	8005586 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80067ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80067d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80067da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80067e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e2:	2200      	movs	r2, #0
 80067e4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80067e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e8:	2200      	movs	r2, #0
 80067ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80067ee:	683a      	ldr	r2, [r7, #0]
 80067f0:	68f9      	ldr	r1, [r7, #12]
 80067f2:	69b8      	ldr	r0, [r7, #24]
 80067f4:	f001 faac 	bl	8007d50 <pxPortInitialiseStack>
 80067f8:	4602      	mov	r2, r0
 80067fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80067fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006800:	2b00      	cmp	r3, #0
 8006802:	d002      	beq.n	800680a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006808:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800680a:	bf00      	nop
 800680c:	3720      	adds	r7, #32
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
	...

08006814 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800681c:	f001 fbc2 	bl	8007fa4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006820:	4b2d      	ldr	r3, [pc, #180]	; (80068d8 <prvAddNewTaskToReadyList+0xc4>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	3301      	adds	r3, #1
 8006826:	4a2c      	ldr	r2, [pc, #176]	; (80068d8 <prvAddNewTaskToReadyList+0xc4>)
 8006828:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800682a:	4b2c      	ldr	r3, [pc, #176]	; (80068dc <prvAddNewTaskToReadyList+0xc8>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d109      	bne.n	8006846 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006832:	4a2a      	ldr	r2, [pc, #168]	; (80068dc <prvAddNewTaskToReadyList+0xc8>)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006838:	4b27      	ldr	r3, [pc, #156]	; (80068d8 <prvAddNewTaskToReadyList+0xc4>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2b01      	cmp	r3, #1
 800683e:	d110      	bne.n	8006862 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006840:	f000 fc8c 	bl	800715c <prvInitialiseTaskLists>
 8006844:	e00d      	b.n	8006862 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006846:	4b26      	ldr	r3, [pc, #152]	; (80068e0 <prvAddNewTaskToReadyList+0xcc>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d109      	bne.n	8006862 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800684e:	4b23      	ldr	r3, [pc, #140]	; (80068dc <prvAddNewTaskToReadyList+0xc8>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006858:	429a      	cmp	r2, r3
 800685a:	d802      	bhi.n	8006862 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800685c:	4a1f      	ldr	r2, [pc, #124]	; (80068dc <prvAddNewTaskToReadyList+0xc8>)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006862:	4b20      	ldr	r3, [pc, #128]	; (80068e4 <prvAddNewTaskToReadyList+0xd0>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	3301      	adds	r3, #1
 8006868:	4a1e      	ldr	r2, [pc, #120]	; (80068e4 <prvAddNewTaskToReadyList+0xd0>)
 800686a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800686c:	4b1d      	ldr	r3, [pc, #116]	; (80068e4 <prvAddNewTaskToReadyList+0xd0>)
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006878:	4b1b      	ldr	r3, [pc, #108]	; (80068e8 <prvAddNewTaskToReadyList+0xd4>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	429a      	cmp	r2, r3
 800687e:	d903      	bls.n	8006888 <prvAddNewTaskToReadyList+0x74>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006884:	4a18      	ldr	r2, [pc, #96]	; (80068e8 <prvAddNewTaskToReadyList+0xd4>)
 8006886:	6013      	str	r3, [r2, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800688c:	4613      	mov	r3, r2
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	4413      	add	r3, r2
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4a15      	ldr	r2, [pc, #84]	; (80068ec <prvAddNewTaskToReadyList+0xd8>)
 8006896:	441a      	add	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	3304      	adds	r3, #4
 800689c:	4619      	mov	r1, r3
 800689e:	4610      	mov	r0, r2
 80068a0:	f7fe fe7e 	bl	80055a0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80068a4:	f001 fbae 	bl	8008004 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80068a8:	4b0d      	ldr	r3, [pc, #52]	; (80068e0 <prvAddNewTaskToReadyList+0xcc>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00e      	beq.n	80068ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80068b0:	4b0a      	ldr	r3, [pc, #40]	; (80068dc <prvAddNewTaskToReadyList+0xc8>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d207      	bcs.n	80068ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80068be:	4b0c      	ldr	r3, [pc, #48]	; (80068f0 <prvAddNewTaskToReadyList+0xdc>)
 80068c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068c4:	601a      	str	r2, [r3, #0]
 80068c6:	f3bf 8f4f 	dsb	sy
 80068ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068ce:	bf00      	nop
 80068d0:	3708      	adds	r7, #8
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	20000d94 	.word	0x20000d94
 80068dc:	200008c0 	.word	0x200008c0
 80068e0:	20000da0 	.word	0x20000da0
 80068e4:	20000db0 	.word	0x20000db0
 80068e8:	20000d9c 	.word	0x20000d9c
 80068ec:	200008c4 	.word	0x200008c4
 80068f0:	e000ed04 	.word	0xe000ed04

080068f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80068fc:	2300      	movs	r3, #0
 80068fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d017      	beq.n	8006936 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006906:	4b13      	ldr	r3, [pc, #76]	; (8006954 <vTaskDelay+0x60>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00a      	beq.n	8006924 <vTaskDelay+0x30>
	__asm volatile
 800690e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006912:	f383 8811 	msr	BASEPRI, r3
 8006916:	f3bf 8f6f 	isb	sy
 800691a:	f3bf 8f4f 	dsb	sy
 800691e:	60bb      	str	r3, [r7, #8]
}
 8006920:	bf00      	nop
 8006922:	e7fe      	b.n	8006922 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006924:	f000 f8f6 	bl	8006b14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006928:	2100      	movs	r1, #0
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 fe6e 	bl	800760c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006930:	f000 f8fe 	bl	8006b30 <xTaskResumeAll>
 8006934:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d107      	bne.n	800694c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800693c:	4b06      	ldr	r3, [pc, #24]	; (8006958 <vTaskDelay+0x64>)
 800693e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006942:	601a      	str	r2, [r3, #0]
 8006944:	f3bf 8f4f 	dsb	sy
 8006948:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800694c:	bf00      	nop
 800694e:	3710      	adds	r7, #16
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	20000dbc 	.word	0x20000dbc
 8006958:	e000ed04 	.word	0xe000ed04

0800695c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006964:	f001 fb1e 	bl	8007fa4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d102      	bne.n	8006974 <vTaskSuspend+0x18>
 800696e:	4b30      	ldr	r3, [pc, #192]	; (8006a30 <vTaskSuspend+0xd4>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	e000      	b.n	8006976 <vTaskSuspend+0x1a>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	3304      	adds	r3, #4
 800697c:	4618      	mov	r0, r3
 800697e:	f7fe fe6c 	bl	800565a <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006986:	2b00      	cmp	r3, #0
 8006988:	d004      	beq.n	8006994 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	3318      	adds	r3, #24
 800698e:	4618      	mov	r0, r3
 8006990:	f7fe fe63 	bl	800565a <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	3304      	adds	r3, #4
 8006998:	4619      	mov	r1, r3
 800699a:	4826      	ldr	r0, [pc, #152]	; (8006a34 <vTaskSuspend+0xd8>)
 800699c:	f7fe fe00 	bl	80055a0 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d103      	bne.n	80069b4 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80069b4:	f001 fb26 	bl	8008004 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80069b8:	4b1f      	ldr	r3, [pc, #124]	; (8006a38 <vTaskSuspend+0xdc>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d005      	beq.n	80069cc <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80069c0:	f001 faf0 	bl	8007fa4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80069c4:	f000 fc68 	bl	8007298 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80069c8:	f001 fb1c 	bl	8008004 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80069cc:	4b18      	ldr	r3, [pc, #96]	; (8006a30 <vTaskSuspend+0xd4>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d127      	bne.n	8006a26 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 80069d6:	4b18      	ldr	r3, [pc, #96]	; (8006a38 <vTaskSuspend+0xdc>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d017      	beq.n	8006a0e <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80069de:	4b17      	ldr	r3, [pc, #92]	; (8006a3c <vTaskSuspend+0xe0>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00a      	beq.n	80069fc <vTaskSuspend+0xa0>
	__asm volatile
 80069e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ea:	f383 8811 	msr	BASEPRI, r3
 80069ee:	f3bf 8f6f 	isb	sy
 80069f2:	f3bf 8f4f 	dsb	sy
 80069f6:	60bb      	str	r3, [r7, #8]
}
 80069f8:	bf00      	nop
 80069fa:	e7fe      	b.n	80069fa <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 80069fc:	4b10      	ldr	r3, [pc, #64]	; (8006a40 <vTaskSuspend+0xe4>)
 80069fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a02:	601a      	str	r2, [r3, #0]
 8006a04:	f3bf 8f4f 	dsb	sy
 8006a08:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a0c:	e00b      	b.n	8006a26 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8006a0e:	4b09      	ldr	r3, [pc, #36]	; (8006a34 <vTaskSuspend+0xd8>)
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	4b0c      	ldr	r3, [pc, #48]	; (8006a44 <vTaskSuspend+0xe8>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d103      	bne.n	8006a22 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8006a1a:	4b05      	ldr	r3, [pc, #20]	; (8006a30 <vTaskSuspend+0xd4>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	601a      	str	r2, [r3, #0]
	}
 8006a20:	e001      	b.n	8006a26 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8006a22:	f000 f9ed 	bl	8006e00 <vTaskSwitchContext>
	}
 8006a26:	bf00      	nop
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	200008c0 	.word	0x200008c0
 8006a34:	20000d80 	.word	0x20000d80
 8006a38:	20000da0 	.word	0x20000da0
 8006a3c:	20000dbc 	.word	0x20000dbc
 8006a40:	e000ed04 	.word	0xe000ed04
 8006a44:	20000d94 	.word	0x20000d94

08006a48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b08a      	sub	sp, #40	; 0x28
 8006a4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a52:	2300      	movs	r3, #0
 8006a54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a56:	463a      	mov	r2, r7
 8006a58:	1d39      	adds	r1, r7, #4
 8006a5a:	f107 0308 	add.w	r3, r7, #8
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7fe fcec 	bl	800543c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006a64:	6839      	ldr	r1, [r7, #0]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	9202      	str	r2, [sp, #8]
 8006a6c:	9301      	str	r3, [sp, #4]
 8006a6e:	2300      	movs	r3, #0
 8006a70:	9300      	str	r3, [sp, #0]
 8006a72:	2300      	movs	r3, #0
 8006a74:	460a      	mov	r2, r1
 8006a76:	4921      	ldr	r1, [pc, #132]	; (8006afc <vTaskStartScheduler+0xb4>)
 8006a78:	4821      	ldr	r0, [pc, #132]	; (8006b00 <vTaskStartScheduler+0xb8>)
 8006a7a:	f7ff fd99 	bl	80065b0 <xTaskCreateStatic>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	4a20      	ldr	r2, [pc, #128]	; (8006b04 <vTaskStartScheduler+0xbc>)
 8006a82:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006a84:	4b1f      	ldr	r3, [pc, #124]	; (8006b04 <vTaskStartScheduler+0xbc>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d002      	beq.n	8006a92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	617b      	str	r3, [r7, #20]
 8006a90:	e001      	b.n	8006a96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006a92:	2300      	movs	r3, #0
 8006a94:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d102      	bne.n	8006aa2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006a9c:	f000 fe0a 	bl	80076b4 <xTimerCreateTimerTask>
 8006aa0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d116      	bne.n	8006ad6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aac:	f383 8811 	msr	BASEPRI, r3
 8006ab0:	f3bf 8f6f 	isb	sy
 8006ab4:	f3bf 8f4f 	dsb	sy
 8006ab8:	613b      	str	r3, [r7, #16]
}
 8006aba:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006abc:	4b12      	ldr	r3, [pc, #72]	; (8006b08 <vTaskStartScheduler+0xc0>)
 8006abe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ac2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006ac4:	4b11      	ldr	r3, [pc, #68]	; (8006b0c <vTaskStartScheduler+0xc4>)
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006aca:	4b11      	ldr	r3, [pc, #68]	; (8006b10 <vTaskStartScheduler+0xc8>)
 8006acc:	2200      	movs	r2, #0
 8006ace:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006ad0:	f001 f9c6 	bl	8007e60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006ad4:	e00e      	b.n	8006af4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006adc:	d10a      	bne.n	8006af4 <vTaskStartScheduler+0xac>
	__asm volatile
 8006ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae2:	f383 8811 	msr	BASEPRI, r3
 8006ae6:	f3bf 8f6f 	isb	sy
 8006aea:	f3bf 8f4f 	dsb	sy
 8006aee:	60fb      	str	r3, [r7, #12]
}
 8006af0:	bf00      	nop
 8006af2:	e7fe      	b.n	8006af2 <vTaskStartScheduler+0xaa>
}
 8006af4:	bf00      	nop
 8006af6:	3718      	adds	r7, #24
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	0800ba7c 	.word	0x0800ba7c
 8006b00:	0800712d 	.word	0x0800712d
 8006b04:	20000db8 	.word	0x20000db8
 8006b08:	20000db4 	.word	0x20000db4
 8006b0c:	20000da0 	.word	0x20000da0
 8006b10:	20000d98 	.word	0x20000d98

08006b14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006b14:	b480      	push	{r7}
 8006b16:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006b18:	4b04      	ldr	r3, [pc, #16]	; (8006b2c <vTaskSuspendAll+0x18>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	4a03      	ldr	r2, [pc, #12]	; (8006b2c <vTaskSuspendAll+0x18>)
 8006b20:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006b22:	bf00      	nop
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr
 8006b2c:	20000dbc 	.word	0x20000dbc

08006b30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006b36:	2300      	movs	r3, #0
 8006b38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006b3e:	4b42      	ldr	r3, [pc, #264]	; (8006c48 <xTaskResumeAll+0x118>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10a      	bne.n	8006b5c <xTaskResumeAll+0x2c>
	__asm volatile
 8006b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4a:	f383 8811 	msr	BASEPRI, r3
 8006b4e:	f3bf 8f6f 	isb	sy
 8006b52:	f3bf 8f4f 	dsb	sy
 8006b56:	603b      	str	r3, [r7, #0]
}
 8006b58:	bf00      	nop
 8006b5a:	e7fe      	b.n	8006b5a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006b5c:	f001 fa22 	bl	8007fa4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006b60:	4b39      	ldr	r3, [pc, #228]	; (8006c48 <xTaskResumeAll+0x118>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	3b01      	subs	r3, #1
 8006b66:	4a38      	ldr	r2, [pc, #224]	; (8006c48 <xTaskResumeAll+0x118>)
 8006b68:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b6a:	4b37      	ldr	r3, [pc, #220]	; (8006c48 <xTaskResumeAll+0x118>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d162      	bne.n	8006c38 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b72:	4b36      	ldr	r3, [pc, #216]	; (8006c4c <xTaskResumeAll+0x11c>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d05e      	beq.n	8006c38 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b7a:	e02f      	b.n	8006bdc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b7c:	4b34      	ldr	r3, [pc, #208]	; (8006c50 <xTaskResumeAll+0x120>)
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	3318      	adds	r3, #24
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7fe fd66 	bl	800565a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	3304      	adds	r3, #4
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7fe fd61 	bl	800565a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b9c:	4b2d      	ldr	r3, [pc, #180]	; (8006c54 <xTaskResumeAll+0x124>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d903      	bls.n	8006bac <xTaskResumeAll+0x7c>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba8:	4a2a      	ldr	r2, [pc, #168]	; (8006c54 <xTaskResumeAll+0x124>)
 8006baa:	6013      	str	r3, [r2, #0]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	4413      	add	r3, r2
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	4a27      	ldr	r2, [pc, #156]	; (8006c58 <xTaskResumeAll+0x128>)
 8006bba:	441a      	add	r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	3304      	adds	r3, #4
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	4610      	mov	r0, r2
 8006bc4:	f7fe fcec 	bl	80055a0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bcc:	4b23      	ldr	r3, [pc, #140]	; (8006c5c <xTaskResumeAll+0x12c>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d302      	bcc.n	8006bdc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006bd6:	4b22      	ldr	r3, [pc, #136]	; (8006c60 <xTaskResumeAll+0x130>)
 8006bd8:	2201      	movs	r2, #1
 8006bda:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bdc:	4b1c      	ldr	r3, [pc, #112]	; (8006c50 <xTaskResumeAll+0x120>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d1cb      	bne.n	8006b7c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d001      	beq.n	8006bee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006bea:	f000 fb55 	bl	8007298 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006bee:	4b1d      	ldr	r3, [pc, #116]	; (8006c64 <xTaskResumeAll+0x134>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d010      	beq.n	8006c1c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006bfa:	f000 f847 	bl	8006c8c <xTaskIncrementTick>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d002      	beq.n	8006c0a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006c04:	4b16      	ldr	r3, [pc, #88]	; (8006c60 <xTaskResumeAll+0x130>)
 8006c06:	2201      	movs	r2, #1
 8006c08:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1f1      	bne.n	8006bfa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006c16:	4b13      	ldr	r3, [pc, #76]	; (8006c64 <xTaskResumeAll+0x134>)
 8006c18:	2200      	movs	r2, #0
 8006c1a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006c1c:	4b10      	ldr	r3, [pc, #64]	; (8006c60 <xTaskResumeAll+0x130>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d009      	beq.n	8006c38 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006c24:	2301      	movs	r3, #1
 8006c26:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006c28:	4b0f      	ldr	r3, [pc, #60]	; (8006c68 <xTaskResumeAll+0x138>)
 8006c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c2e:	601a      	str	r2, [r3, #0]
 8006c30:	f3bf 8f4f 	dsb	sy
 8006c34:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c38:	f001 f9e4 	bl	8008004 <vPortExitCritical>

	return xAlreadyYielded;
 8006c3c:	68bb      	ldr	r3, [r7, #8]
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3710      	adds	r7, #16
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	20000dbc 	.word	0x20000dbc
 8006c4c:	20000d94 	.word	0x20000d94
 8006c50:	20000d54 	.word	0x20000d54
 8006c54:	20000d9c 	.word	0x20000d9c
 8006c58:	200008c4 	.word	0x200008c4
 8006c5c:	200008c0 	.word	0x200008c0
 8006c60:	20000da8 	.word	0x20000da8
 8006c64:	20000da4 	.word	0x20000da4
 8006c68:	e000ed04 	.word	0xe000ed04

08006c6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006c72:	4b05      	ldr	r3, [pc, #20]	; (8006c88 <xTaskGetTickCount+0x1c>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006c78:	687b      	ldr	r3, [r7, #4]
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	370c      	adds	r7, #12
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop
 8006c88:	20000d98 	.word	0x20000d98

08006c8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b086      	sub	sp, #24
 8006c90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006c92:	2300      	movs	r3, #0
 8006c94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c96:	4b4f      	ldr	r3, [pc, #316]	; (8006dd4 <xTaskIncrementTick+0x148>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	f040 808f 	bne.w	8006dbe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ca0:	4b4d      	ldr	r3, [pc, #308]	; (8006dd8 <xTaskIncrementTick+0x14c>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ca8:	4a4b      	ldr	r2, [pc, #300]	; (8006dd8 <xTaskIncrementTick+0x14c>)
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d120      	bne.n	8006cf6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006cb4:	4b49      	ldr	r3, [pc, #292]	; (8006ddc <xTaskIncrementTick+0x150>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00a      	beq.n	8006cd4 <xTaskIncrementTick+0x48>
	__asm volatile
 8006cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc2:	f383 8811 	msr	BASEPRI, r3
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	603b      	str	r3, [r7, #0]
}
 8006cd0:	bf00      	nop
 8006cd2:	e7fe      	b.n	8006cd2 <xTaskIncrementTick+0x46>
 8006cd4:	4b41      	ldr	r3, [pc, #260]	; (8006ddc <xTaskIncrementTick+0x150>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	60fb      	str	r3, [r7, #12]
 8006cda:	4b41      	ldr	r3, [pc, #260]	; (8006de0 <xTaskIncrementTick+0x154>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a3f      	ldr	r2, [pc, #252]	; (8006ddc <xTaskIncrementTick+0x150>)
 8006ce0:	6013      	str	r3, [r2, #0]
 8006ce2:	4a3f      	ldr	r2, [pc, #252]	; (8006de0 <xTaskIncrementTick+0x154>)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6013      	str	r3, [r2, #0]
 8006ce8:	4b3e      	ldr	r3, [pc, #248]	; (8006de4 <xTaskIncrementTick+0x158>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	3301      	adds	r3, #1
 8006cee:	4a3d      	ldr	r2, [pc, #244]	; (8006de4 <xTaskIncrementTick+0x158>)
 8006cf0:	6013      	str	r3, [r2, #0]
 8006cf2:	f000 fad1 	bl	8007298 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006cf6:	4b3c      	ldr	r3, [pc, #240]	; (8006de8 <xTaskIncrementTick+0x15c>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	693a      	ldr	r2, [r7, #16]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d349      	bcc.n	8006d94 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d00:	4b36      	ldr	r3, [pc, #216]	; (8006ddc <xTaskIncrementTick+0x150>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d104      	bne.n	8006d14 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d0a:	4b37      	ldr	r3, [pc, #220]	; (8006de8 <xTaskIncrementTick+0x15c>)
 8006d0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d10:	601a      	str	r2, [r3, #0]
					break;
 8006d12:	e03f      	b.n	8006d94 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d14:	4b31      	ldr	r3, [pc, #196]	; (8006ddc <xTaskIncrementTick+0x150>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006d24:	693a      	ldr	r2, [r7, #16]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d203      	bcs.n	8006d34 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006d2c:	4a2e      	ldr	r2, [pc, #184]	; (8006de8 <xTaskIncrementTick+0x15c>)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006d32:	e02f      	b.n	8006d94 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	3304      	adds	r3, #4
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7fe fc8e 	bl	800565a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d004      	beq.n	8006d50 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	3318      	adds	r3, #24
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7fe fc85 	bl	800565a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d54:	4b25      	ldr	r3, [pc, #148]	; (8006dec <xTaskIncrementTick+0x160>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d903      	bls.n	8006d64 <xTaskIncrementTick+0xd8>
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d60:	4a22      	ldr	r2, [pc, #136]	; (8006dec <xTaskIncrementTick+0x160>)
 8006d62:	6013      	str	r3, [r2, #0]
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d68:	4613      	mov	r3, r2
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	4413      	add	r3, r2
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	4a1f      	ldr	r2, [pc, #124]	; (8006df0 <xTaskIncrementTick+0x164>)
 8006d72:	441a      	add	r2, r3
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	3304      	adds	r3, #4
 8006d78:	4619      	mov	r1, r3
 8006d7a:	4610      	mov	r0, r2
 8006d7c:	f7fe fc10 	bl	80055a0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d84:	4b1b      	ldr	r3, [pc, #108]	; (8006df4 <xTaskIncrementTick+0x168>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d3b8      	bcc.n	8006d00 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d92:	e7b5      	b.n	8006d00 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006d94:	4b17      	ldr	r3, [pc, #92]	; (8006df4 <xTaskIncrementTick+0x168>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d9a:	4915      	ldr	r1, [pc, #84]	; (8006df0 <xTaskIncrementTick+0x164>)
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	4413      	add	r3, r2
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	440b      	add	r3, r1
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d901      	bls.n	8006db0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006dac:	2301      	movs	r3, #1
 8006dae:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006db0:	4b11      	ldr	r3, [pc, #68]	; (8006df8 <xTaskIncrementTick+0x16c>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d007      	beq.n	8006dc8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006db8:	2301      	movs	r3, #1
 8006dba:	617b      	str	r3, [r7, #20]
 8006dbc:	e004      	b.n	8006dc8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006dbe:	4b0f      	ldr	r3, [pc, #60]	; (8006dfc <xTaskIncrementTick+0x170>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	4a0d      	ldr	r2, [pc, #52]	; (8006dfc <xTaskIncrementTick+0x170>)
 8006dc6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006dc8:	697b      	ldr	r3, [r7, #20]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3718      	adds	r7, #24
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	20000dbc 	.word	0x20000dbc
 8006dd8:	20000d98 	.word	0x20000d98
 8006ddc:	20000d4c 	.word	0x20000d4c
 8006de0:	20000d50 	.word	0x20000d50
 8006de4:	20000dac 	.word	0x20000dac
 8006de8:	20000db4 	.word	0x20000db4
 8006dec:	20000d9c 	.word	0x20000d9c
 8006df0:	200008c4 	.word	0x200008c4
 8006df4:	200008c0 	.word	0x200008c0
 8006df8:	20000da8 	.word	0x20000da8
 8006dfc:	20000da4 	.word	0x20000da4

08006e00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006e06:	4b28      	ldr	r3, [pc, #160]	; (8006ea8 <vTaskSwitchContext+0xa8>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d003      	beq.n	8006e16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006e0e:	4b27      	ldr	r3, [pc, #156]	; (8006eac <vTaskSwitchContext+0xac>)
 8006e10:	2201      	movs	r2, #1
 8006e12:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006e14:	e041      	b.n	8006e9a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006e16:	4b25      	ldr	r3, [pc, #148]	; (8006eac <vTaskSwitchContext+0xac>)
 8006e18:	2200      	movs	r2, #0
 8006e1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e1c:	4b24      	ldr	r3, [pc, #144]	; (8006eb0 <vTaskSwitchContext+0xb0>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	60fb      	str	r3, [r7, #12]
 8006e22:	e010      	b.n	8006e46 <vTaskSwitchContext+0x46>
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d10a      	bne.n	8006e40 <vTaskSwitchContext+0x40>
	__asm volatile
 8006e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2e:	f383 8811 	msr	BASEPRI, r3
 8006e32:	f3bf 8f6f 	isb	sy
 8006e36:	f3bf 8f4f 	dsb	sy
 8006e3a:	607b      	str	r3, [r7, #4]
}
 8006e3c:	bf00      	nop
 8006e3e:	e7fe      	b.n	8006e3e <vTaskSwitchContext+0x3e>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	3b01      	subs	r3, #1
 8006e44:	60fb      	str	r3, [r7, #12]
 8006e46:	491b      	ldr	r1, [pc, #108]	; (8006eb4 <vTaskSwitchContext+0xb4>)
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	4413      	add	r3, r2
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	440b      	add	r3, r1
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d0e4      	beq.n	8006e24 <vTaskSwitchContext+0x24>
 8006e5a:	68fa      	ldr	r2, [r7, #12]
 8006e5c:	4613      	mov	r3, r2
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	4413      	add	r3, r2
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	4a13      	ldr	r2, [pc, #76]	; (8006eb4 <vTaskSwitchContext+0xb4>)
 8006e66:	4413      	add	r3, r2
 8006e68:	60bb      	str	r3, [r7, #8]
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	685a      	ldr	r2, [r3, #4]
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	605a      	str	r2, [r3, #4]
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	685a      	ldr	r2, [r3, #4]
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	3308      	adds	r3, #8
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d104      	bne.n	8006e8a <vTaskSwitchContext+0x8a>
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	685a      	ldr	r2, [r3, #4]
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	605a      	str	r2, [r3, #4]
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	4a09      	ldr	r2, [pc, #36]	; (8006eb8 <vTaskSwitchContext+0xb8>)
 8006e92:	6013      	str	r3, [r2, #0]
 8006e94:	4a06      	ldr	r2, [pc, #24]	; (8006eb0 <vTaskSwitchContext+0xb0>)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6013      	str	r3, [r2, #0]
}
 8006e9a:	bf00      	nop
 8006e9c:	3714      	adds	r7, #20
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	20000dbc 	.word	0x20000dbc
 8006eac:	20000da8 	.word	0x20000da8
 8006eb0:	20000d9c 	.word	0x20000d9c
 8006eb4:	200008c4 	.word	0x200008c4
 8006eb8:	200008c0 	.word	0x200008c0

08006ebc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d10a      	bne.n	8006ee2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed0:	f383 8811 	msr	BASEPRI, r3
 8006ed4:	f3bf 8f6f 	isb	sy
 8006ed8:	f3bf 8f4f 	dsb	sy
 8006edc:	60fb      	str	r3, [r7, #12]
}
 8006ede:	bf00      	nop
 8006ee0:	e7fe      	b.n	8006ee0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ee2:	4b07      	ldr	r3, [pc, #28]	; (8006f00 <vTaskPlaceOnEventList+0x44>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	3318      	adds	r3, #24
 8006ee8:	4619      	mov	r1, r3
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f7fe fb7c 	bl	80055e8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ef0:	2101      	movs	r1, #1
 8006ef2:	6838      	ldr	r0, [r7, #0]
 8006ef4:	f000 fb8a 	bl	800760c <prvAddCurrentTaskToDelayedList>
}
 8006ef8:	bf00      	nop
 8006efa:	3710      	adds	r7, #16
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	200008c0 	.word	0x200008c0

08006f04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b086      	sub	sp, #24
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d10a      	bne.n	8006f2c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1a:	f383 8811 	msr	BASEPRI, r3
 8006f1e:	f3bf 8f6f 	isb	sy
 8006f22:	f3bf 8f4f 	dsb	sy
 8006f26:	617b      	str	r3, [r7, #20]
}
 8006f28:	bf00      	nop
 8006f2a:	e7fe      	b.n	8006f2a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f2c:	4b0a      	ldr	r3, [pc, #40]	; (8006f58 <vTaskPlaceOnEventListRestricted+0x54>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	3318      	adds	r3, #24
 8006f32:	4619      	mov	r1, r3
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	f7fe fb33 	bl	80055a0 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d002      	beq.n	8006f46 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006f40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f44:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006f46:	6879      	ldr	r1, [r7, #4]
 8006f48:	68b8      	ldr	r0, [r7, #8]
 8006f4a:	f000 fb5f 	bl	800760c <prvAddCurrentTaskToDelayedList>
	}
 8006f4e:	bf00      	nop
 8006f50:	3718      	adds	r7, #24
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	200008c0 	.word	0x200008c0

08006f5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b086      	sub	sp, #24
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d10a      	bne.n	8006f88 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f76:	f383 8811 	msr	BASEPRI, r3
 8006f7a:	f3bf 8f6f 	isb	sy
 8006f7e:	f3bf 8f4f 	dsb	sy
 8006f82:	60fb      	str	r3, [r7, #12]
}
 8006f84:	bf00      	nop
 8006f86:	e7fe      	b.n	8006f86 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	3318      	adds	r3, #24
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7fe fb64 	bl	800565a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f92:	4b1e      	ldr	r3, [pc, #120]	; (800700c <xTaskRemoveFromEventList+0xb0>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d11d      	bne.n	8006fd6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	3304      	adds	r3, #4
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7fe fb5b 	bl	800565a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa8:	4b19      	ldr	r3, [pc, #100]	; (8007010 <xTaskRemoveFromEventList+0xb4>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d903      	bls.n	8006fb8 <xTaskRemoveFromEventList+0x5c>
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb4:	4a16      	ldr	r2, [pc, #88]	; (8007010 <xTaskRemoveFromEventList+0xb4>)
 8006fb6:	6013      	str	r3, [r2, #0]
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	4413      	add	r3, r2
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	4a13      	ldr	r2, [pc, #76]	; (8007014 <xTaskRemoveFromEventList+0xb8>)
 8006fc6:	441a      	add	r2, r3
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	3304      	adds	r3, #4
 8006fcc:	4619      	mov	r1, r3
 8006fce:	4610      	mov	r0, r2
 8006fd0:	f7fe fae6 	bl	80055a0 <vListInsertEnd>
 8006fd4:	e005      	b.n	8006fe2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	3318      	adds	r3, #24
 8006fda:	4619      	mov	r1, r3
 8006fdc:	480e      	ldr	r0, [pc, #56]	; (8007018 <xTaskRemoveFromEventList+0xbc>)
 8006fde:	f7fe fadf 	bl	80055a0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fe6:	4b0d      	ldr	r3, [pc, #52]	; (800701c <xTaskRemoveFromEventList+0xc0>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d905      	bls.n	8006ffc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006ff4:	4b0a      	ldr	r3, [pc, #40]	; (8007020 <xTaskRemoveFromEventList+0xc4>)
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	601a      	str	r2, [r3, #0]
 8006ffa:	e001      	b.n	8007000 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007000:	697b      	ldr	r3, [r7, #20]
}
 8007002:	4618      	mov	r0, r3
 8007004:	3718      	adds	r7, #24
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	20000dbc 	.word	0x20000dbc
 8007010:	20000d9c 	.word	0x20000d9c
 8007014:	200008c4 	.word	0x200008c4
 8007018:	20000d54 	.word	0x20000d54
 800701c:	200008c0 	.word	0x200008c0
 8007020:	20000da8 	.word	0x20000da8

08007024 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800702c:	4b06      	ldr	r3, [pc, #24]	; (8007048 <vTaskInternalSetTimeOutState+0x24>)
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007034:	4b05      	ldr	r3, [pc, #20]	; (800704c <vTaskInternalSetTimeOutState+0x28>)
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	605a      	str	r2, [r3, #4]
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr
 8007048:	20000dac 	.word	0x20000dac
 800704c:	20000d98 	.word	0x20000d98

08007050 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b088      	sub	sp, #32
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d10a      	bne.n	8007076 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007064:	f383 8811 	msr	BASEPRI, r3
 8007068:	f3bf 8f6f 	isb	sy
 800706c:	f3bf 8f4f 	dsb	sy
 8007070:	613b      	str	r3, [r7, #16]
}
 8007072:	bf00      	nop
 8007074:	e7fe      	b.n	8007074 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d10a      	bne.n	8007092 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800707c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007080:	f383 8811 	msr	BASEPRI, r3
 8007084:	f3bf 8f6f 	isb	sy
 8007088:	f3bf 8f4f 	dsb	sy
 800708c:	60fb      	str	r3, [r7, #12]
}
 800708e:	bf00      	nop
 8007090:	e7fe      	b.n	8007090 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007092:	f000 ff87 	bl	8007fa4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007096:	4b1d      	ldr	r3, [pc, #116]	; (800710c <xTaskCheckForTimeOut+0xbc>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	69ba      	ldr	r2, [r7, #24]
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070ae:	d102      	bne.n	80070b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80070b0:	2300      	movs	r3, #0
 80070b2:	61fb      	str	r3, [r7, #28]
 80070b4:	e023      	b.n	80070fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	4b15      	ldr	r3, [pc, #84]	; (8007110 <xTaskCheckForTimeOut+0xc0>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d007      	beq.n	80070d2 <xTaskCheckForTimeOut+0x82>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	69ba      	ldr	r2, [r7, #24]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d302      	bcc.n	80070d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80070cc:	2301      	movs	r3, #1
 80070ce:	61fb      	str	r3, [r7, #28]
 80070d0:	e015      	b.n	80070fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	697a      	ldr	r2, [r7, #20]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d20b      	bcs.n	80070f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	1ad2      	subs	r2, r2, r3
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f7ff ff9b 	bl	8007024 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80070ee:	2300      	movs	r3, #0
 80070f0:	61fb      	str	r3, [r7, #28]
 80070f2:	e004      	b.n	80070fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	2200      	movs	r2, #0
 80070f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80070fa:	2301      	movs	r3, #1
 80070fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80070fe:	f000 ff81 	bl	8008004 <vPortExitCritical>

	return xReturn;
 8007102:	69fb      	ldr	r3, [r7, #28]
}
 8007104:	4618      	mov	r0, r3
 8007106:	3720      	adds	r7, #32
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	20000d98 	.word	0x20000d98
 8007110:	20000dac 	.word	0x20000dac

08007114 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007114:	b480      	push	{r7}
 8007116:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007118:	4b03      	ldr	r3, [pc, #12]	; (8007128 <vTaskMissedYield+0x14>)
 800711a:	2201      	movs	r2, #1
 800711c:	601a      	str	r2, [r3, #0]
}
 800711e:	bf00      	nop
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr
 8007128:	20000da8 	.word	0x20000da8

0800712c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007134:	f000 f852 	bl	80071dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007138:	4b06      	ldr	r3, [pc, #24]	; (8007154 <prvIdleTask+0x28>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d9f9      	bls.n	8007134 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007140:	4b05      	ldr	r3, [pc, #20]	; (8007158 <prvIdleTask+0x2c>)
 8007142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007146:	601a      	str	r2, [r3, #0]
 8007148:	f3bf 8f4f 	dsb	sy
 800714c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007150:	e7f0      	b.n	8007134 <prvIdleTask+0x8>
 8007152:	bf00      	nop
 8007154:	200008c4 	.word	0x200008c4
 8007158:	e000ed04 	.word	0xe000ed04

0800715c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007162:	2300      	movs	r3, #0
 8007164:	607b      	str	r3, [r7, #4]
 8007166:	e00c      	b.n	8007182 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	4613      	mov	r3, r2
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	4413      	add	r3, r2
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	4a12      	ldr	r2, [pc, #72]	; (80071bc <prvInitialiseTaskLists+0x60>)
 8007174:	4413      	add	r3, r2
 8007176:	4618      	mov	r0, r3
 8007178:	f7fe f9e5 	bl	8005546 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	3301      	adds	r3, #1
 8007180:	607b      	str	r3, [r7, #4]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2b37      	cmp	r3, #55	; 0x37
 8007186:	d9ef      	bls.n	8007168 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007188:	480d      	ldr	r0, [pc, #52]	; (80071c0 <prvInitialiseTaskLists+0x64>)
 800718a:	f7fe f9dc 	bl	8005546 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800718e:	480d      	ldr	r0, [pc, #52]	; (80071c4 <prvInitialiseTaskLists+0x68>)
 8007190:	f7fe f9d9 	bl	8005546 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007194:	480c      	ldr	r0, [pc, #48]	; (80071c8 <prvInitialiseTaskLists+0x6c>)
 8007196:	f7fe f9d6 	bl	8005546 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800719a:	480c      	ldr	r0, [pc, #48]	; (80071cc <prvInitialiseTaskLists+0x70>)
 800719c:	f7fe f9d3 	bl	8005546 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80071a0:	480b      	ldr	r0, [pc, #44]	; (80071d0 <prvInitialiseTaskLists+0x74>)
 80071a2:	f7fe f9d0 	bl	8005546 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80071a6:	4b0b      	ldr	r3, [pc, #44]	; (80071d4 <prvInitialiseTaskLists+0x78>)
 80071a8:	4a05      	ldr	r2, [pc, #20]	; (80071c0 <prvInitialiseTaskLists+0x64>)
 80071aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80071ac:	4b0a      	ldr	r3, [pc, #40]	; (80071d8 <prvInitialiseTaskLists+0x7c>)
 80071ae:	4a05      	ldr	r2, [pc, #20]	; (80071c4 <prvInitialiseTaskLists+0x68>)
 80071b0:	601a      	str	r2, [r3, #0]
}
 80071b2:	bf00      	nop
 80071b4:	3708      	adds	r7, #8
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	200008c4 	.word	0x200008c4
 80071c0:	20000d24 	.word	0x20000d24
 80071c4:	20000d38 	.word	0x20000d38
 80071c8:	20000d54 	.word	0x20000d54
 80071cc:	20000d68 	.word	0x20000d68
 80071d0:	20000d80 	.word	0x20000d80
 80071d4:	20000d4c 	.word	0x20000d4c
 80071d8:	20000d50 	.word	0x20000d50

080071dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071e2:	e019      	b.n	8007218 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80071e4:	f000 fede 	bl	8007fa4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071e8:	4b10      	ldr	r3, [pc, #64]	; (800722c <prvCheckTasksWaitingTermination+0x50>)
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	3304      	adds	r3, #4
 80071f4:	4618      	mov	r0, r3
 80071f6:	f7fe fa30 	bl	800565a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80071fa:	4b0d      	ldr	r3, [pc, #52]	; (8007230 <prvCheckTasksWaitingTermination+0x54>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	3b01      	subs	r3, #1
 8007200:	4a0b      	ldr	r2, [pc, #44]	; (8007230 <prvCheckTasksWaitingTermination+0x54>)
 8007202:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007204:	4b0b      	ldr	r3, [pc, #44]	; (8007234 <prvCheckTasksWaitingTermination+0x58>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	3b01      	subs	r3, #1
 800720a:	4a0a      	ldr	r2, [pc, #40]	; (8007234 <prvCheckTasksWaitingTermination+0x58>)
 800720c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800720e:	f000 fef9 	bl	8008004 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f810 	bl	8007238 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007218:	4b06      	ldr	r3, [pc, #24]	; (8007234 <prvCheckTasksWaitingTermination+0x58>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1e1      	bne.n	80071e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007220:	bf00      	nop
 8007222:	bf00      	nop
 8007224:	3708      	adds	r7, #8
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	20000d68 	.word	0x20000d68
 8007230:	20000d94 	.word	0x20000d94
 8007234:	20000d7c 	.word	0x20000d7c

08007238 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007246:	2b00      	cmp	r3, #0
 8007248:	d108      	bne.n	800725c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800724e:	4618      	mov	r0, r3
 8007250:	f001 f896 	bl	8008380 <vPortFree>
				vPortFree( pxTCB );
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f001 f893 	bl	8008380 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800725a:	e018      	b.n	800728e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007262:	2b01      	cmp	r3, #1
 8007264:	d103      	bne.n	800726e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f001 f88a 	bl	8008380 <vPortFree>
	}
 800726c:	e00f      	b.n	800728e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007274:	2b02      	cmp	r3, #2
 8007276:	d00a      	beq.n	800728e <prvDeleteTCB+0x56>
	__asm volatile
 8007278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727c:	f383 8811 	msr	BASEPRI, r3
 8007280:	f3bf 8f6f 	isb	sy
 8007284:	f3bf 8f4f 	dsb	sy
 8007288:	60fb      	str	r3, [r7, #12]
}
 800728a:	bf00      	nop
 800728c:	e7fe      	b.n	800728c <prvDeleteTCB+0x54>
	}
 800728e:	bf00      	nop
 8007290:	3710      	adds	r7, #16
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
	...

08007298 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800729e:	4b0c      	ldr	r3, [pc, #48]	; (80072d0 <prvResetNextTaskUnblockTime+0x38>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d104      	bne.n	80072b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80072a8:	4b0a      	ldr	r3, [pc, #40]	; (80072d4 <prvResetNextTaskUnblockTime+0x3c>)
 80072aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80072b0:	e008      	b.n	80072c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072b2:	4b07      	ldr	r3, [pc, #28]	; (80072d0 <prvResetNextTaskUnblockTime+0x38>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	4a04      	ldr	r2, [pc, #16]	; (80072d4 <prvResetNextTaskUnblockTime+0x3c>)
 80072c2:	6013      	str	r3, [r2, #0]
}
 80072c4:	bf00      	nop
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr
 80072d0:	20000d4c 	.word	0x20000d4c
 80072d4:	20000db4 	.word	0x20000db4

080072d8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80072de:	4b05      	ldr	r3, [pc, #20]	; (80072f4 <xTaskGetCurrentTaskHandle+0x1c>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	607b      	str	r3, [r7, #4]

		return xReturn;
 80072e4:	687b      	ldr	r3, [r7, #4]
	}
 80072e6:	4618      	mov	r0, r3
 80072e8:	370c      	adds	r7, #12
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	200008c0 	.word	0x200008c0

080072f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80072fe:	4b0b      	ldr	r3, [pc, #44]	; (800732c <xTaskGetSchedulerState+0x34>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d102      	bne.n	800730c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007306:	2301      	movs	r3, #1
 8007308:	607b      	str	r3, [r7, #4]
 800730a:	e008      	b.n	800731e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800730c:	4b08      	ldr	r3, [pc, #32]	; (8007330 <xTaskGetSchedulerState+0x38>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d102      	bne.n	800731a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007314:	2302      	movs	r3, #2
 8007316:	607b      	str	r3, [r7, #4]
 8007318:	e001      	b.n	800731e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800731a:	2300      	movs	r3, #0
 800731c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800731e:	687b      	ldr	r3, [r7, #4]
	}
 8007320:	4618      	mov	r0, r3
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr
 800732c:	20000da0 	.word	0x20000da0
 8007330:	20000dbc 	.word	0x20000dbc

08007334 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007340:	2300      	movs	r3, #0
 8007342:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d051      	beq.n	80073ee <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800734e:	4b2a      	ldr	r3, [pc, #168]	; (80073f8 <xTaskPriorityInherit+0xc4>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007354:	429a      	cmp	r2, r3
 8007356:	d241      	bcs.n	80073dc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	699b      	ldr	r3, [r3, #24]
 800735c:	2b00      	cmp	r3, #0
 800735e:	db06      	blt.n	800736e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007360:	4b25      	ldr	r3, [pc, #148]	; (80073f8 <xTaskPriorityInherit+0xc4>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007366:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	6959      	ldr	r1, [r3, #20]
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007376:	4613      	mov	r3, r2
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	4413      	add	r3, r2
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	4a1f      	ldr	r2, [pc, #124]	; (80073fc <xTaskPriorityInherit+0xc8>)
 8007380:	4413      	add	r3, r2
 8007382:	4299      	cmp	r1, r3
 8007384:	d122      	bne.n	80073cc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	3304      	adds	r3, #4
 800738a:	4618      	mov	r0, r3
 800738c:	f7fe f965 	bl	800565a <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007390:	4b19      	ldr	r3, [pc, #100]	; (80073f8 <xTaskPriorityInherit+0xc4>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800739e:	4b18      	ldr	r3, [pc, #96]	; (8007400 <xTaskPriorityInherit+0xcc>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d903      	bls.n	80073ae <xTaskPriorityInherit+0x7a>
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073aa:	4a15      	ldr	r2, [pc, #84]	; (8007400 <xTaskPriorityInherit+0xcc>)
 80073ac:	6013      	str	r3, [r2, #0]
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073b2:	4613      	mov	r3, r2
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	4413      	add	r3, r2
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	4a10      	ldr	r2, [pc, #64]	; (80073fc <xTaskPriorityInherit+0xc8>)
 80073bc:	441a      	add	r2, r3
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	3304      	adds	r3, #4
 80073c2:	4619      	mov	r1, r3
 80073c4:	4610      	mov	r0, r2
 80073c6:	f7fe f8eb 	bl	80055a0 <vListInsertEnd>
 80073ca:	e004      	b.n	80073d6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80073cc:	4b0a      	ldr	r3, [pc, #40]	; (80073f8 <xTaskPriorityInherit+0xc4>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80073d6:	2301      	movs	r3, #1
 80073d8:	60fb      	str	r3, [r7, #12]
 80073da:	e008      	b.n	80073ee <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073e0:	4b05      	ldr	r3, [pc, #20]	; (80073f8 <xTaskPriorityInherit+0xc4>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d201      	bcs.n	80073ee <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80073ea:	2301      	movs	r3, #1
 80073ec:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80073ee:	68fb      	ldr	r3, [r7, #12]
	}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3710      	adds	r7, #16
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}
 80073f8:	200008c0 	.word	0x200008c0
 80073fc:	200008c4 	.word	0x200008c4
 8007400:	20000d9c 	.word	0x20000d9c

08007404 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007404:	b580      	push	{r7, lr}
 8007406:	b086      	sub	sp, #24
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007410:	2300      	movs	r3, #0
 8007412:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d056      	beq.n	80074c8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800741a:	4b2e      	ldr	r3, [pc, #184]	; (80074d4 <xTaskPriorityDisinherit+0xd0>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	693a      	ldr	r2, [r7, #16]
 8007420:	429a      	cmp	r2, r3
 8007422:	d00a      	beq.n	800743a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007428:	f383 8811 	msr	BASEPRI, r3
 800742c:	f3bf 8f6f 	isb	sy
 8007430:	f3bf 8f4f 	dsb	sy
 8007434:	60fb      	str	r3, [r7, #12]
}
 8007436:	bf00      	nop
 8007438:	e7fe      	b.n	8007438 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10a      	bne.n	8007458 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007446:	f383 8811 	msr	BASEPRI, r3
 800744a:	f3bf 8f6f 	isb	sy
 800744e:	f3bf 8f4f 	dsb	sy
 8007452:	60bb      	str	r3, [r7, #8]
}
 8007454:	bf00      	nop
 8007456:	e7fe      	b.n	8007456 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800745c:	1e5a      	subs	r2, r3, #1
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800746a:	429a      	cmp	r2, r3
 800746c:	d02c      	beq.n	80074c8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007472:	2b00      	cmp	r3, #0
 8007474:	d128      	bne.n	80074c8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	3304      	adds	r3, #4
 800747a:	4618      	mov	r0, r3
 800747c:	f7fe f8ed 	bl	800565a <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007498:	4b0f      	ldr	r3, [pc, #60]	; (80074d8 <xTaskPriorityDisinherit+0xd4>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	429a      	cmp	r2, r3
 800749e:	d903      	bls.n	80074a8 <xTaskPriorityDisinherit+0xa4>
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a4:	4a0c      	ldr	r2, [pc, #48]	; (80074d8 <xTaskPriorityDisinherit+0xd4>)
 80074a6:	6013      	str	r3, [r2, #0]
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ac:	4613      	mov	r3, r2
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	4413      	add	r3, r2
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	4a09      	ldr	r2, [pc, #36]	; (80074dc <xTaskPriorityDisinherit+0xd8>)
 80074b6:	441a      	add	r2, r3
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	3304      	adds	r3, #4
 80074bc:	4619      	mov	r1, r3
 80074be:	4610      	mov	r0, r2
 80074c0:	f7fe f86e 	bl	80055a0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80074c4:	2301      	movs	r3, #1
 80074c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80074c8:	697b      	ldr	r3, [r7, #20]
	}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3718      	adds	r7, #24
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	200008c0 	.word	0x200008c0
 80074d8:	20000d9c 	.word	0x20000d9c
 80074dc:	200008c4 	.word	0x200008c4

080074e0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b088      	sub	sp, #32
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80074ee:	2301      	movs	r3, #1
 80074f0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d06a      	beq.n	80075ce <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d10a      	bne.n	8007516 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007504:	f383 8811 	msr	BASEPRI, r3
 8007508:	f3bf 8f6f 	isb	sy
 800750c:	f3bf 8f4f 	dsb	sy
 8007510:	60fb      	str	r3, [r7, #12]
}
 8007512:	bf00      	nop
 8007514:	e7fe      	b.n	8007514 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800751a:	683a      	ldr	r2, [r7, #0]
 800751c:	429a      	cmp	r2, r3
 800751e:	d902      	bls.n	8007526 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	61fb      	str	r3, [r7, #28]
 8007524:	e002      	b.n	800752c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800752a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007530:	69fa      	ldr	r2, [r7, #28]
 8007532:	429a      	cmp	r2, r3
 8007534:	d04b      	beq.n	80075ce <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800753a:	697a      	ldr	r2, [r7, #20]
 800753c:	429a      	cmp	r2, r3
 800753e:	d146      	bne.n	80075ce <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007540:	4b25      	ldr	r3, [pc, #148]	; (80075d8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	69ba      	ldr	r2, [r7, #24]
 8007546:	429a      	cmp	r2, r3
 8007548:	d10a      	bne.n	8007560 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800754a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754e:	f383 8811 	msr	BASEPRI, r3
 8007552:	f3bf 8f6f 	isb	sy
 8007556:	f3bf 8f4f 	dsb	sy
 800755a:	60bb      	str	r3, [r7, #8]
}
 800755c:	bf00      	nop
 800755e:	e7fe      	b.n	800755e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007564:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	69fa      	ldr	r2, [r7, #28]
 800756a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	699b      	ldr	r3, [r3, #24]
 8007570:	2b00      	cmp	r3, #0
 8007572:	db04      	blt.n	800757e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800757e:	69bb      	ldr	r3, [r7, #24]
 8007580:	6959      	ldr	r1, [r3, #20]
 8007582:	693a      	ldr	r2, [r7, #16]
 8007584:	4613      	mov	r3, r2
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	4413      	add	r3, r2
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	4a13      	ldr	r2, [pc, #76]	; (80075dc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800758e:	4413      	add	r3, r2
 8007590:	4299      	cmp	r1, r3
 8007592:	d11c      	bne.n	80075ce <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	3304      	adds	r3, #4
 8007598:	4618      	mov	r0, r3
 800759a:	f7fe f85e 	bl	800565a <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075a2:	4b0f      	ldr	r3, [pc, #60]	; (80075e0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d903      	bls.n	80075b2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ae:	4a0c      	ldr	r2, [pc, #48]	; (80075e0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80075b0:	6013      	str	r3, [r2, #0]
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075b6:	4613      	mov	r3, r2
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	4413      	add	r3, r2
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	4a07      	ldr	r2, [pc, #28]	; (80075dc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80075c0:	441a      	add	r2, r3
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	3304      	adds	r3, #4
 80075c6:	4619      	mov	r1, r3
 80075c8:	4610      	mov	r0, r2
 80075ca:	f7fd ffe9 	bl	80055a0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80075ce:	bf00      	nop
 80075d0:	3720      	adds	r7, #32
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	200008c0 	.word	0x200008c0
 80075dc:	200008c4 	.word	0x200008c4
 80075e0:	20000d9c 	.word	0x20000d9c

080075e4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80075e4:	b480      	push	{r7}
 80075e6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80075e8:	4b07      	ldr	r3, [pc, #28]	; (8007608 <pvTaskIncrementMutexHeldCount+0x24>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d004      	beq.n	80075fa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80075f0:	4b05      	ldr	r3, [pc, #20]	; (8007608 <pvTaskIncrementMutexHeldCount+0x24>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80075f6:	3201      	adds	r2, #1
 80075f8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80075fa:	4b03      	ldr	r3, [pc, #12]	; (8007608 <pvTaskIncrementMutexHeldCount+0x24>)
 80075fc:	681b      	ldr	r3, [r3, #0]
	}
 80075fe:	4618      	mov	r0, r3
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr
 8007608:	200008c0 	.word	0x200008c0

0800760c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007616:	4b21      	ldr	r3, [pc, #132]	; (800769c <prvAddCurrentTaskToDelayedList+0x90>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800761c:	4b20      	ldr	r3, [pc, #128]	; (80076a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	3304      	adds	r3, #4
 8007622:	4618      	mov	r0, r3
 8007624:	f7fe f819 	bl	800565a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800762e:	d10a      	bne.n	8007646 <prvAddCurrentTaskToDelayedList+0x3a>
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d007      	beq.n	8007646 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007636:	4b1a      	ldr	r3, [pc, #104]	; (80076a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	3304      	adds	r3, #4
 800763c:	4619      	mov	r1, r3
 800763e:	4819      	ldr	r0, [pc, #100]	; (80076a4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007640:	f7fd ffae 	bl	80055a0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007644:	e026      	b.n	8007694 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007646:	68fa      	ldr	r2, [r7, #12]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4413      	add	r3, r2
 800764c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800764e:	4b14      	ldr	r3, [pc, #80]	; (80076a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	68ba      	ldr	r2, [r7, #8]
 8007654:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007656:	68ba      	ldr	r2, [r7, #8]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	429a      	cmp	r2, r3
 800765c:	d209      	bcs.n	8007672 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800765e:	4b12      	ldr	r3, [pc, #72]	; (80076a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	4b0f      	ldr	r3, [pc, #60]	; (80076a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	3304      	adds	r3, #4
 8007668:	4619      	mov	r1, r3
 800766a:	4610      	mov	r0, r2
 800766c:	f7fd ffbc 	bl	80055e8 <vListInsert>
}
 8007670:	e010      	b.n	8007694 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007672:	4b0e      	ldr	r3, [pc, #56]	; (80076ac <prvAddCurrentTaskToDelayedList+0xa0>)
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	4b0a      	ldr	r3, [pc, #40]	; (80076a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	3304      	adds	r3, #4
 800767c:	4619      	mov	r1, r3
 800767e:	4610      	mov	r0, r2
 8007680:	f7fd ffb2 	bl	80055e8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007684:	4b0a      	ldr	r3, [pc, #40]	; (80076b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	68ba      	ldr	r2, [r7, #8]
 800768a:	429a      	cmp	r2, r3
 800768c:	d202      	bcs.n	8007694 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800768e:	4a08      	ldr	r2, [pc, #32]	; (80076b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	6013      	str	r3, [r2, #0]
}
 8007694:	bf00      	nop
 8007696:	3710      	adds	r7, #16
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	20000d98 	.word	0x20000d98
 80076a0:	200008c0 	.word	0x200008c0
 80076a4:	20000d80 	.word	0x20000d80
 80076a8:	20000d50 	.word	0x20000d50
 80076ac:	20000d4c 	.word	0x20000d4c
 80076b0:	20000db4 	.word	0x20000db4

080076b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b08a      	sub	sp, #40	; 0x28
 80076b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80076ba:	2300      	movs	r3, #0
 80076bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80076be:	f000 fb07 	bl	8007cd0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80076c2:	4b1c      	ldr	r3, [pc, #112]	; (8007734 <xTimerCreateTimerTask+0x80>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d021      	beq.n	800770e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80076ca:	2300      	movs	r3, #0
 80076cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80076ce:	2300      	movs	r3, #0
 80076d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80076d2:	1d3a      	adds	r2, r7, #4
 80076d4:	f107 0108 	add.w	r1, r7, #8
 80076d8:	f107 030c 	add.w	r3, r7, #12
 80076dc:	4618      	mov	r0, r3
 80076de:	f7fd fec7 	bl	8005470 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80076e2:	6879      	ldr	r1, [r7, #4]
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	9202      	str	r2, [sp, #8]
 80076ea:	9301      	str	r3, [sp, #4]
 80076ec:	2302      	movs	r3, #2
 80076ee:	9300      	str	r3, [sp, #0]
 80076f0:	2300      	movs	r3, #0
 80076f2:	460a      	mov	r2, r1
 80076f4:	4910      	ldr	r1, [pc, #64]	; (8007738 <xTimerCreateTimerTask+0x84>)
 80076f6:	4811      	ldr	r0, [pc, #68]	; (800773c <xTimerCreateTimerTask+0x88>)
 80076f8:	f7fe ff5a 	bl	80065b0 <xTaskCreateStatic>
 80076fc:	4603      	mov	r3, r0
 80076fe:	4a10      	ldr	r2, [pc, #64]	; (8007740 <xTimerCreateTimerTask+0x8c>)
 8007700:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007702:	4b0f      	ldr	r3, [pc, #60]	; (8007740 <xTimerCreateTimerTask+0x8c>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d001      	beq.n	800770e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800770a:	2301      	movs	r3, #1
 800770c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d10a      	bne.n	800772a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007718:	f383 8811 	msr	BASEPRI, r3
 800771c:	f3bf 8f6f 	isb	sy
 8007720:	f3bf 8f4f 	dsb	sy
 8007724:	613b      	str	r3, [r7, #16]
}
 8007726:	bf00      	nop
 8007728:	e7fe      	b.n	8007728 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800772a:	697b      	ldr	r3, [r7, #20]
}
 800772c:	4618      	mov	r0, r3
 800772e:	3718      	adds	r7, #24
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}
 8007734:	20000df0 	.word	0x20000df0
 8007738:	0800ba84 	.word	0x0800ba84
 800773c:	08007879 	.word	0x08007879
 8007740:	20000df4 	.word	0x20000df4

08007744 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b08a      	sub	sp, #40	; 0x28
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]
 8007750:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007752:	2300      	movs	r3, #0
 8007754:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d10a      	bne.n	8007772 <xTimerGenericCommand+0x2e>
	__asm volatile
 800775c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007760:	f383 8811 	msr	BASEPRI, r3
 8007764:	f3bf 8f6f 	isb	sy
 8007768:	f3bf 8f4f 	dsb	sy
 800776c:	623b      	str	r3, [r7, #32]
}
 800776e:	bf00      	nop
 8007770:	e7fe      	b.n	8007770 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007772:	4b1a      	ldr	r3, [pc, #104]	; (80077dc <xTimerGenericCommand+0x98>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d02a      	beq.n	80077d0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	2b05      	cmp	r3, #5
 800778a:	dc18      	bgt.n	80077be <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800778c:	f7ff fdb4 	bl	80072f8 <xTaskGetSchedulerState>
 8007790:	4603      	mov	r3, r0
 8007792:	2b02      	cmp	r3, #2
 8007794:	d109      	bne.n	80077aa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007796:	4b11      	ldr	r3, [pc, #68]	; (80077dc <xTimerGenericCommand+0x98>)
 8007798:	6818      	ldr	r0, [r3, #0]
 800779a:	f107 0110 	add.w	r1, r7, #16
 800779e:	2300      	movs	r3, #0
 80077a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077a2:	f7fe f979 	bl	8005a98 <xQueueGenericSend>
 80077a6:	6278      	str	r0, [r7, #36]	; 0x24
 80077a8:	e012      	b.n	80077d0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80077aa:	4b0c      	ldr	r3, [pc, #48]	; (80077dc <xTimerGenericCommand+0x98>)
 80077ac:	6818      	ldr	r0, [r3, #0]
 80077ae:	f107 0110 	add.w	r1, r7, #16
 80077b2:	2300      	movs	r3, #0
 80077b4:	2200      	movs	r2, #0
 80077b6:	f7fe f96f 	bl	8005a98 <xQueueGenericSend>
 80077ba:	6278      	str	r0, [r7, #36]	; 0x24
 80077bc:	e008      	b.n	80077d0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80077be:	4b07      	ldr	r3, [pc, #28]	; (80077dc <xTimerGenericCommand+0x98>)
 80077c0:	6818      	ldr	r0, [r3, #0]
 80077c2:	f107 0110 	add.w	r1, r7, #16
 80077c6:	2300      	movs	r3, #0
 80077c8:	683a      	ldr	r2, [r7, #0]
 80077ca:	f7fe fa63 	bl	8005c94 <xQueueGenericSendFromISR>
 80077ce:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80077d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3728      	adds	r7, #40	; 0x28
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	20000df0 	.word	0x20000df0

080077e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b088      	sub	sp, #32
 80077e4:	af02      	add	r7, sp, #8
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077ea:	4b22      	ldr	r3, [pc, #136]	; (8007874 <prvProcessExpiredTimer+0x94>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	3304      	adds	r3, #4
 80077f8:	4618      	mov	r0, r3
 80077fa:	f7fd ff2e 	bl	800565a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007804:	f003 0304 	and.w	r3, r3, #4
 8007808:	2b00      	cmp	r3, #0
 800780a:	d022      	beq.n	8007852 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	699a      	ldr	r2, [r3, #24]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	18d1      	adds	r1, r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	683a      	ldr	r2, [r7, #0]
 8007818:	6978      	ldr	r0, [r7, #20]
 800781a:	f000 f8d1 	bl	80079c0 <prvInsertTimerInActiveList>
 800781e:	4603      	mov	r3, r0
 8007820:	2b00      	cmp	r3, #0
 8007822:	d01f      	beq.n	8007864 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007824:	2300      	movs	r3, #0
 8007826:	9300      	str	r3, [sp, #0]
 8007828:	2300      	movs	r3, #0
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	2100      	movs	r1, #0
 800782e:	6978      	ldr	r0, [r7, #20]
 8007830:	f7ff ff88 	bl	8007744 <xTimerGenericCommand>
 8007834:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d113      	bne.n	8007864 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800783c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007840:	f383 8811 	msr	BASEPRI, r3
 8007844:	f3bf 8f6f 	isb	sy
 8007848:	f3bf 8f4f 	dsb	sy
 800784c:	60fb      	str	r3, [r7, #12]
}
 800784e:	bf00      	nop
 8007850:	e7fe      	b.n	8007850 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007858:	f023 0301 	bic.w	r3, r3, #1
 800785c:	b2da      	uxtb	r2, r3
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	6a1b      	ldr	r3, [r3, #32]
 8007868:	6978      	ldr	r0, [r7, #20]
 800786a:	4798      	blx	r3
}
 800786c:	bf00      	nop
 800786e:	3718      	adds	r7, #24
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	20000de8 	.word	0x20000de8

08007878 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007880:	f107 0308 	add.w	r3, r7, #8
 8007884:	4618      	mov	r0, r3
 8007886:	f000 f857 	bl	8007938 <prvGetNextExpireTime>
 800788a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	4619      	mov	r1, r3
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f000 f803 	bl	800789c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007896:	f000 f8d5 	bl	8007a44 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800789a:	e7f1      	b.n	8007880 <prvTimerTask+0x8>

0800789c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80078a6:	f7ff f935 	bl	8006b14 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80078aa:	f107 0308 	add.w	r3, r7, #8
 80078ae:	4618      	mov	r0, r3
 80078b0:	f000 f866 	bl	8007980 <prvSampleTimeNow>
 80078b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d130      	bne.n	800791e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d10a      	bne.n	80078d8 <prvProcessTimerOrBlockTask+0x3c>
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d806      	bhi.n	80078d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80078ca:	f7ff f931 	bl	8006b30 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80078ce:	68f9      	ldr	r1, [r7, #12]
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f7ff ff85 	bl	80077e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80078d6:	e024      	b.n	8007922 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d008      	beq.n	80078f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80078de:	4b13      	ldr	r3, [pc, #76]	; (800792c <prvProcessTimerOrBlockTask+0x90>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d101      	bne.n	80078ec <prvProcessTimerOrBlockTask+0x50>
 80078e8:	2301      	movs	r3, #1
 80078ea:	e000      	b.n	80078ee <prvProcessTimerOrBlockTask+0x52>
 80078ec:	2300      	movs	r3, #0
 80078ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80078f0:	4b0f      	ldr	r3, [pc, #60]	; (8007930 <prvProcessTimerOrBlockTask+0x94>)
 80078f2:	6818      	ldr	r0, [r3, #0]
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	683a      	ldr	r2, [r7, #0]
 80078fc:	4619      	mov	r1, r3
 80078fe:	f7fe fe23 	bl	8006548 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007902:	f7ff f915 	bl	8006b30 <xTaskResumeAll>
 8007906:	4603      	mov	r3, r0
 8007908:	2b00      	cmp	r3, #0
 800790a:	d10a      	bne.n	8007922 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800790c:	4b09      	ldr	r3, [pc, #36]	; (8007934 <prvProcessTimerOrBlockTask+0x98>)
 800790e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007912:	601a      	str	r2, [r3, #0]
 8007914:	f3bf 8f4f 	dsb	sy
 8007918:	f3bf 8f6f 	isb	sy
}
 800791c:	e001      	b.n	8007922 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800791e:	f7ff f907 	bl	8006b30 <xTaskResumeAll>
}
 8007922:	bf00      	nop
 8007924:	3710      	adds	r7, #16
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	20000dec 	.word	0x20000dec
 8007930:	20000df0 	.word	0x20000df0
 8007934:	e000ed04 	.word	0xe000ed04

08007938 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007938:	b480      	push	{r7}
 800793a:	b085      	sub	sp, #20
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007940:	4b0e      	ldr	r3, [pc, #56]	; (800797c <prvGetNextExpireTime+0x44>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d101      	bne.n	800794e <prvGetNextExpireTime+0x16>
 800794a:	2201      	movs	r2, #1
 800794c:	e000      	b.n	8007950 <prvGetNextExpireTime+0x18>
 800794e:	2200      	movs	r2, #0
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d105      	bne.n	8007968 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800795c:	4b07      	ldr	r3, [pc, #28]	; (800797c <prvGetNextExpireTime+0x44>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	60fb      	str	r3, [r7, #12]
 8007966:	e001      	b.n	800796c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007968:	2300      	movs	r3, #0
 800796a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800796c:	68fb      	ldr	r3, [r7, #12]
}
 800796e:	4618      	mov	r0, r3
 8007970:	3714      	adds	r7, #20
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr
 800797a:	bf00      	nop
 800797c:	20000de8 	.word	0x20000de8

08007980 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007988:	f7ff f970 	bl	8006c6c <xTaskGetTickCount>
 800798c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800798e:	4b0b      	ldr	r3, [pc, #44]	; (80079bc <prvSampleTimeNow+0x3c>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	68fa      	ldr	r2, [r7, #12]
 8007994:	429a      	cmp	r2, r3
 8007996:	d205      	bcs.n	80079a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007998:	f000 f936 	bl	8007c08 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	601a      	str	r2, [r3, #0]
 80079a2:	e002      	b.n	80079aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80079aa:	4a04      	ldr	r2, [pc, #16]	; (80079bc <prvSampleTimeNow+0x3c>)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80079b0:	68fb      	ldr	r3, [r7, #12]
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	20000df8 	.word	0x20000df8

080079c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b086      	sub	sp, #24
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	607a      	str	r2, [r7, #4]
 80079cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80079ce:	2300      	movs	r3, #0
 80079d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	68ba      	ldr	r2, [r7, #8]
 80079d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	68fa      	ldr	r2, [r7, #12]
 80079dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80079de:	68ba      	ldr	r2, [r7, #8]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d812      	bhi.n	8007a0c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	1ad2      	subs	r2, r2, r3
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	699b      	ldr	r3, [r3, #24]
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d302      	bcc.n	80079fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80079f4:	2301      	movs	r3, #1
 80079f6:	617b      	str	r3, [r7, #20]
 80079f8:	e01b      	b.n	8007a32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80079fa:	4b10      	ldr	r3, [pc, #64]	; (8007a3c <prvInsertTimerInActiveList+0x7c>)
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	3304      	adds	r3, #4
 8007a02:	4619      	mov	r1, r3
 8007a04:	4610      	mov	r0, r2
 8007a06:	f7fd fdef 	bl	80055e8 <vListInsert>
 8007a0a:	e012      	b.n	8007a32 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d206      	bcs.n	8007a22 <prvInsertTimerInActiveList+0x62>
 8007a14:	68ba      	ldr	r2, [r7, #8]
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d302      	bcc.n	8007a22 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	617b      	str	r3, [r7, #20]
 8007a20:	e007      	b.n	8007a32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a22:	4b07      	ldr	r3, [pc, #28]	; (8007a40 <prvInsertTimerInActiveList+0x80>)
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	3304      	adds	r3, #4
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	4610      	mov	r0, r2
 8007a2e:	f7fd fddb 	bl	80055e8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007a32:	697b      	ldr	r3, [r7, #20]
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3718      	adds	r7, #24
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}
 8007a3c:	20000dec 	.word	0x20000dec
 8007a40:	20000de8 	.word	0x20000de8

08007a44 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b08e      	sub	sp, #56	; 0x38
 8007a48:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007a4a:	e0ca      	b.n	8007be2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	da18      	bge.n	8007a84 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007a52:	1d3b      	adds	r3, r7, #4
 8007a54:	3304      	adds	r3, #4
 8007a56:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d10a      	bne.n	8007a74 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a62:	f383 8811 	msr	BASEPRI, r3
 8007a66:	f3bf 8f6f 	isb	sy
 8007a6a:	f3bf 8f4f 	dsb	sy
 8007a6e:	61fb      	str	r3, [r7, #28]
}
 8007a70:	bf00      	nop
 8007a72:	e7fe      	b.n	8007a72 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a7a:	6850      	ldr	r0, [r2, #4]
 8007a7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a7e:	6892      	ldr	r2, [r2, #8]
 8007a80:	4611      	mov	r1, r2
 8007a82:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	f2c0 80aa 	blt.w	8007be0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a92:	695b      	ldr	r3, [r3, #20]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d004      	beq.n	8007aa2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a9a:	3304      	adds	r3, #4
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f7fd fddc 	bl	800565a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007aa2:	463b      	mov	r3, r7
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f7ff ff6b 	bl	8007980 <prvSampleTimeNow>
 8007aaa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2b09      	cmp	r3, #9
 8007ab0:	f200 8097 	bhi.w	8007be2 <prvProcessReceivedCommands+0x19e>
 8007ab4:	a201      	add	r2, pc, #4	; (adr r2, 8007abc <prvProcessReceivedCommands+0x78>)
 8007ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aba:	bf00      	nop
 8007abc:	08007ae5 	.word	0x08007ae5
 8007ac0:	08007ae5 	.word	0x08007ae5
 8007ac4:	08007ae5 	.word	0x08007ae5
 8007ac8:	08007b59 	.word	0x08007b59
 8007acc:	08007b6d 	.word	0x08007b6d
 8007ad0:	08007bb7 	.word	0x08007bb7
 8007ad4:	08007ae5 	.word	0x08007ae5
 8007ad8:	08007ae5 	.word	0x08007ae5
 8007adc:	08007b59 	.word	0x08007b59
 8007ae0:	08007b6d 	.word	0x08007b6d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007aea:	f043 0301 	orr.w	r3, r3, #1
 8007aee:	b2da      	uxtb	r2, r3
 8007af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007af6:	68ba      	ldr	r2, [r7, #8]
 8007af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007afa:	699b      	ldr	r3, [r3, #24]
 8007afc:	18d1      	adds	r1, r2, r3
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b04:	f7ff ff5c 	bl	80079c0 <prvInsertTimerInActiveList>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d069      	beq.n	8007be2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b10:	6a1b      	ldr	r3, [r3, #32]
 8007b12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b14:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b1c:	f003 0304 	and.w	r3, r3, #4
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d05e      	beq.n	8007be2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007b24:	68ba      	ldr	r2, [r7, #8]
 8007b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b28:	699b      	ldr	r3, [r3, #24]
 8007b2a:	441a      	add	r2, r3
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	9300      	str	r3, [sp, #0]
 8007b30:	2300      	movs	r3, #0
 8007b32:	2100      	movs	r1, #0
 8007b34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b36:	f7ff fe05 	bl	8007744 <xTimerGenericCommand>
 8007b3a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007b3c:	6a3b      	ldr	r3, [r7, #32]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d14f      	bne.n	8007be2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b46:	f383 8811 	msr	BASEPRI, r3
 8007b4a:	f3bf 8f6f 	isb	sy
 8007b4e:	f3bf 8f4f 	dsb	sy
 8007b52:	61bb      	str	r3, [r7, #24]
}
 8007b54:	bf00      	nop
 8007b56:	e7fe      	b.n	8007b56 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b5e:	f023 0301 	bic.w	r3, r3, #1
 8007b62:	b2da      	uxtb	r2, r3
 8007b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007b6a:	e03a      	b.n	8007be2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b72:	f043 0301 	orr.w	r3, r3, #1
 8007b76:	b2da      	uxtb	r2, r3
 8007b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007b7e:	68ba      	ldr	r2, [r7, #8]
 8007b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b82:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b86:	699b      	ldr	r3, [r3, #24]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d10a      	bne.n	8007ba2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b90:	f383 8811 	msr	BASEPRI, r3
 8007b94:	f3bf 8f6f 	isb	sy
 8007b98:	f3bf 8f4f 	dsb	sy
 8007b9c:	617b      	str	r3, [r7, #20]
}
 8007b9e:	bf00      	nop
 8007ba0:	e7fe      	b.n	8007ba0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba4:	699a      	ldr	r2, [r3, #24]
 8007ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba8:	18d1      	adds	r1, r2, r3
 8007baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bb0:	f7ff ff06 	bl	80079c0 <prvInsertTimerInActiveList>
					break;
 8007bb4:	e015      	b.n	8007be2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bbc:	f003 0302 	and.w	r3, r3, #2
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d103      	bne.n	8007bcc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007bc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bc6:	f000 fbdb 	bl	8008380 <vPortFree>
 8007bca:	e00a      	b.n	8007be2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bd2:	f023 0301 	bic.w	r3, r3, #1
 8007bd6:	b2da      	uxtb	r2, r3
 8007bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007bde:	e000      	b.n	8007be2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007be0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007be2:	4b08      	ldr	r3, [pc, #32]	; (8007c04 <prvProcessReceivedCommands+0x1c0>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	1d39      	adds	r1, r7, #4
 8007be8:	2200      	movs	r2, #0
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fe f8ee 	bl	8005dcc <xQueueReceive>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	f47f af2a 	bne.w	8007a4c <prvProcessReceivedCommands+0x8>
	}
}
 8007bf8:	bf00      	nop
 8007bfa:	bf00      	nop
 8007bfc:	3730      	adds	r7, #48	; 0x30
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	20000df0 	.word	0x20000df0

08007c08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b088      	sub	sp, #32
 8007c0c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c0e:	e048      	b.n	8007ca2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c10:	4b2d      	ldr	r3, [pc, #180]	; (8007cc8 <prvSwitchTimerLists+0xc0>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c1a:	4b2b      	ldr	r3, [pc, #172]	; (8007cc8 <prvSwitchTimerLists+0xc0>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	3304      	adds	r3, #4
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f7fd fd16 	bl	800565a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	6a1b      	ldr	r3, [r3, #32]
 8007c32:	68f8      	ldr	r0, [r7, #12]
 8007c34:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c3c:	f003 0304 	and.w	r3, r3, #4
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d02e      	beq.n	8007ca2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	699b      	ldr	r3, [r3, #24]
 8007c48:	693a      	ldr	r2, [r7, #16]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007c4e:	68ba      	ldr	r2, [r7, #8]
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d90e      	bls.n	8007c74 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	68ba      	ldr	r2, [r7, #8]
 8007c5a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c62:	4b19      	ldr	r3, [pc, #100]	; (8007cc8 <prvSwitchTimerLists+0xc0>)
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	3304      	adds	r3, #4
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	4610      	mov	r0, r2
 8007c6e:	f7fd fcbb 	bl	80055e8 <vListInsert>
 8007c72:	e016      	b.n	8007ca2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c74:	2300      	movs	r3, #0
 8007c76:	9300      	str	r3, [sp, #0]
 8007c78:	2300      	movs	r3, #0
 8007c7a:	693a      	ldr	r2, [r7, #16]
 8007c7c:	2100      	movs	r1, #0
 8007c7e:	68f8      	ldr	r0, [r7, #12]
 8007c80:	f7ff fd60 	bl	8007744 <xTimerGenericCommand>
 8007c84:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d10a      	bne.n	8007ca2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c90:	f383 8811 	msr	BASEPRI, r3
 8007c94:	f3bf 8f6f 	isb	sy
 8007c98:	f3bf 8f4f 	dsb	sy
 8007c9c:	603b      	str	r3, [r7, #0]
}
 8007c9e:	bf00      	nop
 8007ca0:	e7fe      	b.n	8007ca0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007ca2:	4b09      	ldr	r3, [pc, #36]	; (8007cc8 <prvSwitchTimerLists+0xc0>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d1b1      	bne.n	8007c10 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007cac:	4b06      	ldr	r3, [pc, #24]	; (8007cc8 <prvSwitchTimerLists+0xc0>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007cb2:	4b06      	ldr	r3, [pc, #24]	; (8007ccc <prvSwitchTimerLists+0xc4>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a04      	ldr	r2, [pc, #16]	; (8007cc8 <prvSwitchTimerLists+0xc0>)
 8007cb8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007cba:	4a04      	ldr	r2, [pc, #16]	; (8007ccc <prvSwitchTimerLists+0xc4>)
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	6013      	str	r3, [r2, #0]
}
 8007cc0:	bf00      	nop
 8007cc2:	3718      	adds	r7, #24
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	20000de8 	.word	0x20000de8
 8007ccc:	20000dec 	.word	0x20000dec

08007cd0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007cd6:	f000 f965 	bl	8007fa4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007cda:	4b15      	ldr	r3, [pc, #84]	; (8007d30 <prvCheckForValidListAndQueue+0x60>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d120      	bne.n	8007d24 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007ce2:	4814      	ldr	r0, [pc, #80]	; (8007d34 <prvCheckForValidListAndQueue+0x64>)
 8007ce4:	f7fd fc2f 	bl	8005546 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007ce8:	4813      	ldr	r0, [pc, #76]	; (8007d38 <prvCheckForValidListAndQueue+0x68>)
 8007cea:	f7fd fc2c 	bl	8005546 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007cee:	4b13      	ldr	r3, [pc, #76]	; (8007d3c <prvCheckForValidListAndQueue+0x6c>)
 8007cf0:	4a10      	ldr	r2, [pc, #64]	; (8007d34 <prvCheckForValidListAndQueue+0x64>)
 8007cf2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007cf4:	4b12      	ldr	r3, [pc, #72]	; (8007d40 <prvCheckForValidListAndQueue+0x70>)
 8007cf6:	4a10      	ldr	r2, [pc, #64]	; (8007d38 <prvCheckForValidListAndQueue+0x68>)
 8007cf8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	9300      	str	r3, [sp, #0]
 8007cfe:	4b11      	ldr	r3, [pc, #68]	; (8007d44 <prvCheckForValidListAndQueue+0x74>)
 8007d00:	4a11      	ldr	r2, [pc, #68]	; (8007d48 <prvCheckForValidListAndQueue+0x78>)
 8007d02:	2110      	movs	r1, #16
 8007d04:	200a      	movs	r0, #10
 8007d06:	f7fd fd3b 	bl	8005780 <xQueueGenericCreateStatic>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	4a08      	ldr	r2, [pc, #32]	; (8007d30 <prvCheckForValidListAndQueue+0x60>)
 8007d0e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007d10:	4b07      	ldr	r3, [pc, #28]	; (8007d30 <prvCheckForValidListAndQueue+0x60>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d005      	beq.n	8007d24 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007d18:	4b05      	ldr	r3, [pc, #20]	; (8007d30 <prvCheckForValidListAndQueue+0x60>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	490b      	ldr	r1, [pc, #44]	; (8007d4c <prvCheckForValidListAndQueue+0x7c>)
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7fe fbe8 	bl	80064f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d24:	f000 f96e 	bl	8008004 <vPortExitCritical>
}
 8007d28:	bf00      	nop
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	20000df0 	.word	0x20000df0
 8007d34:	20000dc0 	.word	0x20000dc0
 8007d38:	20000dd4 	.word	0x20000dd4
 8007d3c:	20000de8 	.word	0x20000de8
 8007d40:	20000dec 	.word	0x20000dec
 8007d44:	20000e9c 	.word	0x20000e9c
 8007d48:	20000dfc 	.word	0x20000dfc
 8007d4c:	0800ba8c 	.word	0x0800ba8c

08007d50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007d50:	b480      	push	{r7}
 8007d52:	b085      	sub	sp, #20
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	3b04      	subs	r3, #4
 8007d60:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007d68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	3b04      	subs	r3, #4
 8007d6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	f023 0201 	bic.w	r2, r3, #1
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	3b04      	subs	r3, #4
 8007d7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d80:	4a0c      	ldr	r2, [pc, #48]	; (8007db4 <pxPortInitialiseStack+0x64>)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	3b14      	subs	r3, #20
 8007d8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	3b04      	subs	r3, #4
 8007d96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f06f 0202 	mvn.w	r2, #2
 8007d9e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	3b20      	subs	r3, #32
 8007da4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007da6:	68fb      	ldr	r3, [r7, #12]
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3714      	adds	r7, #20
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr
 8007db4:	08007db9 	.word	0x08007db9

08007db8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007dc2:	4b12      	ldr	r3, [pc, #72]	; (8007e0c <prvTaskExitError+0x54>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dca:	d00a      	beq.n	8007de2 <prvTaskExitError+0x2a>
	__asm volatile
 8007dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd0:	f383 8811 	msr	BASEPRI, r3
 8007dd4:	f3bf 8f6f 	isb	sy
 8007dd8:	f3bf 8f4f 	dsb	sy
 8007ddc:	60fb      	str	r3, [r7, #12]
}
 8007dde:	bf00      	nop
 8007de0:	e7fe      	b.n	8007de0 <prvTaskExitError+0x28>
	__asm volatile
 8007de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de6:	f383 8811 	msr	BASEPRI, r3
 8007dea:	f3bf 8f6f 	isb	sy
 8007dee:	f3bf 8f4f 	dsb	sy
 8007df2:	60bb      	str	r3, [r7, #8]
}
 8007df4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007df6:	bf00      	nop
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d0fc      	beq.n	8007df8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007dfe:	bf00      	nop
 8007e00:	bf00      	nop
 8007e02:	3714      	adds	r7, #20
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr
 8007e0c:	2000000c 	.word	0x2000000c

08007e10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007e10:	4b07      	ldr	r3, [pc, #28]	; (8007e30 <pxCurrentTCBConst2>)
 8007e12:	6819      	ldr	r1, [r3, #0]
 8007e14:	6808      	ldr	r0, [r1, #0]
 8007e16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e1a:	f380 8809 	msr	PSP, r0
 8007e1e:	f3bf 8f6f 	isb	sy
 8007e22:	f04f 0000 	mov.w	r0, #0
 8007e26:	f380 8811 	msr	BASEPRI, r0
 8007e2a:	4770      	bx	lr
 8007e2c:	f3af 8000 	nop.w

08007e30 <pxCurrentTCBConst2>:
 8007e30:	200008c0 	.word	0x200008c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007e34:	bf00      	nop
 8007e36:	bf00      	nop

08007e38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007e38:	4808      	ldr	r0, [pc, #32]	; (8007e5c <prvPortStartFirstTask+0x24>)
 8007e3a:	6800      	ldr	r0, [r0, #0]
 8007e3c:	6800      	ldr	r0, [r0, #0]
 8007e3e:	f380 8808 	msr	MSP, r0
 8007e42:	f04f 0000 	mov.w	r0, #0
 8007e46:	f380 8814 	msr	CONTROL, r0
 8007e4a:	b662      	cpsie	i
 8007e4c:	b661      	cpsie	f
 8007e4e:	f3bf 8f4f 	dsb	sy
 8007e52:	f3bf 8f6f 	isb	sy
 8007e56:	df00      	svc	0
 8007e58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007e5a:	bf00      	nop
 8007e5c:	e000ed08 	.word	0xe000ed08

08007e60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b086      	sub	sp, #24
 8007e64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007e66:	4b46      	ldr	r3, [pc, #280]	; (8007f80 <xPortStartScheduler+0x120>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a46      	ldr	r2, [pc, #280]	; (8007f84 <xPortStartScheduler+0x124>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d10a      	bne.n	8007e86 <xPortStartScheduler+0x26>
	__asm volatile
 8007e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e74:	f383 8811 	msr	BASEPRI, r3
 8007e78:	f3bf 8f6f 	isb	sy
 8007e7c:	f3bf 8f4f 	dsb	sy
 8007e80:	613b      	str	r3, [r7, #16]
}
 8007e82:	bf00      	nop
 8007e84:	e7fe      	b.n	8007e84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007e86:	4b3e      	ldr	r3, [pc, #248]	; (8007f80 <xPortStartScheduler+0x120>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a3f      	ldr	r2, [pc, #252]	; (8007f88 <xPortStartScheduler+0x128>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d10a      	bne.n	8007ea6 <xPortStartScheduler+0x46>
	__asm volatile
 8007e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e94:	f383 8811 	msr	BASEPRI, r3
 8007e98:	f3bf 8f6f 	isb	sy
 8007e9c:	f3bf 8f4f 	dsb	sy
 8007ea0:	60fb      	str	r3, [r7, #12]
}
 8007ea2:	bf00      	nop
 8007ea4:	e7fe      	b.n	8007ea4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007ea6:	4b39      	ldr	r3, [pc, #228]	; (8007f8c <xPortStartScheduler+0x12c>)
 8007ea8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	22ff      	movs	r2, #255	; 0xff
 8007eb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ec0:	78fb      	ldrb	r3, [r7, #3]
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007ec8:	b2da      	uxtb	r2, r3
 8007eca:	4b31      	ldr	r3, [pc, #196]	; (8007f90 <xPortStartScheduler+0x130>)
 8007ecc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007ece:	4b31      	ldr	r3, [pc, #196]	; (8007f94 <xPortStartScheduler+0x134>)
 8007ed0:	2207      	movs	r2, #7
 8007ed2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ed4:	e009      	b.n	8007eea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007ed6:	4b2f      	ldr	r3, [pc, #188]	; (8007f94 <xPortStartScheduler+0x134>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	3b01      	subs	r3, #1
 8007edc:	4a2d      	ldr	r2, [pc, #180]	; (8007f94 <xPortStartScheduler+0x134>)
 8007ede:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ee0:	78fb      	ldrb	r3, [r7, #3]
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	005b      	lsls	r3, r3, #1
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007eea:	78fb      	ldrb	r3, [r7, #3]
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ef2:	2b80      	cmp	r3, #128	; 0x80
 8007ef4:	d0ef      	beq.n	8007ed6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007ef6:	4b27      	ldr	r3, [pc, #156]	; (8007f94 <xPortStartScheduler+0x134>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f1c3 0307 	rsb	r3, r3, #7
 8007efe:	2b04      	cmp	r3, #4
 8007f00:	d00a      	beq.n	8007f18 <xPortStartScheduler+0xb8>
	__asm volatile
 8007f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f06:	f383 8811 	msr	BASEPRI, r3
 8007f0a:	f3bf 8f6f 	isb	sy
 8007f0e:	f3bf 8f4f 	dsb	sy
 8007f12:	60bb      	str	r3, [r7, #8]
}
 8007f14:	bf00      	nop
 8007f16:	e7fe      	b.n	8007f16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007f18:	4b1e      	ldr	r3, [pc, #120]	; (8007f94 <xPortStartScheduler+0x134>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	021b      	lsls	r3, r3, #8
 8007f1e:	4a1d      	ldr	r2, [pc, #116]	; (8007f94 <xPortStartScheduler+0x134>)
 8007f20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007f22:	4b1c      	ldr	r3, [pc, #112]	; (8007f94 <xPortStartScheduler+0x134>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f2a:	4a1a      	ldr	r2, [pc, #104]	; (8007f94 <xPortStartScheduler+0x134>)
 8007f2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	b2da      	uxtb	r2, r3
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007f36:	4b18      	ldr	r3, [pc, #96]	; (8007f98 <xPortStartScheduler+0x138>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a17      	ldr	r2, [pc, #92]	; (8007f98 <xPortStartScheduler+0x138>)
 8007f3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007f40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007f42:	4b15      	ldr	r3, [pc, #84]	; (8007f98 <xPortStartScheduler+0x138>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a14      	ldr	r2, [pc, #80]	; (8007f98 <xPortStartScheduler+0x138>)
 8007f48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007f4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007f4e:	f000 f8dd 	bl	800810c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007f52:	4b12      	ldr	r3, [pc, #72]	; (8007f9c <xPortStartScheduler+0x13c>)
 8007f54:	2200      	movs	r2, #0
 8007f56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007f58:	f000 f8fc 	bl	8008154 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007f5c:	4b10      	ldr	r3, [pc, #64]	; (8007fa0 <xPortStartScheduler+0x140>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a0f      	ldr	r2, [pc, #60]	; (8007fa0 <xPortStartScheduler+0x140>)
 8007f62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007f66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007f68:	f7ff ff66 	bl	8007e38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007f6c:	f7fe ff48 	bl	8006e00 <vTaskSwitchContext>
	prvTaskExitError();
 8007f70:	f7ff ff22 	bl	8007db8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3718      	adds	r7, #24
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	e000ed00 	.word	0xe000ed00
 8007f84:	410fc271 	.word	0x410fc271
 8007f88:	410fc270 	.word	0x410fc270
 8007f8c:	e000e400 	.word	0xe000e400
 8007f90:	20000eec 	.word	0x20000eec
 8007f94:	20000ef0 	.word	0x20000ef0
 8007f98:	e000ed20 	.word	0xe000ed20
 8007f9c:	2000000c 	.word	0x2000000c
 8007fa0:	e000ef34 	.word	0xe000ef34

08007fa4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
	__asm volatile
 8007faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fae:	f383 8811 	msr	BASEPRI, r3
 8007fb2:	f3bf 8f6f 	isb	sy
 8007fb6:	f3bf 8f4f 	dsb	sy
 8007fba:	607b      	str	r3, [r7, #4]
}
 8007fbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007fbe:	4b0f      	ldr	r3, [pc, #60]	; (8007ffc <vPortEnterCritical+0x58>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	4a0d      	ldr	r2, [pc, #52]	; (8007ffc <vPortEnterCritical+0x58>)
 8007fc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007fc8:	4b0c      	ldr	r3, [pc, #48]	; (8007ffc <vPortEnterCritical+0x58>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d10f      	bne.n	8007ff0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007fd0:	4b0b      	ldr	r3, [pc, #44]	; (8008000 <vPortEnterCritical+0x5c>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00a      	beq.n	8007ff0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fde:	f383 8811 	msr	BASEPRI, r3
 8007fe2:	f3bf 8f6f 	isb	sy
 8007fe6:	f3bf 8f4f 	dsb	sy
 8007fea:	603b      	str	r3, [r7, #0]
}
 8007fec:	bf00      	nop
 8007fee:	e7fe      	b.n	8007fee <vPortEnterCritical+0x4a>
	}
}
 8007ff0:	bf00      	nop
 8007ff2:	370c      	adds	r7, #12
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr
 8007ffc:	2000000c 	.word	0x2000000c
 8008000:	e000ed04 	.word	0xe000ed04

08008004 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800800a:	4b12      	ldr	r3, [pc, #72]	; (8008054 <vPortExitCritical+0x50>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d10a      	bne.n	8008028 <vPortExitCritical+0x24>
	__asm volatile
 8008012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008016:	f383 8811 	msr	BASEPRI, r3
 800801a:	f3bf 8f6f 	isb	sy
 800801e:	f3bf 8f4f 	dsb	sy
 8008022:	607b      	str	r3, [r7, #4]
}
 8008024:	bf00      	nop
 8008026:	e7fe      	b.n	8008026 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008028:	4b0a      	ldr	r3, [pc, #40]	; (8008054 <vPortExitCritical+0x50>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	3b01      	subs	r3, #1
 800802e:	4a09      	ldr	r2, [pc, #36]	; (8008054 <vPortExitCritical+0x50>)
 8008030:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008032:	4b08      	ldr	r3, [pc, #32]	; (8008054 <vPortExitCritical+0x50>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d105      	bne.n	8008046 <vPortExitCritical+0x42>
 800803a:	2300      	movs	r3, #0
 800803c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	f383 8811 	msr	BASEPRI, r3
}
 8008044:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008046:	bf00      	nop
 8008048:	370c      	adds	r7, #12
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop
 8008054:	2000000c 	.word	0x2000000c
	...

08008060 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008060:	f3ef 8009 	mrs	r0, PSP
 8008064:	f3bf 8f6f 	isb	sy
 8008068:	4b15      	ldr	r3, [pc, #84]	; (80080c0 <pxCurrentTCBConst>)
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	f01e 0f10 	tst.w	lr, #16
 8008070:	bf08      	it	eq
 8008072:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008076:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800807a:	6010      	str	r0, [r2, #0]
 800807c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008080:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008084:	f380 8811 	msr	BASEPRI, r0
 8008088:	f3bf 8f4f 	dsb	sy
 800808c:	f3bf 8f6f 	isb	sy
 8008090:	f7fe feb6 	bl	8006e00 <vTaskSwitchContext>
 8008094:	f04f 0000 	mov.w	r0, #0
 8008098:	f380 8811 	msr	BASEPRI, r0
 800809c:	bc09      	pop	{r0, r3}
 800809e:	6819      	ldr	r1, [r3, #0]
 80080a0:	6808      	ldr	r0, [r1, #0]
 80080a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a6:	f01e 0f10 	tst.w	lr, #16
 80080aa:	bf08      	it	eq
 80080ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80080b0:	f380 8809 	msr	PSP, r0
 80080b4:	f3bf 8f6f 	isb	sy
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	f3af 8000 	nop.w

080080c0 <pxCurrentTCBConst>:
 80080c0:	200008c0 	.word	0x200008c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80080c4:	bf00      	nop
 80080c6:	bf00      	nop

080080c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
	__asm volatile
 80080ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d2:	f383 8811 	msr	BASEPRI, r3
 80080d6:	f3bf 8f6f 	isb	sy
 80080da:	f3bf 8f4f 	dsb	sy
 80080de:	607b      	str	r3, [r7, #4]
}
 80080e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80080e2:	f7fe fdd3 	bl	8006c8c <xTaskIncrementTick>
 80080e6:	4603      	mov	r3, r0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d003      	beq.n	80080f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80080ec:	4b06      	ldr	r3, [pc, #24]	; (8008108 <xPortSysTickHandler+0x40>)
 80080ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080f2:	601a      	str	r2, [r3, #0]
 80080f4:	2300      	movs	r3, #0
 80080f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	f383 8811 	msr	BASEPRI, r3
}
 80080fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008100:	bf00      	nop
 8008102:	3708      	adds	r7, #8
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}
 8008108:	e000ed04 	.word	0xe000ed04

0800810c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800810c:	b480      	push	{r7}
 800810e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008110:	4b0b      	ldr	r3, [pc, #44]	; (8008140 <vPortSetupTimerInterrupt+0x34>)
 8008112:	2200      	movs	r2, #0
 8008114:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008116:	4b0b      	ldr	r3, [pc, #44]	; (8008144 <vPortSetupTimerInterrupt+0x38>)
 8008118:	2200      	movs	r2, #0
 800811a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800811c:	4b0a      	ldr	r3, [pc, #40]	; (8008148 <vPortSetupTimerInterrupt+0x3c>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a0a      	ldr	r2, [pc, #40]	; (800814c <vPortSetupTimerInterrupt+0x40>)
 8008122:	fba2 2303 	umull	r2, r3, r2, r3
 8008126:	099b      	lsrs	r3, r3, #6
 8008128:	4a09      	ldr	r2, [pc, #36]	; (8008150 <vPortSetupTimerInterrupt+0x44>)
 800812a:	3b01      	subs	r3, #1
 800812c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800812e:	4b04      	ldr	r3, [pc, #16]	; (8008140 <vPortSetupTimerInterrupt+0x34>)
 8008130:	2207      	movs	r2, #7
 8008132:	601a      	str	r2, [r3, #0]
}
 8008134:	bf00      	nop
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr
 800813e:	bf00      	nop
 8008140:	e000e010 	.word	0xe000e010
 8008144:	e000e018 	.word	0xe000e018
 8008148:	20000000 	.word	0x20000000
 800814c:	10624dd3 	.word	0x10624dd3
 8008150:	e000e014 	.word	0xe000e014

08008154 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008154:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008164 <vPortEnableVFP+0x10>
 8008158:	6801      	ldr	r1, [r0, #0]
 800815a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800815e:	6001      	str	r1, [r0, #0]
 8008160:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008162:	bf00      	nop
 8008164:	e000ed88 	.word	0xe000ed88

08008168 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008168:	b480      	push	{r7}
 800816a:	b085      	sub	sp, #20
 800816c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800816e:	f3ef 8305 	mrs	r3, IPSR
 8008172:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2b0f      	cmp	r3, #15
 8008178:	d914      	bls.n	80081a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800817a:	4a17      	ldr	r2, [pc, #92]	; (80081d8 <vPortValidateInterruptPriority+0x70>)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	4413      	add	r3, r2
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008184:	4b15      	ldr	r3, [pc, #84]	; (80081dc <vPortValidateInterruptPriority+0x74>)
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	7afa      	ldrb	r2, [r7, #11]
 800818a:	429a      	cmp	r2, r3
 800818c:	d20a      	bcs.n	80081a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800818e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008192:	f383 8811 	msr	BASEPRI, r3
 8008196:	f3bf 8f6f 	isb	sy
 800819a:	f3bf 8f4f 	dsb	sy
 800819e:	607b      	str	r3, [r7, #4]
}
 80081a0:	bf00      	nop
 80081a2:	e7fe      	b.n	80081a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80081a4:	4b0e      	ldr	r3, [pc, #56]	; (80081e0 <vPortValidateInterruptPriority+0x78>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80081ac:	4b0d      	ldr	r3, [pc, #52]	; (80081e4 <vPortValidateInterruptPriority+0x7c>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d90a      	bls.n	80081ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80081b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b8:	f383 8811 	msr	BASEPRI, r3
 80081bc:	f3bf 8f6f 	isb	sy
 80081c0:	f3bf 8f4f 	dsb	sy
 80081c4:	603b      	str	r3, [r7, #0]
}
 80081c6:	bf00      	nop
 80081c8:	e7fe      	b.n	80081c8 <vPortValidateInterruptPriority+0x60>
	}
 80081ca:	bf00      	nop
 80081cc:	3714      	adds	r7, #20
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr
 80081d6:	bf00      	nop
 80081d8:	e000e3f0 	.word	0xe000e3f0
 80081dc:	20000eec 	.word	0x20000eec
 80081e0:	e000ed0c 	.word	0xe000ed0c
 80081e4:	20000ef0 	.word	0x20000ef0

080081e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b08a      	sub	sp, #40	; 0x28
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80081f0:	2300      	movs	r3, #0
 80081f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80081f4:	f7fe fc8e 	bl	8006b14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80081f8:	4b5b      	ldr	r3, [pc, #364]	; (8008368 <pvPortMalloc+0x180>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d101      	bne.n	8008204 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008200:	f000 f920 	bl	8008444 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008204:	4b59      	ldr	r3, [pc, #356]	; (800836c <pvPortMalloc+0x184>)
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4013      	ands	r3, r2
 800820c:	2b00      	cmp	r3, #0
 800820e:	f040 8093 	bne.w	8008338 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d01d      	beq.n	8008254 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008218:	2208      	movs	r2, #8
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4413      	add	r3, r2
 800821e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f003 0307 	and.w	r3, r3, #7
 8008226:	2b00      	cmp	r3, #0
 8008228:	d014      	beq.n	8008254 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f023 0307 	bic.w	r3, r3, #7
 8008230:	3308      	adds	r3, #8
 8008232:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f003 0307 	and.w	r3, r3, #7
 800823a:	2b00      	cmp	r3, #0
 800823c:	d00a      	beq.n	8008254 <pvPortMalloc+0x6c>
	__asm volatile
 800823e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008242:	f383 8811 	msr	BASEPRI, r3
 8008246:	f3bf 8f6f 	isb	sy
 800824a:	f3bf 8f4f 	dsb	sy
 800824e:	617b      	str	r3, [r7, #20]
}
 8008250:	bf00      	nop
 8008252:	e7fe      	b.n	8008252 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d06e      	beq.n	8008338 <pvPortMalloc+0x150>
 800825a:	4b45      	ldr	r3, [pc, #276]	; (8008370 <pvPortMalloc+0x188>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	429a      	cmp	r2, r3
 8008262:	d869      	bhi.n	8008338 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008264:	4b43      	ldr	r3, [pc, #268]	; (8008374 <pvPortMalloc+0x18c>)
 8008266:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008268:	4b42      	ldr	r3, [pc, #264]	; (8008374 <pvPortMalloc+0x18c>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800826e:	e004      	b.n	800827a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008272:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800827a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	429a      	cmp	r2, r3
 8008282:	d903      	bls.n	800828c <pvPortMalloc+0xa4>
 8008284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d1f1      	bne.n	8008270 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800828c:	4b36      	ldr	r3, [pc, #216]	; (8008368 <pvPortMalloc+0x180>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008292:	429a      	cmp	r2, r3
 8008294:	d050      	beq.n	8008338 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008296:	6a3b      	ldr	r3, [r7, #32]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2208      	movs	r2, #8
 800829c:	4413      	add	r3, r2
 800829e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80082a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	6a3b      	ldr	r3, [r7, #32]
 80082a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80082a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082aa:	685a      	ldr	r2, [r3, #4]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	1ad2      	subs	r2, r2, r3
 80082b0:	2308      	movs	r3, #8
 80082b2:	005b      	lsls	r3, r3, #1
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d91f      	bls.n	80082f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80082b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4413      	add	r3, r2
 80082be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80082c0:	69bb      	ldr	r3, [r7, #24]
 80082c2:	f003 0307 	and.w	r3, r3, #7
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d00a      	beq.n	80082e0 <pvPortMalloc+0xf8>
	__asm volatile
 80082ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ce:	f383 8811 	msr	BASEPRI, r3
 80082d2:	f3bf 8f6f 	isb	sy
 80082d6:	f3bf 8f4f 	dsb	sy
 80082da:	613b      	str	r3, [r7, #16]
}
 80082dc:	bf00      	nop
 80082de:	e7fe      	b.n	80082de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80082e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e2:	685a      	ldr	r2, [r3, #4]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	1ad2      	subs	r2, r2, r3
 80082e8:	69bb      	ldr	r3, [r7, #24]
 80082ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80082ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80082f2:	69b8      	ldr	r0, [r7, #24]
 80082f4:	f000 f908 	bl	8008508 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80082f8:	4b1d      	ldr	r3, [pc, #116]	; (8008370 <pvPortMalloc+0x188>)
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	1ad3      	subs	r3, r2, r3
 8008302:	4a1b      	ldr	r2, [pc, #108]	; (8008370 <pvPortMalloc+0x188>)
 8008304:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008306:	4b1a      	ldr	r3, [pc, #104]	; (8008370 <pvPortMalloc+0x188>)
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	4b1b      	ldr	r3, [pc, #108]	; (8008378 <pvPortMalloc+0x190>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	429a      	cmp	r2, r3
 8008310:	d203      	bcs.n	800831a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008312:	4b17      	ldr	r3, [pc, #92]	; (8008370 <pvPortMalloc+0x188>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a18      	ldr	r2, [pc, #96]	; (8008378 <pvPortMalloc+0x190>)
 8008318:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800831a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831c:	685a      	ldr	r2, [r3, #4]
 800831e:	4b13      	ldr	r3, [pc, #76]	; (800836c <pvPortMalloc+0x184>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	431a      	orrs	r2, r3
 8008324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008326:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832a:	2200      	movs	r2, #0
 800832c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800832e:	4b13      	ldr	r3, [pc, #76]	; (800837c <pvPortMalloc+0x194>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	3301      	adds	r3, #1
 8008334:	4a11      	ldr	r2, [pc, #68]	; (800837c <pvPortMalloc+0x194>)
 8008336:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008338:	f7fe fbfa 	bl	8006b30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	f003 0307 	and.w	r3, r3, #7
 8008342:	2b00      	cmp	r3, #0
 8008344:	d00a      	beq.n	800835c <pvPortMalloc+0x174>
	__asm volatile
 8008346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800834a:	f383 8811 	msr	BASEPRI, r3
 800834e:	f3bf 8f6f 	isb	sy
 8008352:	f3bf 8f4f 	dsb	sy
 8008356:	60fb      	str	r3, [r7, #12]
}
 8008358:	bf00      	nop
 800835a:	e7fe      	b.n	800835a <pvPortMalloc+0x172>
	return pvReturn;
 800835c:	69fb      	ldr	r3, [r7, #28]
}
 800835e:	4618      	mov	r0, r3
 8008360:	3728      	adds	r7, #40	; 0x28
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop
 8008368:	20004afc 	.word	0x20004afc
 800836c:	20004b10 	.word	0x20004b10
 8008370:	20004b00 	.word	0x20004b00
 8008374:	20004af4 	.word	0x20004af4
 8008378:	20004b04 	.word	0x20004b04
 800837c:	20004b08 	.word	0x20004b08

08008380 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b086      	sub	sp, #24
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d04d      	beq.n	800842e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008392:	2308      	movs	r3, #8
 8008394:	425b      	negs	r3, r3
 8008396:	697a      	ldr	r2, [r7, #20]
 8008398:	4413      	add	r3, r2
 800839a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	685a      	ldr	r2, [r3, #4]
 80083a4:	4b24      	ldr	r3, [pc, #144]	; (8008438 <vPortFree+0xb8>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4013      	ands	r3, r2
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d10a      	bne.n	80083c4 <vPortFree+0x44>
	__asm volatile
 80083ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b2:	f383 8811 	msr	BASEPRI, r3
 80083b6:	f3bf 8f6f 	isb	sy
 80083ba:	f3bf 8f4f 	dsb	sy
 80083be:	60fb      	str	r3, [r7, #12]
}
 80083c0:	bf00      	nop
 80083c2:	e7fe      	b.n	80083c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d00a      	beq.n	80083e2 <vPortFree+0x62>
	__asm volatile
 80083cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d0:	f383 8811 	msr	BASEPRI, r3
 80083d4:	f3bf 8f6f 	isb	sy
 80083d8:	f3bf 8f4f 	dsb	sy
 80083dc:	60bb      	str	r3, [r7, #8]
}
 80083de:	bf00      	nop
 80083e0:	e7fe      	b.n	80083e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	685a      	ldr	r2, [r3, #4]
 80083e6:	4b14      	ldr	r3, [pc, #80]	; (8008438 <vPortFree+0xb8>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4013      	ands	r3, r2
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d01e      	beq.n	800842e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d11a      	bne.n	800842e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	685a      	ldr	r2, [r3, #4]
 80083fc:	4b0e      	ldr	r3, [pc, #56]	; (8008438 <vPortFree+0xb8>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	43db      	mvns	r3, r3
 8008402:	401a      	ands	r2, r3
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008408:	f7fe fb84 	bl	8006b14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	685a      	ldr	r2, [r3, #4]
 8008410:	4b0a      	ldr	r3, [pc, #40]	; (800843c <vPortFree+0xbc>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4413      	add	r3, r2
 8008416:	4a09      	ldr	r2, [pc, #36]	; (800843c <vPortFree+0xbc>)
 8008418:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800841a:	6938      	ldr	r0, [r7, #16]
 800841c:	f000 f874 	bl	8008508 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008420:	4b07      	ldr	r3, [pc, #28]	; (8008440 <vPortFree+0xc0>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	3301      	adds	r3, #1
 8008426:	4a06      	ldr	r2, [pc, #24]	; (8008440 <vPortFree+0xc0>)
 8008428:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800842a:	f7fe fb81 	bl	8006b30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800842e:	bf00      	nop
 8008430:	3718      	adds	r7, #24
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	20004b10 	.word	0x20004b10
 800843c:	20004b00 	.word	0x20004b00
 8008440:	20004b0c 	.word	0x20004b0c

08008444 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008444:	b480      	push	{r7}
 8008446:	b085      	sub	sp, #20
 8008448:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800844a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800844e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008450:	4b27      	ldr	r3, [pc, #156]	; (80084f0 <prvHeapInit+0xac>)
 8008452:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f003 0307 	and.w	r3, r3, #7
 800845a:	2b00      	cmp	r3, #0
 800845c:	d00c      	beq.n	8008478 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	3307      	adds	r3, #7
 8008462:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f023 0307 	bic.w	r3, r3, #7
 800846a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800846c:	68ba      	ldr	r2, [r7, #8]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	1ad3      	subs	r3, r2, r3
 8008472:	4a1f      	ldr	r2, [pc, #124]	; (80084f0 <prvHeapInit+0xac>)
 8008474:	4413      	add	r3, r2
 8008476:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800847c:	4a1d      	ldr	r2, [pc, #116]	; (80084f4 <prvHeapInit+0xb0>)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008482:	4b1c      	ldr	r3, [pc, #112]	; (80084f4 <prvHeapInit+0xb0>)
 8008484:	2200      	movs	r2, #0
 8008486:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	68ba      	ldr	r2, [r7, #8]
 800848c:	4413      	add	r3, r2
 800848e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008490:	2208      	movs	r2, #8
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	1a9b      	subs	r3, r3, r2
 8008496:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f023 0307 	bic.w	r3, r3, #7
 800849e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	4a15      	ldr	r2, [pc, #84]	; (80084f8 <prvHeapInit+0xb4>)
 80084a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80084a6:	4b14      	ldr	r3, [pc, #80]	; (80084f8 <prvHeapInit+0xb4>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	2200      	movs	r2, #0
 80084ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80084ae:	4b12      	ldr	r3, [pc, #72]	; (80084f8 <prvHeapInit+0xb4>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	2200      	movs	r2, #0
 80084b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	68fa      	ldr	r2, [r7, #12]
 80084be:	1ad2      	subs	r2, r2, r3
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80084c4:	4b0c      	ldr	r3, [pc, #48]	; (80084f8 <prvHeapInit+0xb4>)
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	4a0a      	ldr	r2, [pc, #40]	; (80084fc <prvHeapInit+0xb8>)
 80084d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	4a09      	ldr	r2, [pc, #36]	; (8008500 <prvHeapInit+0xbc>)
 80084da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80084dc:	4b09      	ldr	r3, [pc, #36]	; (8008504 <prvHeapInit+0xc0>)
 80084de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80084e2:	601a      	str	r2, [r3, #0]
}
 80084e4:	bf00      	nop
 80084e6:	3714      	adds	r7, #20
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr
 80084f0:	20000ef4 	.word	0x20000ef4
 80084f4:	20004af4 	.word	0x20004af4
 80084f8:	20004afc 	.word	0x20004afc
 80084fc:	20004b04 	.word	0x20004b04
 8008500:	20004b00 	.word	0x20004b00
 8008504:	20004b10 	.word	0x20004b10

08008508 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008508:	b480      	push	{r7}
 800850a:	b085      	sub	sp, #20
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008510:	4b28      	ldr	r3, [pc, #160]	; (80085b4 <prvInsertBlockIntoFreeList+0xac>)
 8008512:	60fb      	str	r3, [r7, #12]
 8008514:	e002      	b.n	800851c <prvInsertBlockIntoFreeList+0x14>
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	60fb      	str	r3, [r7, #12]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	429a      	cmp	r2, r3
 8008524:	d8f7      	bhi.n	8008516 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	68ba      	ldr	r2, [r7, #8]
 8008530:	4413      	add	r3, r2
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	429a      	cmp	r2, r3
 8008536:	d108      	bne.n	800854a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	685a      	ldr	r2, [r3, #4]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	441a      	add	r2, r3
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	68ba      	ldr	r2, [r7, #8]
 8008554:	441a      	add	r2, r3
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	429a      	cmp	r2, r3
 800855c:	d118      	bne.n	8008590 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	4b15      	ldr	r3, [pc, #84]	; (80085b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	429a      	cmp	r2, r3
 8008568:	d00d      	beq.n	8008586 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	685a      	ldr	r2, [r3, #4]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	441a      	add	r2, r3
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	601a      	str	r2, [r3, #0]
 8008584:	e008      	b.n	8008598 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008586:	4b0c      	ldr	r3, [pc, #48]	; (80085b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	601a      	str	r2, [r3, #0]
 800858e:	e003      	b.n	8008598 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008598:	68fa      	ldr	r2, [r7, #12]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	429a      	cmp	r2, r3
 800859e:	d002      	beq.n	80085a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085a6:	bf00      	nop
 80085a8:	3714      	adds	r7, #20
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr
 80085b2:	bf00      	nop
 80085b4:	20004af4 	.word	0x20004af4
 80085b8:	20004afc 	.word	0x20004afc

080085bc <__errno>:
 80085bc:	4b01      	ldr	r3, [pc, #4]	; (80085c4 <__errno+0x8>)
 80085be:	6818      	ldr	r0, [r3, #0]
 80085c0:	4770      	bx	lr
 80085c2:	bf00      	nop
 80085c4:	20000010 	.word	0x20000010

080085c8 <__libc_init_array>:
 80085c8:	b570      	push	{r4, r5, r6, lr}
 80085ca:	4d0d      	ldr	r5, [pc, #52]	; (8008600 <__libc_init_array+0x38>)
 80085cc:	4c0d      	ldr	r4, [pc, #52]	; (8008604 <__libc_init_array+0x3c>)
 80085ce:	1b64      	subs	r4, r4, r5
 80085d0:	10a4      	asrs	r4, r4, #2
 80085d2:	2600      	movs	r6, #0
 80085d4:	42a6      	cmp	r6, r4
 80085d6:	d109      	bne.n	80085ec <__libc_init_array+0x24>
 80085d8:	4d0b      	ldr	r5, [pc, #44]	; (8008608 <__libc_init_array+0x40>)
 80085da:	4c0c      	ldr	r4, [pc, #48]	; (800860c <__libc_init_array+0x44>)
 80085dc:	f003 f9cc 	bl	800b978 <_init>
 80085e0:	1b64      	subs	r4, r4, r5
 80085e2:	10a4      	asrs	r4, r4, #2
 80085e4:	2600      	movs	r6, #0
 80085e6:	42a6      	cmp	r6, r4
 80085e8:	d105      	bne.n	80085f6 <__libc_init_array+0x2e>
 80085ea:	bd70      	pop	{r4, r5, r6, pc}
 80085ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80085f0:	4798      	blx	r3
 80085f2:	3601      	adds	r6, #1
 80085f4:	e7ee      	b.n	80085d4 <__libc_init_array+0xc>
 80085f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80085fa:	4798      	blx	r3
 80085fc:	3601      	adds	r6, #1
 80085fe:	e7f2      	b.n	80085e6 <__libc_init_array+0x1e>
 8008600:	0800c06c 	.word	0x0800c06c
 8008604:	0800c06c 	.word	0x0800c06c
 8008608:	0800c06c 	.word	0x0800c06c
 800860c:	0800c070 	.word	0x0800c070

08008610 <memcpy>:
 8008610:	440a      	add	r2, r1
 8008612:	4291      	cmp	r1, r2
 8008614:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008618:	d100      	bne.n	800861c <memcpy+0xc>
 800861a:	4770      	bx	lr
 800861c:	b510      	push	{r4, lr}
 800861e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008622:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008626:	4291      	cmp	r1, r2
 8008628:	d1f9      	bne.n	800861e <memcpy+0xe>
 800862a:	bd10      	pop	{r4, pc}

0800862c <memset>:
 800862c:	4402      	add	r2, r0
 800862e:	4603      	mov	r3, r0
 8008630:	4293      	cmp	r3, r2
 8008632:	d100      	bne.n	8008636 <memset+0xa>
 8008634:	4770      	bx	lr
 8008636:	f803 1b01 	strb.w	r1, [r3], #1
 800863a:	e7f9      	b.n	8008630 <memset+0x4>

0800863c <__cvt>:
 800863c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008640:	ec55 4b10 	vmov	r4, r5, d0
 8008644:	2d00      	cmp	r5, #0
 8008646:	460e      	mov	r6, r1
 8008648:	4619      	mov	r1, r3
 800864a:	462b      	mov	r3, r5
 800864c:	bfbb      	ittet	lt
 800864e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008652:	461d      	movlt	r5, r3
 8008654:	2300      	movge	r3, #0
 8008656:	232d      	movlt	r3, #45	; 0x2d
 8008658:	700b      	strb	r3, [r1, #0]
 800865a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800865c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008660:	4691      	mov	r9, r2
 8008662:	f023 0820 	bic.w	r8, r3, #32
 8008666:	bfbc      	itt	lt
 8008668:	4622      	movlt	r2, r4
 800866a:	4614      	movlt	r4, r2
 800866c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008670:	d005      	beq.n	800867e <__cvt+0x42>
 8008672:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008676:	d100      	bne.n	800867a <__cvt+0x3e>
 8008678:	3601      	adds	r6, #1
 800867a:	2102      	movs	r1, #2
 800867c:	e000      	b.n	8008680 <__cvt+0x44>
 800867e:	2103      	movs	r1, #3
 8008680:	ab03      	add	r3, sp, #12
 8008682:	9301      	str	r3, [sp, #4]
 8008684:	ab02      	add	r3, sp, #8
 8008686:	9300      	str	r3, [sp, #0]
 8008688:	ec45 4b10 	vmov	d0, r4, r5
 800868c:	4653      	mov	r3, sl
 800868e:	4632      	mov	r2, r6
 8008690:	f000 fcea 	bl	8009068 <_dtoa_r>
 8008694:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008698:	4607      	mov	r7, r0
 800869a:	d102      	bne.n	80086a2 <__cvt+0x66>
 800869c:	f019 0f01 	tst.w	r9, #1
 80086a0:	d022      	beq.n	80086e8 <__cvt+0xac>
 80086a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80086a6:	eb07 0906 	add.w	r9, r7, r6
 80086aa:	d110      	bne.n	80086ce <__cvt+0x92>
 80086ac:	783b      	ldrb	r3, [r7, #0]
 80086ae:	2b30      	cmp	r3, #48	; 0x30
 80086b0:	d10a      	bne.n	80086c8 <__cvt+0x8c>
 80086b2:	2200      	movs	r2, #0
 80086b4:	2300      	movs	r3, #0
 80086b6:	4620      	mov	r0, r4
 80086b8:	4629      	mov	r1, r5
 80086ba:	f7f8 fa1d 	bl	8000af8 <__aeabi_dcmpeq>
 80086be:	b918      	cbnz	r0, 80086c8 <__cvt+0x8c>
 80086c0:	f1c6 0601 	rsb	r6, r6, #1
 80086c4:	f8ca 6000 	str.w	r6, [sl]
 80086c8:	f8da 3000 	ldr.w	r3, [sl]
 80086cc:	4499      	add	r9, r3
 80086ce:	2200      	movs	r2, #0
 80086d0:	2300      	movs	r3, #0
 80086d2:	4620      	mov	r0, r4
 80086d4:	4629      	mov	r1, r5
 80086d6:	f7f8 fa0f 	bl	8000af8 <__aeabi_dcmpeq>
 80086da:	b108      	cbz	r0, 80086e0 <__cvt+0xa4>
 80086dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80086e0:	2230      	movs	r2, #48	; 0x30
 80086e2:	9b03      	ldr	r3, [sp, #12]
 80086e4:	454b      	cmp	r3, r9
 80086e6:	d307      	bcc.n	80086f8 <__cvt+0xbc>
 80086e8:	9b03      	ldr	r3, [sp, #12]
 80086ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086ec:	1bdb      	subs	r3, r3, r7
 80086ee:	4638      	mov	r0, r7
 80086f0:	6013      	str	r3, [r2, #0]
 80086f2:	b004      	add	sp, #16
 80086f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086f8:	1c59      	adds	r1, r3, #1
 80086fa:	9103      	str	r1, [sp, #12]
 80086fc:	701a      	strb	r2, [r3, #0]
 80086fe:	e7f0      	b.n	80086e2 <__cvt+0xa6>

08008700 <__exponent>:
 8008700:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008702:	4603      	mov	r3, r0
 8008704:	2900      	cmp	r1, #0
 8008706:	bfb8      	it	lt
 8008708:	4249      	neglt	r1, r1
 800870a:	f803 2b02 	strb.w	r2, [r3], #2
 800870e:	bfb4      	ite	lt
 8008710:	222d      	movlt	r2, #45	; 0x2d
 8008712:	222b      	movge	r2, #43	; 0x2b
 8008714:	2909      	cmp	r1, #9
 8008716:	7042      	strb	r2, [r0, #1]
 8008718:	dd2a      	ble.n	8008770 <__exponent+0x70>
 800871a:	f10d 0407 	add.w	r4, sp, #7
 800871e:	46a4      	mov	ip, r4
 8008720:	270a      	movs	r7, #10
 8008722:	46a6      	mov	lr, r4
 8008724:	460a      	mov	r2, r1
 8008726:	fb91 f6f7 	sdiv	r6, r1, r7
 800872a:	fb07 1516 	mls	r5, r7, r6, r1
 800872e:	3530      	adds	r5, #48	; 0x30
 8008730:	2a63      	cmp	r2, #99	; 0x63
 8008732:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008736:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800873a:	4631      	mov	r1, r6
 800873c:	dcf1      	bgt.n	8008722 <__exponent+0x22>
 800873e:	3130      	adds	r1, #48	; 0x30
 8008740:	f1ae 0502 	sub.w	r5, lr, #2
 8008744:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008748:	1c44      	adds	r4, r0, #1
 800874a:	4629      	mov	r1, r5
 800874c:	4561      	cmp	r1, ip
 800874e:	d30a      	bcc.n	8008766 <__exponent+0x66>
 8008750:	f10d 0209 	add.w	r2, sp, #9
 8008754:	eba2 020e 	sub.w	r2, r2, lr
 8008758:	4565      	cmp	r5, ip
 800875a:	bf88      	it	hi
 800875c:	2200      	movhi	r2, #0
 800875e:	4413      	add	r3, r2
 8008760:	1a18      	subs	r0, r3, r0
 8008762:	b003      	add	sp, #12
 8008764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008766:	f811 2b01 	ldrb.w	r2, [r1], #1
 800876a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800876e:	e7ed      	b.n	800874c <__exponent+0x4c>
 8008770:	2330      	movs	r3, #48	; 0x30
 8008772:	3130      	adds	r1, #48	; 0x30
 8008774:	7083      	strb	r3, [r0, #2]
 8008776:	70c1      	strb	r1, [r0, #3]
 8008778:	1d03      	adds	r3, r0, #4
 800877a:	e7f1      	b.n	8008760 <__exponent+0x60>

0800877c <_printf_float>:
 800877c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008780:	ed2d 8b02 	vpush	{d8}
 8008784:	b08d      	sub	sp, #52	; 0x34
 8008786:	460c      	mov	r4, r1
 8008788:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800878c:	4616      	mov	r6, r2
 800878e:	461f      	mov	r7, r3
 8008790:	4605      	mov	r5, r0
 8008792:	f001 fa55 	bl	8009c40 <_localeconv_r>
 8008796:	f8d0 a000 	ldr.w	sl, [r0]
 800879a:	4650      	mov	r0, sl
 800879c:	f7f7 fd2a 	bl	80001f4 <strlen>
 80087a0:	2300      	movs	r3, #0
 80087a2:	930a      	str	r3, [sp, #40]	; 0x28
 80087a4:	6823      	ldr	r3, [r4, #0]
 80087a6:	9305      	str	r3, [sp, #20]
 80087a8:	f8d8 3000 	ldr.w	r3, [r8]
 80087ac:	f894 b018 	ldrb.w	fp, [r4, #24]
 80087b0:	3307      	adds	r3, #7
 80087b2:	f023 0307 	bic.w	r3, r3, #7
 80087b6:	f103 0208 	add.w	r2, r3, #8
 80087ba:	f8c8 2000 	str.w	r2, [r8]
 80087be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80087c6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80087ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80087ce:	9307      	str	r3, [sp, #28]
 80087d0:	f8cd 8018 	str.w	r8, [sp, #24]
 80087d4:	ee08 0a10 	vmov	s16, r0
 80087d8:	4b9f      	ldr	r3, [pc, #636]	; (8008a58 <_printf_float+0x2dc>)
 80087da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80087e2:	f7f8 f9bb 	bl	8000b5c <__aeabi_dcmpun>
 80087e6:	bb88      	cbnz	r0, 800884c <_printf_float+0xd0>
 80087e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087ec:	4b9a      	ldr	r3, [pc, #616]	; (8008a58 <_printf_float+0x2dc>)
 80087ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80087f2:	f7f8 f995 	bl	8000b20 <__aeabi_dcmple>
 80087f6:	bb48      	cbnz	r0, 800884c <_printf_float+0xd0>
 80087f8:	2200      	movs	r2, #0
 80087fa:	2300      	movs	r3, #0
 80087fc:	4640      	mov	r0, r8
 80087fe:	4649      	mov	r1, r9
 8008800:	f7f8 f984 	bl	8000b0c <__aeabi_dcmplt>
 8008804:	b110      	cbz	r0, 800880c <_printf_float+0x90>
 8008806:	232d      	movs	r3, #45	; 0x2d
 8008808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800880c:	4b93      	ldr	r3, [pc, #588]	; (8008a5c <_printf_float+0x2e0>)
 800880e:	4894      	ldr	r0, [pc, #592]	; (8008a60 <_printf_float+0x2e4>)
 8008810:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008814:	bf94      	ite	ls
 8008816:	4698      	movls	r8, r3
 8008818:	4680      	movhi	r8, r0
 800881a:	2303      	movs	r3, #3
 800881c:	6123      	str	r3, [r4, #16]
 800881e:	9b05      	ldr	r3, [sp, #20]
 8008820:	f023 0204 	bic.w	r2, r3, #4
 8008824:	6022      	str	r2, [r4, #0]
 8008826:	f04f 0900 	mov.w	r9, #0
 800882a:	9700      	str	r7, [sp, #0]
 800882c:	4633      	mov	r3, r6
 800882e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008830:	4621      	mov	r1, r4
 8008832:	4628      	mov	r0, r5
 8008834:	f000 f9d8 	bl	8008be8 <_printf_common>
 8008838:	3001      	adds	r0, #1
 800883a:	f040 8090 	bne.w	800895e <_printf_float+0x1e2>
 800883e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008842:	b00d      	add	sp, #52	; 0x34
 8008844:	ecbd 8b02 	vpop	{d8}
 8008848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800884c:	4642      	mov	r2, r8
 800884e:	464b      	mov	r3, r9
 8008850:	4640      	mov	r0, r8
 8008852:	4649      	mov	r1, r9
 8008854:	f7f8 f982 	bl	8000b5c <__aeabi_dcmpun>
 8008858:	b140      	cbz	r0, 800886c <_printf_float+0xf0>
 800885a:	464b      	mov	r3, r9
 800885c:	2b00      	cmp	r3, #0
 800885e:	bfbc      	itt	lt
 8008860:	232d      	movlt	r3, #45	; 0x2d
 8008862:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008866:	487f      	ldr	r0, [pc, #508]	; (8008a64 <_printf_float+0x2e8>)
 8008868:	4b7f      	ldr	r3, [pc, #508]	; (8008a68 <_printf_float+0x2ec>)
 800886a:	e7d1      	b.n	8008810 <_printf_float+0x94>
 800886c:	6863      	ldr	r3, [r4, #4]
 800886e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008872:	9206      	str	r2, [sp, #24]
 8008874:	1c5a      	adds	r2, r3, #1
 8008876:	d13f      	bne.n	80088f8 <_printf_float+0x17c>
 8008878:	2306      	movs	r3, #6
 800887a:	6063      	str	r3, [r4, #4]
 800887c:	9b05      	ldr	r3, [sp, #20]
 800887e:	6861      	ldr	r1, [r4, #4]
 8008880:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008884:	2300      	movs	r3, #0
 8008886:	9303      	str	r3, [sp, #12]
 8008888:	ab0a      	add	r3, sp, #40	; 0x28
 800888a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800888e:	ab09      	add	r3, sp, #36	; 0x24
 8008890:	ec49 8b10 	vmov	d0, r8, r9
 8008894:	9300      	str	r3, [sp, #0]
 8008896:	6022      	str	r2, [r4, #0]
 8008898:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800889c:	4628      	mov	r0, r5
 800889e:	f7ff fecd 	bl	800863c <__cvt>
 80088a2:	9b06      	ldr	r3, [sp, #24]
 80088a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088a6:	2b47      	cmp	r3, #71	; 0x47
 80088a8:	4680      	mov	r8, r0
 80088aa:	d108      	bne.n	80088be <_printf_float+0x142>
 80088ac:	1cc8      	adds	r0, r1, #3
 80088ae:	db02      	blt.n	80088b6 <_printf_float+0x13a>
 80088b0:	6863      	ldr	r3, [r4, #4]
 80088b2:	4299      	cmp	r1, r3
 80088b4:	dd41      	ble.n	800893a <_printf_float+0x1be>
 80088b6:	f1ab 0b02 	sub.w	fp, fp, #2
 80088ba:	fa5f fb8b 	uxtb.w	fp, fp
 80088be:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80088c2:	d820      	bhi.n	8008906 <_printf_float+0x18a>
 80088c4:	3901      	subs	r1, #1
 80088c6:	465a      	mov	r2, fp
 80088c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80088cc:	9109      	str	r1, [sp, #36]	; 0x24
 80088ce:	f7ff ff17 	bl	8008700 <__exponent>
 80088d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088d4:	1813      	adds	r3, r2, r0
 80088d6:	2a01      	cmp	r2, #1
 80088d8:	4681      	mov	r9, r0
 80088da:	6123      	str	r3, [r4, #16]
 80088dc:	dc02      	bgt.n	80088e4 <_printf_float+0x168>
 80088de:	6822      	ldr	r2, [r4, #0]
 80088e0:	07d2      	lsls	r2, r2, #31
 80088e2:	d501      	bpl.n	80088e8 <_printf_float+0x16c>
 80088e4:	3301      	adds	r3, #1
 80088e6:	6123      	str	r3, [r4, #16]
 80088e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d09c      	beq.n	800882a <_printf_float+0xae>
 80088f0:	232d      	movs	r3, #45	; 0x2d
 80088f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088f6:	e798      	b.n	800882a <_printf_float+0xae>
 80088f8:	9a06      	ldr	r2, [sp, #24]
 80088fa:	2a47      	cmp	r2, #71	; 0x47
 80088fc:	d1be      	bne.n	800887c <_printf_float+0x100>
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d1bc      	bne.n	800887c <_printf_float+0x100>
 8008902:	2301      	movs	r3, #1
 8008904:	e7b9      	b.n	800887a <_printf_float+0xfe>
 8008906:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800890a:	d118      	bne.n	800893e <_printf_float+0x1c2>
 800890c:	2900      	cmp	r1, #0
 800890e:	6863      	ldr	r3, [r4, #4]
 8008910:	dd0b      	ble.n	800892a <_printf_float+0x1ae>
 8008912:	6121      	str	r1, [r4, #16]
 8008914:	b913      	cbnz	r3, 800891c <_printf_float+0x1a0>
 8008916:	6822      	ldr	r2, [r4, #0]
 8008918:	07d0      	lsls	r0, r2, #31
 800891a:	d502      	bpl.n	8008922 <_printf_float+0x1a6>
 800891c:	3301      	adds	r3, #1
 800891e:	440b      	add	r3, r1
 8008920:	6123      	str	r3, [r4, #16]
 8008922:	65a1      	str	r1, [r4, #88]	; 0x58
 8008924:	f04f 0900 	mov.w	r9, #0
 8008928:	e7de      	b.n	80088e8 <_printf_float+0x16c>
 800892a:	b913      	cbnz	r3, 8008932 <_printf_float+0x1b6>
 800892c:	6822      	ldr	r2, [r4, #0]
 800892e:	07d2      	lsls	r2, r2, #31
 8008930:	d501      	bpl.n	8008936 <_printf_float+0x1ba>
 8008932:	3302      	adds	r3, #2
 8008934:	e7f4      	b.n	8008920 <_printf_float+0x1a4>
 8008936:	2301      	movs	r3, #1
 8008938:	e7f2      	b.n	8008920 <_printf_float+0x1a4>
 800893a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800893e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008940:	4299      	cmp	r1, r3
 8008942:	db05      	blt.n	8008950 <_printf_float+0x1d4>
 8008944:	6823      	ldr	r3, [r4, #0]
 8008946:	6121      	str	r1, [r4, #16]
 8008948:	07d8      	lsls	r0, r3, #31
 800894a:	d5ea      	bpl.n	8008922 <_printf_float+0x1a6>
 800894c:	1c4b      	adds	r3, r1, #1
 800894e:	e7e7      	b.n	8008920 <_printf_float+0x1a4>
 8008950:	2900      	cmp	r1, #0
 8008952:	bfd4      	ite	le
 8008954:	f1c1 0202 	rsble	r2, r1, #2
 8008958:	2201      	movgt	r2, #1
 800895a:	4413      	add	r3, r2
 800895c:	e7e0      	b.n	8008920 <_printf_float+0x1a4>
 800895e:	6823      	ldr	r3, [r4, #0]
 8008960:	055a      	lsls	r2, r3, #21
 8008962:	d407      	bmi.n	8008974 <_printf_float+0x1f8>
 8008964:	6923      	ldr	r3, [r4, #16]
 8008966:	4642      	mov	r2, r8
 8008968:	4631      	mov	r1, r6
 800896a:	4628      	mov	r0, r5
 800896c:	47b8      	blx	r7
 800896e:	3001      	adds	r0, #1
 8008970:	d12c      	bne.n	80089cc <_printf_float+0x250>
 8008972:	e764      	b.n	800883e <_printf_float+0xc2>
 8008974:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008978:	f240 80e0 	bls.w	8008b3c <_printf_float+0x3c0>
 800897c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008980:	2200      	movs	r2, #0
 8008982:	2300      	movs	r3, #0
 8008984:	f7f8 f8b8 	bl	8000af8 <__aeabi_dcmpeq>
 8008988:	2800      	cmp	r0, #0
 800898a:	d034      	beq.n	80089f6 <_printf_float+0x27a>
 800898c:	4a37      	ldr	r2, [pc, #220]	; (8008a6c <_printf_float+0x2f0>)
 800898e:	2301      	movs	r3, #1
 8008990:	4631      	mov	r1, r6
 8008992:	4628      	mov	r0, r5
 8008994:	47b8      	blx	r7
 8008996:	3001      	adds	r0, #1
 8008998:	f43f af51 	beq.w	800883e <_printf_float+0xc2>
 800899c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089a0:	429a      	cmp	r2, r3
 80089a2:	db02      	blt.n	80089aa <_printf_float+0x22e>
 80089a4:	6823      	ldr	r3, [r4, #0]
 80089a6:	07d8      	lsls	r0, r3, #31
 80089a8:	d510      	bpl.n	80089cc <_printf_float+0x250>
 80089aa:	ee18 3a10 	vmov	r3, s16
 80089ae:	4652      	mov	r2, sl
 80089b0:	4631      	mov	r1, r6
 80089b2:	4628      	mov	r0, r5
 80089b4:	47b8      	blx	r7
 80089b6:	3001      	adds	r0, #1
 80089b8:	f43f af41 	beq.w	800883e <_printf_float+0xc2>
 80089bc:	f04f 0800 	mov.w	r8, #0
 80089c0:	f104 091a 	add.w	r9, r4, #26
 80089c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089c6:	3b01      	subs	r3, #1
 80089c8:	4543      	cmp	r3, r8
 80089ca:	dc09      	bgt.n	80089e0 <_printf_float+0x264>
 80089cc:	6823      	ldr	r3, [r4, #0]
 80089ce:	079b      	lsls	r3, r3, #30
 80089d0:	f100 8105 	bmi.w	8008bde <_printf_float+0x462>
 80089d4:	68e0      	ldr	r0, [r4, #12]
 80089d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089d8:	4298      	cmp	r0, r3
 80089da:	bfb8      	it	lt
 80089dc:	4618      	movlt	r0, r3
 80089de:	e730      	b.n	8008842 <_printf_float+0xc6>
 80089e0:	2301      	movs	r3, #1
 80089e2:	464a      	mov	r2, r9
 80089e4:	4631      	mov	r1, r6
 80089e6:	4628      	mov	r0, r5
 80089e8:	47b8      	blx	r7
 80089ea:	3001      	adds	r0, #1
 80089ec:	f43f af27 	beq.w	800883e <_printf_float+0xc2>
 80089f0:	f108 0801 	add.w	r8, r8, #1
 80089f4:	e7e6      	b.n	80089c4 <_printf_float+0x248>
 80089f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	dc39      	bgt.n	8008a70 <_printf_float+0x2f4>
 80089fc:	4a1b      	ldr	r2, [pc, #108]	; (8008a6c <_printf_float+0x2f0>)
 80089fe:	2301      	movs	r3, #1
 8008a00:	4631      	mov	r1, r6
 8008a02:	4628      	mov	r0, r5
 8008a04:	47b8      	blx	r7
 8008a06:	3001      	adds	r0, #1
 8008a08:	f43f af19 	beq.w	800883e <_printf_float+0xc2>
 8008a0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a10:	4313      	orrs	r3, r2
 8008a12:	d102      	bne.n	8008a1a <_printf_float+0x29e>
 8008a14:	6823      	ldr	r3, [r4, #0]
 8008a16:	07d9      	lsls	r1, r3, #31
 8008a18:	d5d8      	bpl.n	80089cc <_printf_float+0x250>
 8008a1a:	ee18 3a10 	vmov	r3, s16
 8008a1e:	4652      	mov	r2, sl
 8008a20:	4631      	mov	r1, r6
 8008a22:	4628      	mov	r0, r5
 8008a24:	47b8      	blx	r7
 8008a26:	3001      	adds	r0, #1
 8008a28:	f43f af09 	beq.w	800883e <_printf_float+0xc2>
 8008a2c:	f04f 0900 	mov.w	r9, #0
 8008a30:	f104 0a1a 	add.w	sl, r4, #26
 8008a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a36:	425b      	negs	r3, r3
 8008a38:	454b      	cmp	r3, r9
 8008a3a:	dc01      	bgt.n	8008a40 <_printf_float+0x2c4>
 8008a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a3e:	e792      	b.n	8008966 <_printf_float+0x1ea>
 8008a40:	2301      	movs	r3, #1
 8008a42:	4652      	mov	r2, sl
 8008a44:	4631      	mov	r1, r6
 8008a46:	4628      	mov	r0, r5
 8008a48:	47b8      	blx	r7
 8008a4a:	3001      	adds	r0, #1
 8008a4c:	f43f aef7 	beq.w	800883e <_printf_float+0xc2>
 8008a50:	f109 0901 	add.w	r9, r9, #1
 8008a54:	e7ee      	b.n	8008a34 <_printf_float+0x2b8>
 8008a56:	bf00      	nop
 8008a58:	7fefffff 	.word	0x7fefffff
 8008a5c:	0800bc88 	.word	0x0800bc88
 8008a60:	0800bc8c 	.word	0x0800bc8c
 8008a64:	0800bc94 	.word	0x0800bc94
 8008a68:	0800bc90 	.word	0x0800bc90
 8008a6c:	0800bc98 	.word	0x0800bc98
 8008a70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a74:	429a      	cmp	r2, r3
 8008a76:	bfa8      	it	ge
 8008a78:	461a      	movge	r2, r3
 8008a7a:	2a00      	cmp	r2, #0
 8008a7c:	4691      	mov	r9, r2
 8008a7e:	dc37      	bgt.n	8008af0 <_printf_float+0x374>
 8008a80:	f04f 0b00 	mov.w	fp, #0
 8008a84:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a88:	f104 021a 	add.w	r2, r4, #26
 8008a8c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a8e:	9305      	str	r3, [sp, #20]
 8008a90:	eba3 0309 	sub.w	r3, r3, r9
 8008a94:	455b      	cmp	r3, fp
 8008a96:	dc33      	bgt.n	8008b00 <_printf_float+0x384>
 8008a98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	db3b      	blt.n	8008b18 <_printf_float+0x39c>
 8008aa0:	6823      	ldr	r3, [r4, #0]
 8008aa2:	07da      	lsls	r2, r3, #31
 8008aa4:	d438      	bmi.n	8008b18 <_printf_float+0x39c>
 8008aa6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008aa8:	9b05      	ldr	r3, [sp, #20]
 8008aaa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	eba2 0901 	sub.w	r9, r2, r1
 8008ab2:	4599      	cmp	r9, r3
 8008ab4:	bfa8      	it	ge
 8008ab6:	4699      	movge	r9, r3
 8008ab8:	f1b9 0f00 	cmp.w	r9, #0
 8008abc:	dc35      	bgt.n	8008b2a <_printf_float+0x3ae>
 8008abe:	f04f 0800 	mov.w	r8, #0
 8008ac2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ac6:	f104 0a1a 	add.w	sl, r4, #26
 8008aca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ace:	1a9b      	subs	r3, r3, r2
 8008ad0:	eba3 0309 	sub.w	r3, r3, r9
 8008ad4:	4543      	cmp	r3, r8
 8008ad6:	f77f af79 	ble.w	80089cc <_printf_float+0x250>
 8008ada:	2301      	movs	r3, #1
 8008adc:	4652      	mov	r2, sl
 8008ade:	4631      	mov	r1, r6
 8008ae0:	4628      	mov	r0, r5
 8008ae2:	47b8      	blx	r7
 8008ae4:	3001      	adds	r0, #1
 8008ae6:	f43f aeaa 	beq.w	800883e <_printf_float+0xc2>
 8008aea:	f108 0801 	add.w	r8, r8, #1
 8008aee:	e7ec      	b.n	8008aca <_printf_float+0x34e>
 8008af0:	4613      	mov	r3, r2
 8008af2:	4631      	mov	r1, r6
 8008af4:	4642      	mov	r2, r8
 8008af6:	4628      	mov	r0, r5
 8008af8:	47b8      	blx	r7
 8008afa:	3001      	adds	r0, #1
 8008afc:	d1c0      	bne.n	8008a80 <_printf_float+0x304>
 8008afe:	e69e      	b.n	800883e <_printf_float+0xc2>
 8008b00:	2301      	movs	r3, #1
 8008b02:	4631      	mov	r1, r6
 8008b04:	4628      	mov	r0, r5
 8008b06:	9205      	str	r2, [sp, #20]
 8008b08:	47b8      	blx	r7
 8008b0a:	3001      	adds	r0, #1
 8008b0c:	f43f ae97 	beq.w	800883e <_printf_float+0xc2>
 8008b10:	9a05      	ldr	r2, [sp, #20]
 8008b12:	f10b 0b01 	add.w	fp, fp, #1
 8008b16:	e7b9      	b.n	8008a8c <_printf_float+0x310>
 8008b18:	ee18 3a10 	vmov	r3, s16
 8008b1c:	4652      	mov	r2, sl
 8008b1e:	4631      	mov	r1, r6
 8008b20:	4628      	mov	r0, r5
 8008b22:	47b8      	blx	r7
 8008b24:	3001      	adds	r0, #1
 8008b26:	d1be      	bne.n	8008aa6 <_printf_float+0x32a>
 8008b28:	e689      	b.n	800883e <_printf_float+0xc2>
 8008b2a:	9a05      	ldr	r2, [sp, #20]
 8008b2c:	464b      	mov	r3, r9
 8008b2e:	4442      	add	r2, r8
 8008b30:	4631      	mov	r1, r6
 8008b32:	4628      	mov	r0, r5
 8008b34:	47b8      	blx	r7
 8008b36:	3001      	adds	r0, #1
 8008b38:	d1c1      	bne.n	8008abe <_printf_float+0x342>
 8008b3a:	e680      	b.n	800883e <_printf_float+0xc2>
 8008b3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b3e:	2a01      	cmp	r2, #1
 8008b40:	dc01      	bgt.n	8008b46 <_printf_float+0x3ca>
 8008b42:	07db      	lsls	r3, r3, #31
 8008b44:	d538      	bpl.n	8008bb8 <_printf_float+0x43c>
 8008b46:	2301      	movs	r3, #1
 8008b48:	4642      	mov	r2, r8
 8008b4a:	4631      	mov	r1, r6
 8008b4c:	4628      	mov	r0, r5
 8008b4e:	47b8      	blx	r7
 8008b50:	3001      	adds	r0, #1
 8008b52:	f43f ae74 	beq.w	800883e <_printf_float+0xc2>
 8008b56:	ee18 3a10 	vmov	r3, s16
 8008b5a:	4652      	mov	r2, sl
 8008b5c:	4631      	mov	r1, r6
 8008b5e:	4628      	mov	r0, r5
 8008b60:	47b8      	blx	r7
 8008b62:	3001      	adds	r0, #1
 8008b64:	f43f ae6b 	beq.w	800883e <_printf_float+0xc2>
 8008b68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	2300      	movs	r3, #0
 8008b70:	f7f7 ffc2 	bl	8000af8 <__aeabi_dcmpeq>
 8008b74:	b9d8      	cbnz	r0, 8008bae <_printf_float+0x432>
 8008b76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b78:	f108 0201 	add.w	r2, r8, #1
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	4631      	mov	r1, r6
 8008b80:	4628      	mov	r0, r5
 8008b82:	47b8      	blx	r7
 8008b84:	3001      	adds	r0, #1
 8008b86:	d10e      	bne.n	8008ba6 <_printf_float+0x42a>
 8008b88:	e659      	b.n	800883e <_printf_float+0xc2>
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	4652      	mov	r2, sl
 8008b8e:	4631      	mov	r1, r6
 8008b90:	4628      	mov	r0, r5
 8008b92:	47b8      	blx	r7
 8008b94:	3001      	adds	r0, #1
 8008b96:	f43f ae52 	beq.w	800883e <_printf_float+0xc2>
 8008b9a:	f108 0801 	add.w	r8, r8, #1
 8008b9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ba0:	3b01      	subs	r3, #1
 8008ba2:	4543      	cmp	r3, r8
 8008ba4:	dcf1      	bgt.n	8008b8a <_printf_float+0x40e>
 8008ba6:	464b      	mov	r3, r9
 8008ba8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008bac:	e6dc      	b.n	8008968 <_printf_float+0x1ec>
 8008bae:	f04f 0800 	mov.w	r8, #0
 8008bb2:	f104 0a1a 	add.w	sl, r4, #26
 8008bb6:	e7f2      	b.n	8008b9e <_printf_float+0x422>
 8008bb8:	2301      	movs	r3, #1
 8008bba:	4642      	mov	r2, r8
 8008bbc:	e7df      	b.n	8008b7e <_printf_float+0x402>
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	464a      	mov	r2, r9
 8008bc2:	4631      	mov	r1, r6
 8008bc4:	4628      	mov	r0, r5
 8008bc6:	47b8      	blx	r7
 8008bc8:	3001      	adds	r0, #1
 8008bca:	f43f ae38 	beq.w	800883e <_printf_float+0xc2>
 8008bce:	f108 0801 	add.w	r8, r8, #1
 8008bd2:	68e3      	ldr	r3, [r4, #12]
 8008bd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008bd6:	1a5b      	subs	r3, r3, r1
 8008bd8:	4543      	cmp	r3, r8
 8008bda:	dcf0      	bgt.n	8008bbe <_printf_float+0x442>
 8008bdc:	e6fa      	b.n	80089d4 <_printf_float+0x258>
 8008bde:	f04f 0800 	mov.w	r8, #0
 8008be2:	f104 0919 	add.w	r9, r4, #25
 8008be6:	e7f4      	b.n	8008bd2 <_printf_float+0x456>

08008be8 <_printf_common>:
 8008be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bec:	4616      	mov	r6, r2
 8008bee:	4699      	mov	r9, r3
 8008bf0:	688a      	ldr	r2, [r1, #8]
 8008bf2:	690b      	ldr	r3, [r1, #16]
 8008bf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	bfb8      	it	lt
 8008bfc:	4613      	movlt	r3, r2
 8008bfe:	6033      	str	r3, [r6, #0]
 8008c00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c04:	4607      	mov	r7, r0
 8008c06:	460c      	mov	r4, r1
 8008c08:	b10a      	cbz	r2, 8008c0e <_printf_common+0x26>
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	6033      	str	r3, [r6, #0]
 8008c0e:	6823      	ldr	r3, [r4, #0]
 8008c10:	0699      	lsls	r1, r3, #26
 8008c12:	bf42      	ittt	mi
 8008c14:	6833      	ldrmi	r3, [r6, #0]
 8008c16:	3302      	addmi	r3, #2
 8008c18:	6033      	strmi	r3, [r6, #0]
 8008c1a:	6825      	ldr	r5, [r4, #0]
 8008c1c:	f015 0506 	ands.w	r5, r5, #6
 8008c20:	d106      	bne.n	8008c30 <_printf_common+0x48>
 8008c22:	f104 0a19 	add.w	sl, r4, #25
 8008c26:	68e3      	ldr	r3, [r4, #12]
 8008c28:	6832      	ldr	r2, [r6, #0]
 8008c2a:	1a9b      	subs	r3, r3, r2
 8008c2c:	42ab      	cmp	r3, r5
 8008c2e:	dc26      	bgt.n	8008c7e <_printf_common+0x96>
 8008c30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c34:	1e13      	subs	r3, r2, #0
 8008c36:	6822      	ldr	r2, [r4, #0]
 8008c38:	bf18      	it	ne
 8008c3a:	2301      	movne	r3, #1
 8008c3c:	0692      	lsls	r2, r2, #26
 8008c3e:	d42b      	bmi.n	8008c98 <_printf_common+0xb0>
 8008c40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c44:	4649      	mov	r1, r9
 8008c46:	4638      	mov	r0, r7
 8008c48:	47c0      	blx	r8
 8008c4a:	3001      	adds	r0, #1
 8008c4c:	d01e      	beq.n	8008c8c <_printf_common+0xa4>
 8008c4e:	6823      	ldr	r3, [r4, #0]
 8008c50:	68e5      	ldr	r5, [r4, #12]
 8008c52:	6832      	ldr	r2, [r6, #0]
 8008c54:	f003 0306 	and.w	r3, r3, #6
 8008c58:	2b04      	cmp	r3, #4
 8008c5a:	bf08      	it	eq
 8008c5c:	1aad      	subeq	r5, r5, r2
 8008c5e:	68a3      	ldr	r3, [r4, #8]
 8008c60:	6922      	ldr	r2, [r4, #16]
 8008c62:	bf0c      	ite	eq
 8008c64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c68:	2500      	movne	r5, #0
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	bfc4      	itt	gt
 8008c6e:	1a9b      	subgt	r3, r3, r2
 8008c70:	18ed      	addgt	r5, r5, r3
 8008c72:	2600      	movs	r6, #0
 8008c74:	341a      	adds	r4, #26
 8008c76:	42b5      	cmp	r5, r6
 8008c78:	d11a      	bne.n	8008cb0 <_printf_common+0xc8>
 8008c7a:	2000      	movs	r0, #0
 8008c7c:	e008      	b.n	8008c90 <_printf_common+0xa8>
 8008c7e:	2301      	movs	r3, #1
 8008c80:	4652      	mov	r2, sl
 8008c82:	4649      	mov	r1, r9
 8008c84:	4638      	mov	r0, r7
 8008c86:	47c0      	blx	r8
 8008c88:	3001      	adds	r0, #1
 8008c8a:	d103      	bne.n	8008c94 <_printf_common+0xac>
 8008c8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c94:	3501      	adds	r5, #1
 8008c96:	e7c6      	b.n	8008c26 <_printf_common+0x3e>
 8008c98:	18e1      	adds	r1, r4, r3
 8008c9a:	1c5a      	adds	r2, r3, #1
 8008c9c:	2030      	movs	r0, #48	; 0x30
 8008c9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ca2:	4422      	add	r2, r4
 8008ca4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ca8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008cac:	3302      	adds	r3, #2
 8008cae:	e7c7      	b.n	8008c40 <_printf_common+0x58>
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	4622      	mov	r2, r4
 8008cb4:	4649      	mov	r1, r9
 8008cb6:	4638      	mov	r0, r7
 8008cb8:	47c0      	blx	r8
 8008cba:	3001      	adds	r0, #1
 8008cbc:	d0e6      	beq.n	8008c8c <_printf_common+0xa4>
 8008cbe:	3601      	adds	r6, #1
 8008cc0:	e7d9      	b.n	8008c76 <_printf_common+0x8e>
	...

08008cc4 <_printf_i>:
 8008cc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cc8:	460c      	mov	r4, r1
 8008cca:	4691      	mov	r9, r2
 8008ccc:	7e27      	ldrb	r7, [r4, #24]
 8008cce:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008cd0:	2f78      	cmp	r7, #120	; 0x78
 8008cd2:	4680      	mov	r8, r0
 8008cd4:	469a      	mov	sl, r3
 8008cd6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008cda:	d807      	bhi.n	8008cec <_printf_i+0x28>
 8008cdc:	2f62      	cmp	r7, #98	; 0x62
 8008cde:	d80a      	bhi.n	8008cf6 <_printf_i+0x32>
 8008ce0:	2f00      	cmp	r7, #0
 8008ce2:	f000 80d8 	beq.w	8008e96 <_printf_i+0x1d2>
 8008ce6:	2f58      	cmp	r7, #88	; 0x58
 8008ce8:	f000 80a3 	beq.w	8008e32 <_printf_i+0x16e>
 8008cec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008cf0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008cf4:	e03a      	b.n	8008d6c <_printf_i+0xa8>
 8008cf6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008cfa:	2b15      	cmp	r3, #21
 8008cfc:	d8f6      	bhi.n	8008cec <_printf_i+0x28>
 8008cfe:	a001      	add	r0, pc, #4	; (adr r0, 8008d04 <_printf_i+0x40>)
 8008d00:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008d04:	08008d5d 	.word	0x08008d5d
 8008d08:	08008d71 	.word	0x08008d71
 8008d0c:	08008ced 	.word	0x08008ced
 8008d10:	08008ced 	.word	0x08008ced
 8008d14:	08008ced 	.word	0x08008ced
 8008d18:	08008ced 	.word	0x08008ced
 8008d1c:	08008d71 	.word	0x08008d71
 8008d20:	08008ced 	.word	0x08008ced
 8008d24:	08008ced 	.word	0x08008ced
 8008d28:	08008ced 	.word	0x08008ced
 8008d2c:	08008ced 	.word	0x08008ced
 8008d30:	08008e7d 	.word	0x08008e7d
 8008d34:	08008da1 	.word	0x08008da1
 8008d38:	08008e5f 	.word	0x08008e5f
 8008d3c:	08008ced 	.word	0x08008ced
 8008d40:	08008ced 	.word	0x08008ced
 8008d44:	08008e9f 	.word	0x08008e9f
 8008d48:	08008ced 	.word	0x08008ced
 8008d4c:	08008da1 	.word	0x08008da1
 8008d50:	08008ced 	.word	0x08008ced
 8008d54:	08008ced 	.word	0x08008ced
 8008d58:	08008e67 	.word	0x08008e67
 8008d5c:	680b      	ldr	r3, [r1, #0]
 8008d5e:	1d1a      	adds	r2, r3, #4
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	600a      	str	r2, [r1, #0]
 8008d64:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008d68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	e0a3      	b.n	8008eb8 <_printf_i+0x1f4>
 8008d70:	6825      	ldr	r5, [r4, #0]
 8008d72:	6808      	ldr	r0, [r1, #0]
 8008d74:	062e      	lsls	r6, r5, #24
 8008d76:	f100 0304 	add.w	r3, r0, #4
 8008d7a:	d50a      	bpl.n	8008d92 <_printf_i+0xce>
 8008d7c:	6805      	ldr	r5, [r0, #0]
 8008d7e:	600b      	str	r3, [r1, #0]
 8008d80:	2d00      	cmp	r5, #0
 8008d82:	da03      	bge.n	8008d8c <_printf_i+0xc8>
 8008d84:	232d      	movs	r3, #45	; 0x2d
 8008d86:	426d      	negs	r5, r5
 8008d88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d8c:	485e      	ldr	r0, [pc, #376]	; (8008f08 <_printf_i+0x244>)
 8008d8e:	230a      	movs	r3, #10
 8008d90:	e019      	b.n	8008dc6 <_printf_i+0x102>
 8008d92:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008d96:	6805      	ldr	r5, [r0, #0]
 8008d98:	600b      	str	r3, [r1, #0]
 8008d9a:	bf18      	it	ne
 8008d9c:	b22d      	sxthne	r5, r5
 8008d9e:	e7ef      	b.n	8008d80 <_printf_i+0xbc>
 8008da0:	680b      	ldr	r3, [r1, #0]
 8008da2:	6825      	ldr	r5, [r4, #0]
 8008da4:	1d18      	adds	r0, r3, #4
 8008da6:	6008      	str	r0, [r1, #0]
 8008da8:	0628      	lsls	r0, r5, #24
 8008daa:	d501      	bpl.n	8008db0 <_printf_i+0xec>
 8008dac:	681d      	ldr	r5, [r3, #0]
 8008dae:	e002      	b.n	8008db6 <_printf_i+0xf2>
 8008db0:	0669      	lsls	r1, r5, #25
 8008db2:	d5fb      	bpl.n	8008dac <_printf_i+0xe8>
 8008db4:	881d      	ldrh	r5, [r3, #0]
 8008db6:	4854      	ldr	r0, [pc, #336]	; (8008f08 <_printf_i+0x244>)
 8008db8:	2f6f      	cmp	r7, #111	; 0x6f
 8008dba:	bf0c      	ite	eq
 8008dbc:	2308      	moveq	r3, #8
 8008dbe:	230a      	movne	r3, #10
 8008dc0:	2100      	movs	r1, #0
 8008dc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008dc6:	6866      	ldr	r6, [r4, #4]
 8008dc8:	60a6      	str	r6, [r4, #8]
 8008dca:	2e00      	cmp	r6, #0
 8008dcc:	bfa2      	ittt	ge
 8008dce:	6821      	ldrge	r1, [r4, #0]
 8008dd0:	f021 0104 	bicge.w	r1, r1, #4
 8008dd4:	6021      	strge	r1, [r4, #0]
 8008dd6:	b90d      	cbnz	r5, 8008ddc <_printf_i+0x118>
 8008dd8:	2e00      	cmp	r6, #0
 8008dda:	d04d      	beq.n	8008e78 <_printf_i+0x1b4>
 8008ddc:	4616      	mov	r6, r2
 8008dde:	fbb5 f1f3 	udiv	r1, r5, r3
 8008de2:	fb03 5711 	mls	r7, r3, r1, r5
 8008de6:	5dc7      	ldrb	r7, [r0, r7]
 8008de8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008dec:	462f      	mov	r7, r5
 8008dee:	42bb      	cmp	r3, r7
 8008df0:	460d      	mov	r5, r1
 8008df2:	d9f4      	bls.n	8008dde <_printf_i+0x11a>
 8008df4:	2b08      	cmp	r3, #8
 8008df6:	d10b      	bne.n	8008e10 <_printf_i+0x14c>
 8008df8:	6823      	ldr	r3, [r4, #0]
 8008dfa:	07df      	lsls	r7, r3, #31
 8008dfc:	d508      	bpl.n	8008e10 <_printf_i+0x14c>
 8008dfe:	6923      	ldr	r3, [r4, #16]
 8008e00:	6861      	ldr	r1, [r4, #4]
 8008e02:	4299      	cmp	r1, r3
 8008e04:	bfde      	ittt	le
 8008e06:	2330      	movle	r3, #48	; 0x30
 8008e08:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008e0c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008e10:	1b92      	subs	r2, r2, r6
 8008e12:	6122      	str	r2, [r4, #16]
 8008e14:	f8cd a000 	str.w	sl, [sp]
 8008e18:	464b      	mov	r3, r9
 8008e1a:	aa03      	add	r2, sp, #12
 8008e1c:	4621      	mov	r1, r4
 8008e1e:	4640      	mov	r0, r8
 8008e20:	f7ff fee2 	bl	8008be8 <_printf_common>
 8008e24:	3001      	adds	r0, #1
 8008e26:	d14c      	bne.n	8008ec2 <_printf_i+0x1fe>
 8008e28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e2c:	b004      	add	sp, #16
 8008e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e32:	4835      	ldr	r0, [pc, #212]	; (8008f08 <_printf_i+0x244>)
 8008e34:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008e38:	6823      	ldr	r3, [r4, #0]
 8008e3a:	680e      	ldr	r6, [r1, #0]
 8008e3c:	061f      	lsls	r7, r3, #24
 8008e3e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008e42:	600e      	str	r6, [r1, #0]
 8008e44:	d514      	bpl.n	8008e70 <_printf_i+0x1ac>
 8008e46:	07d9      	lsls	r1, r3, #31
 8008e48:	bf44      	itt	mi
 8008e4a:	f043 0320 	orrmi.w	r3, r3, #32
 8008e4e:	6023      	strmi	r3, [r4, #0]
 8008e50:	b91d      	cbnz	r5, 8008e5a <_printf_i+0x196>
 8008e52:	6823      	ldr	r3, [r4, #0]
 8008e54:	f023 0320 	bic.w	r3, r3, #32
 8008e58:	6023      	str	r3, [r4, #0]
 8008e5a:	2310      	movs	r3, #16
 8008e5c:	e7b0      	b.n	8008dc0 <_printf_i+0xfc>
 8008e5e:	6823      	ldr	r3, [r4, #0]
 8008e60:	f043 0320 	orr.w	r3, r3, #32
 8008e64:	6023      	str	r3, [r4, #0]
 8008e66:	2378      	movs	r3, #120	; 0x78
 8008e68:	4828      	ldr	r0, [pc, #160]	; (8008f0c <_printf_i+0x248>)
 8008e6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e6e:	e7e3      	b.n	8008e38 <_printf_i+0x174>
 8008e70:	065e      	lsls	r6, r3, #25
 8008e72:	bf48      	it	mi
 8008e74:	b2ad      	uxthmi	r5, r5
 8008e76:	e7e6      	b.n	8008e46 <_printf_i+0x182>
 8008e78:	4616      	mov	r6, r2
 8008e7a:	e7bb      	b.n	8008df4 <_printf_i+0x130>
 8008e7c:	680b      	ldr	r3, [r1, #0]
 8008e7e:	6826      	ldr	r6, [r4, #0]
 8008e80:	6960      	ldr	r0, [r4, #20]
 8008e82:	1d1d      	adds	r5, r3, #4
 8008e84:	600d      	str	r5, [r1, #0]
 8008e86:	0635      	lsls	r5, r6, #24
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	d501      	bpl.n	8008e90 <_printf_i+0x1cc>
 8008e8c:	6018      	str	r0, [r3, #0]
 8008e8e:	e002      	b.n	8008e96 <_printf_i+0x1d2>
 8008e90:	0671      	lsls	r1, r6, #25
 8008e92:	d5fb      	bpl.n	8008e8c <_printf_i+0x1c8>
 8008e94:	8018      	strh	r0, [r3, #0]
 8008e96:	2300      	movs	r3, #0
 8008e98:	6123      	str	r3, [r4, #16]
 8008e9a:	4616      	mov	r6, r2
 8008e9c:	e7ba      	b.n	8008e14 <_printf_i+0x150>
 8008e9e:	680b      	ldr	r3, [r1, #0]
 8008ea0:	1d1a      	adds	r2, r3, #4
 8008ea2:	600a      	str	r2, [r1, #0]
 8008ea4:	681e      	ldr	r6, [r3, #0]
 8008ea6:	6862      	ldr	r2, [r4, #4]
 8008ea8:	2100      	movs	r1, #0
 8008eaa:	4630      	mov	r0, r6
 8008eac:	f7f7 f9b0 	bl	8000210 <memchr>
 8008eb0:	b108      	cbz	r0, 8008eb6 <_printf_i+0x1f2>
 8008eb2:	1b80      	subs	r0, r0, r6
 8008eb4:	6060      	str	r0, [r4, #4]
 8008eb6:	6863      	ldr	r3, [r4, #4]
 8008eb8:	6123      	str	r3, [r4, #16]
 8008eba:	2300      	movs	r3, #0
 8008ebc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ec0:	e7a8      	b.n	8008e14 <_printf_i+0x150>
 8008ec2:	6923      	ldr	r3, [r4, #16]
 8008ec4:	4632      	mov	r2, r6
 8008ec6:	4649      	mov	r1, r9
 8008ec8:	4640      	mov	r0, r8
 8008eca:	47d0      	blx	sl
 8008ecc:	3001      	adds	r0, #1
 8008ece:	d0ab      	beq.n	8008e28 <_printf_i+0x164>
 8008ed0:	6823      	ldr	r3, [r4, #0]
 8008ed2:	079b      	lsls	r3, r3, #30
 8008ed4:	d413      	bmi.n	8008efe <_printf_i+0x23a>
 8008ed6:	68e0      	ldr	r0, [r4, #12]
 8008ed8:	9b03      	ldr	r3, [sp, #12]
 8008eda:	4298      	cmp	r0, r3
 8008edc:	bfb8      	it	lt
 8008ede:	4618      	movlt	r0, r3
 8008ee0:	e7a4      	b.n	8008e2c <_printf_i+0x168>
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	4632      	mov	r2, r6
 8008ee6:	4649      	mov	r1, r9
 8008ee8:	4640      	mov	r0, r8
 8008eea:	47d0      	blx	sl
 8008eec:	3001      	adds	r0, #1
 8008eee:	d09b      	beq.n	8008e28 <_printf_i+0x164>
 8008ef0:	3501      	adds	r5, #1
 8008ef2:	68e3      	ldr	r3, [r4, #12]
 8008ef4:	9903      	ldr	r1, [sp, #12]
 8008ef6:	1a5b      	subs	r3, r3, r1
 8008ef8:	42ab      	cmp	r3, r5
 8008efa:	dcf2      	bgt.n	8008ee2 <_printf_i+0x21e>
 8008efc:	e7eb      	b.n	8008ed6 <_printf_i+0x212>
 8008efe:	2500      	movs	r5, #0
 8008f00:	f104 0619 	add.w	r6, r4, #25
 8008f04:	e7f5      	b.n	8008ef2 <_printf_i+0x22e>
 8008f06:	bf00      	nop
 8008f08:	0800bc9a 	.word	0x0800bc9a
 8008f0c:	0800bcab 	.word	0x0800bcab

08008f10 <siprintf>:
 8008f10:	b40e      	push	{r1, r2, r3}
 8008f12:	b500      	push	{lr}
 8008f14:	b09c      	sub	sp, #112	; 0x70
 8008f16:	ab1d      	add	r3, sp, #116	; 0x74
 8008f18:	9002      	str	r0, [sp, #8]
 8008f1a:	9006      	str	r0, [sp, #24]
 8008f1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f20:	4809      	ldr	r0, [pc, #36]	; (8008f48 <siprintf+0x38>)
 8008f22:	9107      	str	r1, [sp, #28]
 8008f24:	9104      	str	r1, [sp, #16]
 8008f26:	4909      	ldr	r1, [pc, #36]	; (8008f4c <siprintf+0x3c>)
 8008f28:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f2c:	9105      	str	r1, [sp, #20]
 8008f2e:	6800      	ldr	r0, [r0, #0]
 8008f30:	9301      	str	r3, [sp, #4]
 8008f32:	a902      	add	r1, sp, #8
 8008f34:	f001 fb24 	bl	800a580 <_svfiprintf_r>
 8008f38:	9b02      	ldr	r3, [sp, #8]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	701a      	strb	r2, [r3, #0]
 8008f3e:	b01c      	add	sp, #112	; 0x70
 8008f40:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f44:	b003      	add	sp, #12
 8008f46:	4770      	bx	lr
 8008f48:	20000010 	.word	0x20000010
 8008f4c:	ffff0208 	.word	0xffff0208

08008f50 <quorem>:
 8008f50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f54:	6903      	ldr	r3, [r0, #16]
 8008f56:	690c      	ldr	r4, [r1, #16]
 8008f58:	42a3      	cmp	r3, r4
 8008f5a:	4607      	mov	r7, r0
 8008f5c:	f2c0 8081 	blt.w	8009062 <quorem+0x112>
 8008f60:	3c01      	subs	r4, #1
 8008f62:	f101 0814 	add.w	r8, r1, #20
 8008f66:	f100 0514 	add.w	r5, r0, #20
 8008f6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f6e:	9301      	str	r3, [sp, #4]
 8008f70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008f74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f78:	3301      	adds	r3, #1
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008f80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008f84:	fbb2 f6f3 	udiv	r6, r2, r3
 8008f88:	d331      	bcc.n	8008fee <quorem+0x9e>
 8008f8a:	f04f 0e00 	mov.w	lr, #0
 8008f8e:	4640      	mov	r0, r8
 8008f90:	46ac      	mov	ip, r5
 8008f92:	46f2      	mov	sl, lr
 8008f94:	f850 2b04 	ldr.w	r2, [r0], #4
 8008f98:	b293      	uxth	r3, r2
 8008f9a:	fb06 e303 	mla	r3, r6, r3, lr
 8008f9e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	ebaa 0303 	sub.w	r3, sl, r3
 8008fa8:	0c12      	lsrs	r2, r2, #16
 8008faa:	f8dc a000 	ldr.w	sl, [ip]
 8008fae:	fb06 e202 	mla	r2, r6, r2, lr
 8008fb2:	fa13 f38a 	uxtah	r3, r3, sl
 8008fb6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008fba:	fa1f fa82 	uxth.w	sl, r2
 8008fbe:	f8dc 2000 	ldr.w	r2, [ip]
 8008fc2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008fc6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008fd0:	4581      	cmp	r9, r0
 8008fd2:	f84c 3b04 	str.w	r3, [ip], #4
 8008fd6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008fda:	d2db      	bcs.n	8008f94 <quorem+0x44>
 8008fdc:	f855 300b 	ldr.w	r3, [r5, fp]
 8008fe0:	b92b      	cbnz	r3, 8008fee <quorem+0x9e>
 8008fe2:	9b01      	ldr	r3, [sp, #4]
 8008fe4:	3b04      	subs	r3, #4
 8008fe6:	429d      	cmp	r5, r3
 8008fe8:	461a      	mov	r2, r3
 8008fea:	d32e      	bcc.n	800904a <quorem+0xfa>
 8008fec:	613c      	str	r4, [r7, #16]
 8008fee:	4638      	mov	r0, r7
 8008ff0:	f001 f8b0 	bl	800a154 <__mcmp>
 8008ff4:	2800      	cmp	r0, #0
 8008ff6:	db24      	blt.n	8009042 <quorem+0xf2>
 8008ff8:	3601      	adds	r6, #1
 8008ffa:	4628      	mov	r0, r5
 8008ffc:	f04f 0c00 	mov.w	ip, #0
 8009000:	f858 2b04 	ldr.w	r2, [r8], #4
 8009004:	f8d0 e000 	ldr.w	lr, [r0]
 8009008:	b293      	uxth	r3, r2
 800900a:	ebac 0303 	sub.w	r3, ip, r3
 800900e:	0c12      	lsrs	r2, r2, #16
 8009010:	fa13 f38e 	uxtah	r3, r3, lr
 8009014:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009018:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800901c:	b29b      	uxth	r3, r3
 800901e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009022:	45c1      	cmp	r9, r8
 8009024:	f840 3b04 	str.w	r3, [r0], #4
 8009028:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800902c:	d2e8      	bcs.n	8009000 <quorem+0xb0>
 800902e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009032:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009036:	b922      	cbnz	r2, 8009042 <quorem+0xf2>
 8009038:	3b04      	subs	r3, #4
 800903a:	429d      	cmp	r5, r3
 800903c:	461a      	mov	r2, r3
 800903e:	d30a      	bcc.n	8009056 <quorem+0x106>
 8009040:	613c      	str	r4, [r7, #16]
 8009042:	4630      	mov	r0, r6
 8009044:	b003      	add	sp, #12
 8009046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800904a:	6812      	ldr	r2, [r2, #0]
 800904c:	3b04      	subs	r3, #4
 800904e:	2a00      	cmp	r2, #0
 8009050:	d1cc      	bne.n	8008fec <quorem+0x9c>
 8009052:	3c01      	subs	r4, #1
 8009054:	e7c7      	b.n	8008fe6 <quorem+0x96>
 8009056:	6812      	ldr	r2, [r2, #0]
 8009058:	3b04      	subs	r3, #4
 800905a:	2a00      	cmp	r2, #0
 800905c:	d1f0      	bne.n	8009040 <quorem+0xf0>
 800905e:	3c01      	subs	r4, #1
 8009060:	e7eb      	b.n	800903a <quorem+0xea>
 8009062:	2000      	movs	r0, #0
 8009064:	e7ee      	b.n	8009044 <quorem+0xf4>
	...

08009068 <_dtoa_r>:
 8009068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800906c:	ed2d 8b02 	vpush	{d8}
 8009070:	ec57 6b10 	vmov	r6, r7, d0
 8009074:	b095      	sub	sp, #84	; 0x54
 8009076:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009078:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800907c:	9105      	str	r1, [sp, #20]
 800907e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009082:	4604      	mov	r4, r0
 8009084:	9209      	str	r2, [sp, #36]	; 0x24
 8009086:	930f      	str	r3, [sp, #60]	; 0x3c
 8009088:	b975      	cbnz	r5, 80090a8 <_dtoa_r+0x40>
 800908a:	2010      	movs	r0, #16
 800908c:	f000 fddc 	bl	8009c48 <malloc>
 8009090:	4602      	mov	r2, r0
 8009092:	6260      	str	r0, [r4, #36]	; 0x24
 8009094:	b920      	cbnz	r0, 80090a0 <_dtoa_r+0x38>
 8009096:	4bb2      	ldr	r3, [pc, #712]	; (8009360 <_dtoa_r+0x2f8>)
 8009098:	21ea      	movs	r1, #234	; 0xea
 800909a:	48b2      	ldr	r0, [pc, #712]	; (8009364 <_dtoa_r+0x2fc>)
 800909c:	f001 fb80 	bl	800a7a0 <__assert_func>
 80090a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80090a4:	6005      	str	r5, [r0, #0]
 80090a6:	60c5      	str	r5, [r0, #12]
 80090a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090aa:	6819      	ldr	r1, [r3, #0]
 80090ac:	b151      	cbz	r1, 80090c4 <_dtoa_r+0x5c>
 80090ae:	685a      	ldr	r2, [r3, #4]
 80090b0:	604a      	str	r2, [r1, #4]
 80090b2:	2301      	movs	r3, #1
 80090b4:	4093      	lsls	r3, r2
 80090b6:	608b      	str	r3, [r1, #8]
 80090b8:	4620      	mov	r0, r4
 80090ba:	f000 fe0d 	bl	8009cd8 <_Bfree>
 80090be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090c0:	2200      	movs	r2, #0
 80090c2:	601a      	str	r2, [r3, #0]
 80090c4:	1e3b      	subs	r3, r7, #0
 80090c6:	bfb9      	ittee	lt
 80090c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80090cc:	9303      	strlt	r3, [sp, #12]
 80090ce:	2300      	movge	r3, #0
 80090d0:	f8c8 3000 	strge.w	r3, [r8]
 80090d4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80090d8:	4ba3      	ldr	r3, [pc, #652]	; (8009368 <_dtoa_r+0x300>)
 80090da:	bfbc      	itt	lt
 80090dc:	2201      	movlt	r2, #1
 80090de:	f8c8 2000 	strlt.w	r2, [r8]
 80090e2:	ea33 0309 	bics.w	r3, r3, r9
 80090e6:	d11b      	bne.n	8009120 <_dtoa_r+0xb8>
 80090e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80090ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80090ee:	6013      	str	r3, [r2, #0]
 80090f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80090f4:	4333      	orrs	r3, r6
 80090f6:	f000 857a 	beq.w	8009bee <_dtoa_r+0xb86>
 80090fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090fc:	b963      	cbnz	r3, 8009118 <_dtoa_r+0xb0>
 80090fe:	4b9b      	ldr	r3, [pc, #620]	; (800936c <_dtoa_r+0x304>)
 8009100:	e024      	b.n	800914c <_dtoa_r+0xe4>
 8009102:	4b9b      	ldr	r3, [pc, #620]	; (8009370 <_dtoa_r+0x308>)
 8009104:	9300      	str	r3, [sp, #0]
 8009106:	3308      	adds	r3, #8
 8009108:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800910a:	6013      	str	r3, [r2, #0]
 800910c:	9800      	ldr	r0, [sp, #0]
 800910e:	b015      	add	sp, #84	; 0x54
 8009110:	ecbd 8b02 	vpop	{d8}
 8009114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009118:	4b94      	ldr	r3, [pc, #592]	; (800936c <_dtoa_r+0x304>)
 800911a:	9300      	str	r3, [sp, #0]
 800911c:	3303      	adds	r3, #3
 800911e:	e7f3      	b.n	8009108 <_dtoa_r+0xa0>
 8009120:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009124:	2200      	movs	r2, #0
 8009126:	ec51 0b17 	vmov	r0, r1, d7
 800912a:	2300      	movs	r3, #0
 800912c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009130:	f7f7 fce2 	bl	8000af8 <__aeabi_dcmpeq>
 8009134:	4680      	mov	r8, r0
 8009136:	b158      	cbz	r0, 8009150 <_dtoa_r+0xe8>
 8009138:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800913a:	2301      	movs	r3, #1
 800913c:	6013      	str	r3, [r2, #0]
 800913e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009140:	2b00      	cmp	r3, #0
 8009142:	f000 8551 	beq.w	8009be8 <_dtoa_r+0xb80>
 8009146:	488b      	ldr	r0, [pc, #556]	; (8009374 <_dtoa_r+0x30c>)
 8009148:	6018      	str	r0, [r3, #0]
 800914a:	1e43      	subs	r3, r0, #1
 800914c:	9300      	str	r3, [sp, #0]
 800914e:	e7dd      	b.n	800910c <_dtoa_r+0xa4>
 8009150:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009154:	aa12      	add	r2, sp, #72	; 0x48
 8009156:	a913      	add	r1, sp, #76	; 0x4c
 8009158:	4620      	mov	r0, r4
 800915a:	f001 f89f 	bl	800a29c <__d2b>
 800915e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009162:	4683      	mov	fp, r0
 8009164:	2d00      	cmp	r5, #0
 8009166:	d07c      	beq.n	8009262 <_dtoa_r+0x1fa>
 8009168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800916a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800916e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009172:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009176:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800917a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800917e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009182:	4b7d      	ldr	r3, [pc, #500]	; (8009378 <_dtoa_r+0x310>)
 8009184:	2200      	movs	r2, #0
 8009186:	4630      	mov	r0, r6
 8009188:	4639      	mov	r1, r7
 800918a:	f7f7 f895 	bl	80002b8 <__aeabi_dsub>
 800918e:	a36e      	add	r3, pc, #440	; (adr r3, 8009348 <_dtoa_r+0x2e0>)
 8009190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009194:	f7f7 fa48 	bl	8000628 <__aeabi_dmul>
 8009198:	a36d      	add	r3, pc, #436	; (adr r3, 8009350 <_dtoa_r+0x2e8>)
 800919a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800919e:	f7f7 f88d 	bl	80002bc <__adddf3>
 80091a2:	4606      	mov	r6, r0
 80091a4:	4628      	mov	r0, r5
 80091a6:	460f      	mov	r7, r1
 80091a8:	f7f7 f9d4 	bl	8000554 <__aeabi_i2d>
 80091ac:	a36a      	add	r3, pc, #424	; (adr r3, 8009358 <_dtoa_r+0x2f0>)
 80091ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b2:	f7f7 fa39 	bl	8000628 <__aeabi_dmul>
 80091b6:	4602      	mov	r2, r0
 80091b8:	460b      	mov	r3, r1
 80091ba:	4630      	mov	r0, r6
 80091bc:	4639      	mov	r1, r7
 80091be:	f7f7 f87d 	bl	80002bc <__adddf3>
 80091c2:	4606      	mov	r6, r0
 80091c4:	460f      	mov	r7, r1
 80091c6:	f7f7 fcdf 	bl	8000b88 <__aeabi_d2iz>
 80091ca:	2200      	movs	r2, #0
 80091cc:	4682      	mov	sl, r0
 80091ce:	2300      	movs	r3, #0
 80091d0:	4630      	mov	r0, r6
 80091d2:	4639      	mov	r1, r7
 80091d4:	f7f7 fc9a 	bl	8000b0c <__aeabi_dcmplt>
 80091d8:	b148      	cbz	r0, 80091ee <_dtoa_r+0x186>
 80091da:	4650      	mov	r0, sl
 80091dc:	f7f7 f9ba 	bl	8000554 <__aeabi_i2d>
 80091e0:	4632      	mov	r2, r6
 80091e2:	463b      	mov	r3, r7
 80091e4:	f7f7 fc88 	bl	8000af8 <__aeabi_dcmpeq>
 80091e8:	b908      	cbnz	r0, 80091ee <_dtoa_r+0x186>
 80091ea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80091ee:	f1ba 0f16 	cmp.w	sl, #22
 80091f2:	d854      	bhi.n	800929e <_dtoa_r+0x236>
 80091f4:	4b61      	ldr	r3, [pc, #388]	; (800937c <_dtoa_r+0x314>)
 80091f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80091fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009202:	f7f7 fc83 	bl	8000b0c <__aeabi_dcmplt>
 8009206:	2800      	cmp	r0, #0
 8009208:	d04b      	beq.n	80092a2 <_dtoa_r+0x23a>
 800920a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800920e:	2300      	movs	r3, #0
 8009210:	930e      	str	r3, [sp, #56]	; 0x38
 8009212:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009214:	1b5d      	subs	r5, r3, r5
 8009216:	1e6b      	subs	r3, r5, #1
 8009218:	9304      	str	r3, [sp, #16]
 800921a:	bf43      	ittte	mi
 800921c:	2300      	movmi	r3, #0
 800921e:	f1c5 0801 	rsbmi	r8, r5, #1
 8009222:	9304      	strmi	r3, [sp, #16]
 8009224:	f04f 0800 	movpl.w	r8, #0
 8009228:	f1ba 0f00 	cmp.w	sl, #0
 800922c:	db3b      	blt.n	80092a6 <_dtoa_r+0x23e>
 800922e:	9b04      	ldr	r3, [sp, #16]
 8009230:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009234:	4453      	add	r3, sl
 8009236:	9304      	str	r3, [sp, #16]
 8009238:	2300      	movs	r3, #0
 800923a:	9306      	str	r3, [sp, #24]
 800923c:	9b05      	ldr	r3, [sp, #20]
 800923e:	2b09      	cmp	r3, #9
 8009240:	d869      	bhi.n	8009316 <_dtoa_r+0x2ae>
 8009242:	2b05      	cmp	r3, #5
 8009244:	bfc4      	itt	gt
 8009246:	3b04      	subgt	r3, #4
 8009248:	9305      	strgt	r3, [sp, #20]
 800924a:	9b05      	ldr	r3, [sp, #20]
 800924c:	f1a3 0302 	sub.w	r3, r3, #2
 8009250:	bfcc      	ite	gt
 8009252:	2500      	movgt	r5, #0
 8009254:	2501      	movle	r5, #1
 8009256:	2b03      	cmp	r3, #3
 8009258:	d869      	bhi.n	800932e <_dtoa_r+0x2c6>
 800925a:	e8df f003 	tbb	[pc, r3]
 800925e:	4e2c      	.short	0x4e2c
 8009260:	5a4c      	.short	0x5a4c
 8009262:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009266:	441d      	add	r5, r3
 8009268:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800926c:	2b20      	cmp	r3, #32
 800926e:	bfc1      	itttt	gt
 8009270:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009274:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009278:	fa09 f303 	lslgt.w	r3, r9, r3
 800927c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009280:	bfda      	itte	le
 8009282:	f1c3 0320 	rsble	r3, r3, #32
 8009286:	fa06 f003 	lslle.w	r0, r6, r3
 800928a:	4318      	orrgt	r0, r3
 800928c:	f7f7 f952 	bl	8000534 <__aeabi_ui2d>
 8009290:	2301      	movs	r3, #1
 8009292:	4606      	mov	r6, r0
 8009294:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009298:	3d01      	subs	r5, #1
 800929a:	9310      	str	r3, [sp, #64]	; 0x40
 800929c:	e771      	b.n	8009182 <_dtoa_r+0x11a>
 800929e:	2301      	movs	r3, #1
 80092a0:	e7b6      	b.n	8009210 <_dtoa_r+0x1a8>
 80092a2:	900e      	str	r0, [sp, #56]	; 0x38
 80092a4:	e7b5      	b.n	8009212 <_dtoa_r+0x1aa>
 80092a6:	f1ca 0300 	rsb	r3, sl, #0
 80092aa:	9306      	str	r3, [sp, #24]
 80092ac:	2300      	movs	r3, #0
 80092ae:	eba8 080a 	sub.w	r8, r8, sl
 80092b2:	930d      	str	r3, [sp, #52]	; 0x34
 80092b4:	e7c2      	b.n	800923c <_dtoa_r+0x1d4>
 80092b6:	2300      	movs	r3, #0
 80092b8:	9308      	str	r3, [sp, #32]
 80092ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092bc:	2b00      	cmp	r3, #0
 80092be:	dc39      	bgt.n	8009334 <_dtoa_r+0x2cc>
 80092c0:	f04f 0901 	mov.w	r9, #1
 80092c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80092c8:	464b      	mov	r3, r9
 80092ca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80092ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80092d0:	2200      	movs	r2, #0
 80092d2:	6042      	str	r2, [r0, #4]
 80092d4:	2204      	movs	r2, #4
 80092d6:	f102 0614 	add.w	r6, r2, #20
 80092da:	429e      	cmp	r6, r3
 80092dc:	6841      	ldr	r1, [r0, #4]
 80092de:	d92f      	bls.n	8009340 <_dtoa_r+0x2d8>
 80092e0:	4620      	mov	r0, r4
 80092e2:	f000 fcb9 	bl	8009c58 <_Balloc>
 80092e6:	9000      	str	r0, [sp, #0]
 80092e8:	2800      	cmp	r0, #0
 80092ea:	d14b      	bne.n	8009384 <_dtoa_r+0x31c>
 80092ec:	4b24      	ldr	r3, [pc, #144]	; (8009380 <_dtoa_r+0x318>)
 80092ee:	4602      	mov	r2, r0
 80092f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80092f4:	e6d1      	b.n	800909a <_dtoa_r+0x32>
 80092f6:	2301      	movs	r3, #1
 80092f8:	e7de      	b.n	80092b8 <_dtoa_r+0x250>
 80092fa:	2300      	movs	r3, #0
 80092fc:	9308      	str	r3, [sp, #32]
 80092fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009300:	eb0a 0903 	add.w	r9, sl, r3
 8009304:	f109 0301 	add.w	r3, r9, #1
 8009308:	2b01      	cmp	r3, #1
 800930a:	9301      	str	r3, [sp, #4]
 800930c:	bfb8      	it	lt
 800930e:	2301      	movlt	r3, #1
 8009310:	e7dd      	b.n	80092ce <_dtoa_r+0x266>
 8009312:	2301      	movs	r3, #1
 8009314:	e7f2      	b.n	80092fc <_dtoa_r+0x294>
 8009316:	2501      	movs	r5, #1
 8009318:	2300      	movs	r3, #0
 800931a:	9305      	str	r3, [sp, #20]
 800931c:	9508      	str	r5, [sp, #32]
 800931e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8009322:	2200      	movs	r2, #0
 8009324:	f8cd 9004 	str.w	r9, [sp, #4]
 8009328:	2312      	movs	r3, #18
 800932a:	9209      	str	r2, [sp, #36]	; 0x24
 800932c:	e7cf      	b.n	80092ce <_dtoa_r+0x266>
 800932e:	2301      	movs	r3, #1
 8009330:	9308      	str	r3, [sp, #32]
 8009332:	e7f4      	b.n	800931e <_dtoa_r+0x2b6>
 8009334:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009338:	f8cd 9004 	str.w	r9, [sp, #4]
 800933c:	464b      	mov	r3, r9
 800933e:	e7c6      	b.n	80092ce <_dtoa_r+0x266>
 8009340:	3101      	adds	r1, #1
 8009342:	6041      	str	r1, [r0, #4]
 8009344:	0052      	lsls	r2, r2, #1
 8009346:	e7c6      	b.n	80092d6 <_dtoa_r+0x26e>
 8009348:	636f4361 	.word	0x636f4361
 800934c:	3fd287a7 	.word	0x3fd287a7
 8009350:	8b60c8b3 	.word	0x8b60c8b3
 8009354:	3fc68a28 	.word	0x3fc68a28
 8009358:	509f79fb 	.word	0x509f79fb
 800935c:	3fd34413 	.word	0x3fd34413
 8009360:	0800bcc9 	.word	0x0800bcc9
 8009364:	0800bce0 	.word	0x0800bce0
 8009368:	7ff00000 	.word	0x7ff00000
 800936c:	0800bcc5 	.word	0x0800bcc5
 8009370:	0800bcbc 	.word	0x0800bcbc
 8009374:	0800bc99 	.word	0x0800bc99
 8009378:	3ff80000 	.word	0x3ff80000
 800937c:	0800bdd8 	.word	0x0800bdd8
 8009380:	0800bd3f 	.word	0x0800bd3f
 8009384:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009386:	9a00      	ldr	r2, [sp, #0]
 8009388:	601a      	str	r2, [r3, #0]
 800938a:	9b01      	ldr	r3, [sp, #4]
 800938c:	2b0e      	cmp	r3, #14
 800938e:	f200 80ad 	bhi.w	80094ec <_dtoa_r+0x484>
 8009392:	2d00      	cmp	r5, #0
 8009394:	f000 80aa 	beq.w	80094ec <_dtoa_r+0x484>
 8009398:	f1ba 0f00 	cmp.w	sl, #0
 800939c:	dd36      	ble.n	800940c <_dtoa_r+0x3a4>
 800939e:	4ac3      	ldr	r2, [pc, #780]	; (80096ac <_dtoa_r+0x644>)
 80093a0:	f00a 030f 	and.w	r3, sl, #15
 80093a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80093a8:	ed93 7b00 	vldr	d7, [r3]
 80093ac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80093b0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80093b4:	eeb0 8a47 	vmov.f32	s16, s14
 80093b8:	eef0 8a67 	vmov.f32	s17, s15
 80093bc:	d016      	beq.n	80093ec <_dtoa_r+0x384>
 80093be:	4bbc      	ldr	r3, [pc, #752]	; (80096b0 <_dtoa_r+0x648>)
 80093c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80093c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80093c8:	f7f7 fa58 	bl	800087c <__aeabi_ddiv>
 80093cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093d0:	f007 070f 	and.w	r7, r7, #15
 80093d4:	2503      	movs	r5, #3
 80093d6:	4eb6      	ldr	r6, [pc, #728]	; (80096b0 <_dtoa_r+0x648>)
 80093d8:	b957      	cbnz	r7, 80093f0 <_dtoa_r+0x388>
 80093da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093de:	ec53 2b18 	vmov	r2, r3, d8
 80093e2:	f7f7 fa4b 	bl	800087c <__aeabi_ddiv>
 80093e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093ea:	e029      	b.n	8009440 <_dtoa_r+0x3d8>
 80093ec:	2502      	movs	r5, #2
 80093ee:	e7f2      	b.n	80093d6 <_dtoa_r+0x36e>
 80093f0:	07f9      	lsls	r1, r7, #31
 80093f2:	d508      	bpl.n	8009406 <_dtoa_r+0x39e>
 80093f4:	ec51 0b18 	vmov	r0, r1, d8
 80093f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80093fc:	f7f7 f914 	bl	8000628 <__aeabi_dmul>
 8009400:	ec41 0b18 	vmov	d8, r0, r1
 8009404:	3501      	adds	r5, #1
 8009406:	107f      	asrs	r7, r7, #1
 8009408:	3608      	adds	r6, #8
 800940a:	e7e5      	b.n	80093d8 <_dtoa_r+0x370>
 800940c:	f000 80a6 	beq.w	800955c <_dtoa_r+0x4f4>
 8009410:	f1ca 0600 	rsb	r6, sl, #0
 8009414:	4ba5      	ldr	r3, [pc, #660]	; (80096ac <_dtoa_r+0x644>)
 8009416:	4fa6      	ldr	r7, [pc, #664]	; (80096b0 <_dtoa_r+0x648>)
 8009418:	f006 020f 	and.w	r2, r6, #15
 800941c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009424:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009428:	f7f7 f8fe 	bl	8000628 <__aeabi_dmul>
 800942c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009430:	1136      	asrs	r6, r6, #4
 8009432:	2300      	movs	r3, #0
 8009434:	2502      	movs	r5, #2
 8009436:	2e00      	cmp	r6, #0
 8009438:	f040 8085 	bne.w	8009546 <_dtoa_r+0x4de>
 800943c:	2b00      	cmp	r3, #0
 800943e:	d1d2      	bne.n	80093e6 <_dtoa_r+0x37e>
 8009440:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009442:	2b00      	cmp	r3, #0
 8009444:	f000 808c 	beq.w	8009560 <_dtoa_r+0x4f8>
 8009448:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800944c:	4b99      	ldr	r3, [pc, #612]	; (80096b4 <_dtoa_r+0x64c>)
 800944e:	2200      	movs	r2, #0
 8009450:	4630      	mov	r0, r6
 8009452:	4639      	mov	r1, r7
 8009454:	f7f7 fb5a 	bl	8000b0c <__aeabi_dcmplt>
 8009458:	2800      	cmp	r0, #0
 800945a:	f000 8081 	beq.w	8009560 <_dtoa_r+0x4f8>
 800945e:	9b01      	ldr	r3, [sp, #4]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d07d      	beq.n	8009560 <_dtoa_r+0x4f8>
 8009464:	f1b9 0f00 	cmp.w	r9, #0
 8009468:	dd3c      	ble.n	80094e4 <_dtoa_r+0x47c>
 800946a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800946e:	9307      	str	r3, [sp, #28]
 8009470:	2200      	movs	r2, #0
 8009472:	4b91      	ldr	r3, [pc, #580]	; (80096b8 <_dtoa_r+0x650>)
 8009474:	4630      	mov	r0, r6
 8009476:	4639      	mov	r1, r7
 8009478:	f7f7 f8d6 	bl	8000628 <__aeabi_dmul>
 800947c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009480:	3501      	adds	r5, #1
 8009482:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009486:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800948a:	4628      	mov	r0, r5
 800948c:	f7f7 f862 	bl	8000554 <__aeabi_i2d>
 8009490:	4632      	mov	r2, r6
 8009492:	463b      	mov	r3, r7
 8009494:	f7f7 f8c8 	bl	8000628 <__aeabi_dmul>
 8009498:	4b88      	ldr	r3, [pc, #544]	; (80096bc <_dtoa_r+0x654>)
 800949a:	2200      	movs	r2, #0
 800949c:	f7f6 ff0e 	bl	80002bc <__adddf3>
 80094a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80094a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094a8:	9303      	str	r3, [sp, #12]
 80094aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d15c      	bne.n	800956a <_dtoa_r+0x502>
 80094b0:	4b83      	ldr	r3, [pc, #524]	; (80096c0 <_dtoa_r+0x658>)
 80094b2:	2200      	movs	r2, #0
 80094b4:	4630      	mov	r0, r6
 80094b6:	4639      	mov	r1, r7
 80094b8:	f7f6 fefe 	bl	80002b8 <__aeabi_dsub>
 80094bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094c0:	4606      	mov	r6, r0
 80094c2:	460f      	mov	r7, r1
 80094c4:	f7f7 fb40 	bl	8000b48 <__aeabi_dcmpgt>
 80094c8:	2800      	cmp	r0, #0
 80094ca:	f040 8296 	bne.w	80099fa <_dtoa_r+0x992>
 80094ce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80094d2:	4630      	mov	r0, r6
 80094d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094d8:	4639      	mov	r1, r7
 80094da:	f7f7 fb17 	bl	8000b0c <__aeabi_dcmplt>
 80094de:	2800      	cmp	r0, #0
 80094e0:	f040 8288 	bne.w	80099f4 <_dtoa_r+0x98c>
 80094e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80094e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80094ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	f2c0 8158 	blt.w	80097a4 <_dtoa_r+0x73c>
 80094f4:	f1ba 0f0e 	cmp.w	sl, #14
 80094f8:	f300 8154 	bgt.w	80097a4 <_dtoa_r+0x73c>
 80094fc:	4b6b      	ldr	r3, [pc, #428]	; (80096ac <_dtoa_r+0x644>)
 80094fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009502:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009508:	2b00      	cmp	r3, #0
 800950a:	f280 80e3 	bge.w	80096d4 <_dtoa_r+0x66c>
 800950e:	9b01      	ldr	r3, [sp, #4]
 8009510:	2b00      	cmp	r3, #0
 8009512:	f300 80df 	bgt.w	80096d4 <_dtoa_r+0x66c>
 8009516:	f040 826d 	bne.w	80099f4 <_dtoa_r+0x98c>
 800951a:	4b69      	ldr	r3, [pc, #420]	; (80096c0 <_dtoa_r+0x658>)
 800951c:	2200      	movs	r2, #0
 800951e:	4640      	mov	r0, r8
 8009520:	4649      	mov	r1, r9
 8009522:	f7f7 f881 	bl	8000628 <__aeabi_dmul>
 8009526:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800952a:	f7f7 fb03 	bl	8000b34 <__aeabi_dcmpge>
 800952e:	9e01      	ldr	r6, [sp, #4]
 8009530:	4637      	mov	r7, r6
 8009532:	2800      	cmp	r0, #0
 8009534:	f040 8243 	bne.w	80099be <_dtoa_r+0x956>
 8009538:	9d00      	ldr	r5, [sp, #0]
 800953a:	2331      	movs	r3, #49	; 0x31
 800953c:	f805 3b01 	strb.w	r3, [r5], #1
 8009540:	f10a 0a01 	add.w	sl, sl, #1
 8009544:	e23f      	b.n	80099c6 <_dtoa_r+0x95e>
 8009546:	07f2      	lsls	r2, r6, #31
 8009548:	d505      	bpl.n	8009556 <_dtoa_r+0x4ee>
 800954a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800954e:	f7f7 f86b 	bl	8000628 <__aeabi_dmul>
 8009552:	3501      	adds	r5, #1
 8009554:	2301      	movs	r3, #1
 8009556:	1076      	asrs	r6, r6, #1
 8009558:	3708      	adds	r7, #8
 800955a:	e76c      	b.n	8009436 <_dtoa_r+0x3ce>
 800955c:	2502      	movs	r5, #2
 800955e:	e76f      	b.n	8009440 <_dtoa_r+0x3d8>
 8009560:	9b01      	ldr	r3, [sp, #4]
 8009562:	f8cd a01c 	str.w	sl, [sp, #28]
 8009566:	930c      	str	r3, [sp, #48]	; 0x30
 8009568:	e78d      	b.n	8009486 <_dtoa_r+0x41e>
 800956a:	9900      	ldr	r1, [sp, #0]
 800956c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800956e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009570:	4b4e      	ldr	r3, [pc, #312]	; (80096ac <_dtoa_r+0x644>)
 8009572:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009576:	4401      	add	r1, r0
 8009578:	9102      	str	r1, [sp, #8]
 800957a:	9908      	ldr	r1, [sp, #32]
 800957c:	eeb0 8a47 	vmov.f32	s16, s14
 8009580:	eef0 8a67 	vmov.f32	s17, s15
 8009584:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009588:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800958c:	2900      	cmp	r1, #0
 800958e:	d045      	beq.n	800961c <_dtoa_r+0x5b4>
 8009590:	494c      	ldr	r1, [pc, #304]	; (80096c4 <_dtoa_r+0x65c>)
 8009592:	2000      	movs	r0, #0
 8009594:	f7f7 f972 	bl	800087c <__aeabi_ddiv>
 8009598:	ec53 2b18 	vmov	r2, r3, d8
 800959c:	f7f6 fe8c 	bl	80002b8 <__aeabi_dsub>
 80095a0:	9d00      	ldr	r5, [sp, #0]
 80095a2:	ec41 0b18 	vmov	d8, r0, r1
 80095a6:	4639      	mov	r1, r7
 80095a8:	4630      	mov	r0, r6
 80095aa:	f7f7 faed 	bl	8000b88 <__aeabi_d2iz>
 80095ae:	900c      	str	r0, [sp, #48]	; 0x30
 80095b0:	f7f6 ffd0 	bl	8000554 <__aeabi_i2d>
 80095b4:	4602      	mov	r2, r0
 80095b6:	460b      	mov	r3, r1
 80095b8:	4630      	mov	r0, r6
 80095ba:	4639      	mov	r1, r7
 80095bc:	f7f6 fe7c 	bl	80002b8 <__aeabi_dsub>
 80095c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095c2:	3330      	adds	r3, #48	; 0x30
 80095c4:	f805 3b01 	strb.w	r3, [r5], #1
 80095c8:	ec53 2b18 	vmov	r2, r3, d8
 80095cc:	4606      	mov	r6, r0
 80095ce:	460f      	mov	r7, r1
 80095d0:	f7f7 fa9c 	bl	8000b0c <__aeabi_dcmplt>
 80095d4:	2800      	cmp	r0, #0
 80095d6:	d165      	bne.n	80096a4 <_dtoa_r+0x63c>
 80095d8:	4632      	mov	r2, r6
 80095da:	463b      	mov	r3, r7
 80095dc:	4935      	ldr	r1, [pc, #212]	; (80096b4 <_dtoa_r+0x64c>)
 80095de:	2000      	movs	r0, #0
 80095e0:	f7f6 fe6a 	bl	80002b8 <__aeabi_dsub>
 80095e4:	ec53 2b18 	vmov	r2, r3, d8
 80095e8:	f7f7 fa90 	bl	8000b0c <__aeabi_dcmplt>
 80095ec:	2800      	cmp	r0, #0
 80095ee:	f040 80b9 	bne.w	8009764 <_dtoa_r+0x6fc>
 80095f2:	9b02      	ldr	r3, [sp, #8]
 80095f4:	429d      	cmp	r5, r3
 80095f6:	f43f af75 	beq.w	80094e4 <_dtoa_r+0x47c>
 80095fa:	4b2f      	ldr	r3, [pc, #188]	; (80096b8 <_dtoa_r+0x650>)
 80095fc:	ec51 0b18 	vmov	r0, r1, d8
 8009600:	2200      	movs	r2, #0
 8009602:	f7f7 f811 	bl	8000628 <__aeabi_dmul>
 8009606:	4b2c      	ldr	r3, [pc, #176]	; (80096b8 <_dtoa_r+0x650>)
 8009608:	ec41 0b18 	vmov	d8, r0, r1
 800960c:	2200      	movs	r2, #0
 800960e:	4630      	mov	r0, r6
 8009610:	4639      	mov	r1, r7
 8009612:	f7f7 f809 	bl	8000628 <__aeabi_dmul>
 8009616:	4606      	mov	r6, r0
 8009618:	460f      	mov	r7, r1
 800961a:	e7c4      	b.n	80095a6 <_dtoa_r+0x53e>
 800961c:	ec51 0b17 	vmov	r0, r1, d7
 8009620:	f7f7 f802 	bl	8000628 <__aeabi_dmul>
 8009624:	9b02      	ldr	r3, [sp, #8]
 8009626:	9d00      	ldr	r5, [sp, #0]
 8009628:	930c      	str	r3, [sp, #48]	; 0x30
 800962a:	ec41 0b18 	vmov	d8, r0, r1
 800962e:	4639      	mov	r1, r7
 8009630:	4630      	mov	r0, r6
 8009632:	f7f7 faa9 	bl	8000b88 <__aeabi_d2iz>
 8009636:	9011      	str	r0, [sp, #68]	; 0x44
 8009638:	f7f6 ff8c 	bl	8000554 <__aeabi_i2d>
 800963c:	4602      	mov	r2, r0
 800963e:	460b      	mov	r3, r1
 8009640:	4630      	mov	r0, r6
 8009642:	4639      	mov	r1, r7
 8009644:	f7f6 fe38 	bl	80002b8 <__aeabi_dsub>
 8009648:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800964a:	3330      	adds	r3, #48	; 0x30
 800964c:	f805 3b01 	strb.w	r3, [r5], #1
 8009650:	9b02      	ldr	r3, [sp, #8]
 8009652:	429d      	cmp	r5, r3
 8009654:	4606      	mov	r6, r0
 8009656:	460f      	mov	r7, r1
 8009658:	f04f 0200 	mov.w	r2, #0
 800965c:	d134      	bne.n	80096c8 <_dtoa_r+0x660>
 800965e:	4b19      	ldr	r3, [pc, #100]	; (80096c4 <_dtoa_r+0x65c>)
 8009660:	ec51 0b18 	vmov	r0, r1, d8
 8009664:	f7f6 fe2a 	bl	80002bc <__adddf3>
 8009668:	4602      	mov	r2, r0
 800966a:	460b      	mov	r3, r1
 800966c:	4630      	mov	r0, r6
 800966e:	4639      	mov	r1, r7
 8009670:	f7f7 fa6a 	bl	8000b48 <__aeabi_dcmpgt>
 8009674:	2800      	cmp	r0, #0
 8009676:	d175      	bne.n	8009764 <_dtoa_r+0x6fc>
 8009678:	ec53 2b18 	vmov	r2, r3, d8
 800967c:	4911      	ldr	r1, [pc, #68]	; (80096c4 <_dtoa_r+0x65c>)
 800967e:	2000      	movs	r0, #0
 8009680:	f7f6 fe1a 	bl	80002b8 <__aeabi_dsub>
 8009684:	4602      	mov	r2, r0
 8009686:	460b      	mov	r3, r1
 8009688:	4630      	mov	r0, r6
 800968a:	4639      	mov	r1, r7
 800968c:	f7f7 fa3e 	bl	8000b0c <__aeabi_dcmplt>
 8009690:	2800      	cmp	r0, #0
 8009692:	f43f af27 	beq.w	80094e4 <_dtoa_r+0x47c>
 8009696:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009698:	1e6b      	subs	r3, r5, #1
 800969a:	930c      	str	r3, [sp, #48]	; 0x30
 800969c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80096a0:	2b30      	cmp	r3, #48	; 0x30
 80096a2:	d0f8      	beq.n	8009696 <_dtoa_r+0x62e>
 80096a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80096a8:	e04a      	b.n	8009740 <_dtoa_r+0x6d8>
 80096aa:	bf00      	nop
 80096ac:	0800bdd8 	.word	0x0800bdd8
 80096b0:	0800bdb0 	.word	0x0800bdb0
 80096b4:	3ff00000 	.word	0x3ff00000
 80096b8:	40240000 	.word	0x40240000
 80096bc:	401c0000 	.word	0x401c0000
 80096c0:	40140000 	.word	0x40140000
 80096c4:	3fe00000 	.word	0x3fe00000
 80096c8:	4baf      	ldr	r3, [pc, #700]	; (8009988 <_dtoa_r+0x920>)
 80096ca:	f7f6 ffad 	bl	8000628 <__aeabi_dmul>
 80096ce:	4606      	mov	r6, r0
 80096d0:	460f      	mov	r7, r1
 80096d2:	e7ac      	b.n	800962e <_dtoa_r+0x5c6>
 80096d4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80096d8:	9d00      	ldr	r5, [sp, #0]
 80096da:	4642      	mov	r2, r8
 80096dc:	464b      	mov	r3, r9
 80096de:	4630      	mov	r0, r6
 80096e0:	4639      	mov	r1, r7
 80096e2:	f7f7 f8cb 	bl	800087c <__aeabi_ddiv>
 80096e6:	f7f7 fa4f 	bl	8000b88 <__aeabi_d2iz>
 80096ea:	9002      	str	r0, [sp, #8]
 80096ec:	f7f6 ff32 	bl	8000554 <__aeabi_i2d>
 80096f0:	4642      	mov	r2, r8
 80096f2:	464b      	mov	r3, r9
 80096f4:	f7f6 ff98 	bl	8000628 <__aeabi_dmul>
 80096f8:	4602      	mov	r2, r0
 80096fa:	460b      	mov	r3, r1
 80096fc:	4630      	mov	r0, r6
 80096fe:	4639      	mov	r1, r7
 8009700:	f7f6 fdda 	bl	80002b8 <__aeabi_dsub>
 8009704:	9e02      	ldr	r6, [sp, #8]
 8009706:	9f01      	ldr	r7, [sp, #4]
 8009708:	3630      	adds	r6, #48	; 0x30
 800970a:	f805 6b01 	strb.w	r6, [r5], #1
 800970e:	9e00      	ldr	r6, [sp, #0]
 8009710:	1bae      	subs	r6, r5, r6
 8009712:	42b7      	cmp	r7, r6
 8009714:	4602      	mov	r2, r0
 8009716:	460b      	mov	r3, r1
 8009718:	d137      	bne.n	800978a <_dtoa_r+0x722>
 800971a:	f7f6 fdcf 	bl	80002bc <__adddf3>
 800971e:	4642      	mov	r2, r8
 8009720:	464b      	mov	r3, r9
 8009722:	4606      	mov	r6, r0
 8009724:	460f      	mov	r7, r1
 8009726:	f7f7 fa0f 	bl	8000b48 <__aeabi_dcmpgt>
 800972a:	b9c8      	cbnz	r0, 8009760 <_dtoa_r+0x6f8>
 800972c:	4642      	mov	r2, r8
 800972e:	464b      	mov	r3, r9
 8009730:	4630      	mov	r0, r6
 8009732:	4639      	mov	r1, r7
 8009734:	f7f7 f9e0 	bl	8000af8 <__aeabi_dcmpeq>
 8009738:	b110      	cbz	r0, 8009740 <_dtoa_r+0x6d8>
 800973a:	9b02      	ldr	r3, [sp, #8]
 800973c:	07d9      	lsls	r1, r3, #31
 800973e:	d40f      	bmi.n	8009760 <_dtoa_r+0x6f8>
 8009740:	4620      	mov	r0, r4
 8009742:	4659      	mov	r1, fp
 8009744:	f000 fac8 	bl	8009cd8 <_Bfree>
 8009748:	2300      	movs	r3, #0
 800974a:	702b      	strb	r3, [r5, #0]
 800974c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800974e:	f10a 0001 	add.w	r0, sl, #1
 8009752:	6018      	str	r0, [r3, #0]
 8009754:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009756:	2b00      	cmp	r3, #0
 8009758:	f43f acd8 	beq.w	800910c <_dtoa_r+0xa4>
 800975c:	601d      	str	r5, [r3, #0]
 800975e:	e4d5      	b.n	800910c <_dtoa_r+0xa4>
 8009760:	f8cd a01c 	str.w	sl, [sp, #28]
 8009764:	462b      	mov	r3, r5
 8009766:	461d      	mov	r5, r3
 8009768:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800976c:	2a39      	cmp	r2, #57	; 0x39
 800976e:	d108      	bne.n	8009782 <_dtoa_r+0x71a>
 8009770:	9a00      	ldr	r2, [sp, #0]
 8009772:	429a      	cmp	r2, r3
 8009774:	d1f7      	bne.n	8009766 <_dtoa_r+0x6fe>
 8009776:	9a07      	ldr	r2, [sp, #28]
 8009778:	9900      	ldr	r1, [sp, #0]
 800977a:	3201      	adds	r2, #1
 800977c:	9207      	str	r2, [sp, #28]
 800977e:	2230      	movs	r2, #48	; 0x30
 8009780:	700a      	strb	r2, [r1, #0]
 8009782:	781a      	ldrb	r2, [r3, #0]
 8009784:	3201      	adds	r2, #1
 8009786:	701a      	strb	r2, [r3, #0]
 8009788:	e78c      	b.n	80096a4 <_dtoa_r+0x63c>
 800978a:	4b7f      	ldr	r3, [pc, #508]	; (8009988 <_dtoa_r+0x920>)
 800978c:	2200      	movs	r2, #0
 800978e:	f7f6 ff4b 	bl	8000628 <__aeabi_dmul>
 8009792:	2200      	movs	r2, #0
 8009794:	2300      	movs	r3, #0
 8009796:	4606      	mov	r6, r0
 8009798:	460f      	mov	r7, r1
 800979a:	f7f7 f9ad 	bl	8000af8 <__aeabi_dcmpeq>
 800979e:	2800      	cmp	r0, #0
 80097a0:	d09b      	beq.n	80096da <_dtoa_r+0x672>
 80097a2:	e7cd      	b.n	8009740 <_dtoa_r+0x6d8>
 80097a4:	9a08      	ldr	r2, [sp, #32]
 80097a6:	2a00      	cmp	r2, #0
 80097a8:	f000 80c4 	beq.w	8009934 <_dtoa_r+0x8cc>
 80097ac:	9a05      	ldr	r2, [sp, #20]
 80097ae:	2a01      	cmp	r2, #1
 80097b0:	f300 80a8 	bgt.w	8009904 <_dtoa_r+0x89c>
 80097b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80097b6:	2a00      	cmp	r2, #0
 80097b8:	f000 80a0 	beq.w	80098fc <_dtoa_r+0x894>
 80097bc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80097c0:	9e06      	ldr	r6, [sp, #24]
 80097c2:	4645      	mov	r5, r8
 80097c4:	9a04      	ldr	r2, [sp, #16]
 80097c6:	2101      	movs	r1, #1
 80097c8:	441a      	add	r2, r3
 80097ca:	4620      	mov	r0, r4
 80097cc:	4498      	add	r8, r3
 80097ce:	9204      	str	r2, [sp, #16]
 80097d0:	f000 fb3e 	bl	8009e50 <__i2b>
 80097d4:	4607      	mov	r7, r0
 80097d6:	2d00      	cmp	r5, #0
 80097d8:	dd0b      	ble.n	80097f2 <_dtoa_r+0x78a>
 80097da:	9b04      	ldr	r3, [sp, #16]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	dd08      	ble.n	80097f2 <_dtoa_r+0x78a>
 80097e0:	42ab      	cmp	r3, r5
 80097e2:	9a04      	ldr	r2, [sp, #16]
 80097e4:	bfa8      	it	ge
 80097e6:	462b      	movge	r3, r5
 80097e8:	eba8 0803 	sub.w	r8, r8, r3
 80097ec:	1aed      	subs	r5, r5, r3
 80097ee:	1ad3      	subs	r3, r2, r3
 80097f0:	9304      	str	r3, [sp, #16]
 80097f2:	9b06      	ldr	r3, [sp, #24]
 80097f4:	b1fb      	cbz	r3, 8009836 <_dtoa_r+0x7ce>
 80097f6:	9b08      	ldr	r3, [sp, #32]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	f000 809f 	beq.w	800993c <_dtoa_r+0x8d4>
 80097fe:	2e00      	cmp	r6, #0
 8009800:	dd11      	ble.n	8009826 <_dtoa_r+0x7be>
 8009802:	4639      	mov	r1, r7
 8009804:	4632      	mov	r2, r6
 8009806:	4620      	mov	r0, r4
 8009808:	f000 fbde 	bl	8009fc8 <__pow5mult>
 800980c:	465a      	mov	r2, fp
 800980e:	4601      	mov	r1, r0
 8009810:	4607      	mov	r7, r0
 8009812:	4620      	mov	r0, r4
 8009814:	f000 fb32 	bl	8009e7c <__multiply>
 8009818:	4659      	mov	r1, fp
 800981a:	9007      	str	r0, [sp, #28]
 800981c:	4620      	mov	r0, r4
 800981e:	f000 fa5b 	bl	8009cd8 <_Bfree>
 8009822:	9b07      	ldr	r3, [sp, #28]
 8009824:	469b      	mov	fp, r3
 8009826:	9b06      	ldr	r3, [sp, #24]
 8009828:	1b9a      	subs	r2, r3, r6
 800982a:	d004      	beq.n	8009836 <_dtoa_r+0x7ce>
 800982c:	4659      	mov	r1, fp
 800982e:	4620      	mov	r0, r4
 8009830:	f000 fbca 	bl	8009fc8 <__pow5mult>
 8009834:	4683      	mov	fp, r0
 8009836:	2101      	movs	r1, #1
 8009838:	4620      	mov	r0, r4
 800983a:	f000 fb09 	bl	8009e50 <__i2b>
 800983e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009840:	2b00      	cmp	r3, #0
 8009842:	4606      	mov	r6, r0
 8009844:	dd7c      	ble.n	8009940 <_dtoa_r+0x8d8>
 8009846:	461a      	mov	r2, r3
 8009848:	4601      	mov	r1, r0
 800984a:	4620      	mov	r0, r4
 800984c:	f000 fbbc 	bl	8009fc8 <__pow5mult>
 8009850:	9b05      	ldr	r3, [sp, #20]
 8009852:	2b01      	cmp	r3, #1
 8009854:	4606      	mov	r6, r0
 8009856:	dd76      	ble.n	8009946 <_dtoa_r+0x8de>
 8009858:	2300      	movs	r3, #0
 800985a:	9306      	str	r3, [sp, #24]
 800985c:	6933      	ldr	r3, [r6, #16]
 800985e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009862:	6918      	ldr	r0, [r3, #16]
 8009864:	f000 faa4 	bl	8009db0 <__hi0bits>
 8009868:	f1c0 0020 	rsb	r0, r0, #32
 800986c:	9b04      	ldr	r3, [sp, #16]
 800986e:	4418      	add	r0, r3
 8009870:	f010 001f 	ands.w	r0, r0, #31
 8009874:	f000 8086 	beq.w	8009984 <_dtoa_r+0x91c>
 8009878:	f1c0 0320 	rsb	r3, r0, #32
 800987c:	2b04      	cmp	r3, #4
 800987e:	dd7f      	ble.n	8009980 <_dtoa_r+0x918>
 8009880:	f1c0 001c 	rsb	r0, r0, #28
 8009884:	9b04      	ldr	r3, [sp, #16]
 8009886:	4403      	add	r3, r0
 8009888:	4480      	add	r8, r0
 800988a:	4405      	add	r5, r0
 800988c:	9304      	str	r3, [sp, #16]
 800988e:	f1b8 0f00 	cmp.w	r8, #0
 8009892:	dd05      	ble.n	80098a0 <_dtoa_r+0x838>
 8009894:	4659      	mov	r1, fp
 8009896:	4642      	mov	r2, r8
 8009898:	4620      	mov	r0, r4
 800989a:	f000 fbef 	bl	800a07c <__lshift>
 800989e:	4683      	mov	fp, r0
 80098a0:	9b04      	ldr	r3, [sp, #16]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	dd05      	ble.n	80098b2 <_dtoa_r+0x84a>
 80098a6:	4631      	mov	r1, r6
 80098a8:	461a      	mov	r2, r3
 80098aa:	4620      	mov	r0, r4
 80098ac:	f000 fbe6 	bl	800a07c <__lshift>
 80098b0:	4606      	mov	r6, r0
 80098b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d069      	beq.n	800998c <_dtoa_r+0x924>
 80098b8:	4631      	mov	r1, r6
 80098ba:	4658      	mov	r0, fp
 80098bc:	f000 fc4a 	bl	800a154 <__mcmp>
 80098c0:	2800      	cmp	r0, #0
 80098c2:	da63      	bge.n	800998c <_dtoa_r+0x924>
 80098c4:	2300      	movs	r3, #0
 80098c6:	4659      	mov	r1, fp
 80098c8:	220a      	movs	r2, #10
 80098ca:	4620      	mov	r0, r4
 80098cc:	f000 fa26 	bl	8009d1c <__multadd>
 80098d0:	9b08      	ldr	r3, [sp, #32]
 80098d2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80098d6:	4683      	mov	fp, r0
 80098d8:	2b00      	cmp	r3, #0
 80098da:	f000 818f 	beq.w	8009bfc <_dtoa_r+0xb94>
 80098de:	4639      	mov	r1, r7
 80098e0:	2300      	movs	r3, #0
 80098e2:	220a      	movs	r2, #10
 80098e4:	4620      	mov	r0, r4
 80098e6:	f000 fa19 	bl	8009d1c <__multadd>
 80098ea:	f1b9 0f00 	cmp.w	r9, #0
 80098ee:	4607      	mov	r7, r0
 80098f0:	f300 808e 	bgt.w	8009a10 <_dtoa_r+0x9a8>
 80098f4:	9b05      	ldr	r3, [sp, #20]
 80098f6:	2b02      	cmp	r3, #2
 80098f8:	dc50      	bgt.n	800999c <_dtoa_r+0x934>
 80098fa:	e089      	b.n	8009a10 <_dtoa_r+0x9a8>
 80098fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80098fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009902:	e75d      	b.n	80097c0 <_dtoa_r+0x758>
 8009904:	9b01      	ldr	r3, [sp, #4]
 8009906:	1e5e      	subs	r6, r3, #1
 8009908:	9b06      	ldr	r3, [sp, #24]
 800990a:	42b3      	cmp	r3, r6
 800990c:	bfbf      	itttt	lt
 800990e:	9b06      	ldrlt	r3, [sp, #24]
 8009910:	9606      	strlt	r6, [sp, #24]
 8009912:	1af2      	sublt	r2, r6, r3
 8009914:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009916:	bfb6      	itet	lt
 8009918:	189b      	addlt	r3, r3, r2
 800991a:	1b9e      	subge	r6, r3, r6
 800991c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800991e:	9b01      	ldr	r3, [sp, #4]
 8009920:	bfb8      	it	lt
 8009922:	2600      	movlt	r6, #0
 8009924:	2b00      	cmp	r3, #0
 8009926:	bfb5      	itete	lt
 8009928:	eba8 0503 	sublt.w	r5, r8, r3
 800992c:	9b01      	ldrge	r3, [sp, #4]
 800992e:	2300      	movlt	r3, #0
 8009930:	4645      	movge	r5, r8
 8009932:	e747      	b.n	80097c4 <_dtoa_r+0x75c>
 8009934:	9e06      	ldr	r6, [sp, #24]
 8009936:	9f08      	ldr	r7, [sp, #32]
 8009938:	4645      	mov	r5, r8
 800993a:	e74c      	b.n	80097d6 <_dtoa_r+0x76e>
 800993c:	9a06      	ldr	r2, [sp, #24]
 800993e:	e775      	b.n	800982c <_dtoa_r+0x7c4>
 8009940:	9b05      	ldr	r3, [sp, #20]
 8009942:	2b01      	cmp	r3, #1
 8009944:	dc18      	bgt.n	8009978 <_dtoa_r+0x910>
 8009946:	9b02      	ldr	r3, [sp, #8]
 8009948:	b9b3      	cbnz	r3, 8009978 <_dtoa_r+0x910>
 800994a:	9b03      	ldr	r3, [sp, #12]
 800994c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009950:	b9a3      	cbnz	r3, 800997c <_dtoa_r+0x914>
 8009952:	9b03      	ldr	r3, [sp, #12]
 8009954:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009958:	0d1b      	lsrs	r3, r3, #20
 800995a:	051b      	lsls	r3, r3, #20
 800995c:	b12b      	cbz	r3, 800996a <_dtoa_r+0x902>
 800995e:	9b04      	ldr	r3, [sp, #16]
 8009960:	3301      	adds	r3, #1
 8009962:	9304      	str	r3, [sp, #16]
 8009964:	f108 0801 	add.w	r8, r8, #1
 8009968:	2301      	movs	r3, #1
 800996a:	9306      	str	r3, [sp, #24]
 800996c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800996e:	2b00      	cmp	r3, #0
 8009970:	f47f af74 	bne.w	800985c <_dtoa_r+0x7f4>
 8009974:	2001      	movs	r0, #1
 8009976:	e779      	b.n	800986c <_dtoa_r+0x804>
 8009978:	2300      	movs	r3, #0
 800997a:	e7f6      	b.n	800996a <_dtoa_r+0x902>
 800997c:	9b02      	ldr	r3, [sp, #8]
 800997e:	e7f4      	b.n	800996a <_dtoa_r+0x902>
 8009980:	d085      	beq.n	800988e <_dtoa_r+0x826>
 8009982:	4618      	mov	r0, r3
 8009984:	301c      	adds	r0, #28
 8009986:	e77d      	b.n	8009884 <_dtoa_r+0x81c>
 8009988:	40240000 	.word	0x40240000
 800998c:	9b01      	ldr	r3, [sp, #4]
 800998e:	2b00      	cmp	r3, #0
 8009990:	dc38      	bgt.n	8009a04 <_dtoa_r+0x99c>
 8009992:	9b05      	ldr	r3, [sp, #20]
 8009994:	2b02      	cmp	r3, #2
 8009996:	dd35      	ble.n	8009a04 <_dtoa_r+0x99c>
 8009998:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800999c:	f1b9 0f00 	cmp.w	r9, #0
 80099a0:	d10d      	bne.n	80099be <_dtoa_r+0x956>
 80099a2:	4631      	mov	r1, r6
 80099a4:	464b      	mov	r3, r9
 80099a6:	2205      	movs	r2, #5
 80099a8:	4620      	mov	r0, r4
 80099aa:	f000 f9b7 	bl	8009d1c <__multadd>
 80099ae:	4601      	mov	r1, r0
 80099b0:	4606      	mov	r6, r0
 80099b2:	4658      	mov	r0, fp
 80099b4:	f000 fbce 	bl	800a154 <__mcmp>
 80099b8:	2800      	cmp	r0, #0
 80099ba:	f73f adbd 	bgt.w	8009538 <_dtoa_r+0x4d0>
 80099be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099c0:	9d00      	ldr	r5, [sp, #0]
 80099c2:	ea6f 0a03 	mvn.w	sl, r3
 80099c6:	f04f 0800 	mov.w	r8, #0
 80099ca:	4631      	mov	r1, r6
 80099cc:	4620      	mov	r0, r4
 80099ce:	f000 f983 	bl	8009cd8 <_Bfree>
 80099d2:	2f00      	cmp	r7, #0
 80099d4:	f43f aeb4 	beq.w	8009740 <_dtoa_r+0x6d8>
 80099d8:	f1b8 0f00 	cmp.w	r8, #0
 80099dc:	d005      	beq.n	80099ea <_dtoa_r+0x982>
 80099de:	45b8      	cmp	r8, r7
 80099e0:	d003      	beq.n	80099ea <_dtoa_r+0x982>
 80099e2:	4641      	mov	r1, r8
 80099e4:	4620      	mov	r0, r4
 80099e6:	f000 f977 	bl	8009cd8 <_Bfree>
 80099ea:	4639      	mov	r1, r7
 80099ec:	4620      	mov	r0, r4
 80099ee:	f000 f973 	bl	8009cd8 <_Bfree>
 80099f2:	e6a5      	b.n	8009740 <_dtoa_r+0x6d8>
 80099f4:	2600      	movs	r6, #0
 80099f6:	4637      	mov	r7, r6
 80099f8:	e7e1      	b.n	80099be <_dtoa_r+0x956>
 80099fa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80099fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009a00:	4637      	mov	r7, r6
 8009a02:	e599      	b.n	8009538 <_dtoa_r+0x4d0>
 8009a04:	9b08      	ldr	r3, [sp, #32]
 8009a06:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	f000 80fd 	beq.w	8009c0a <_dtoa_r+0xba2>
 8009a10:	2d00      	cmp	r5, #0
 8009a12:	dd05      	ble.n	8009a20 <_dtoa_r+0x9b8>
 8009a14:	4639      	mov	r1, r7
 8009a16:	462a      	mov	r2, r5
 8009a18:	4620      	mov	r0, r4
 8009a1a:	f000 fb2f 	bl	800a07c <__lshift>
 8009a1e:	4607      	mov	r7, r0
 8009a20:	9b06      	ldr	r3, [sp, #24]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d05c      	beq.n	8009ae0 <_dtoa_r+0xa78>
 8009a26:	6879      	ldr	r1, [r7, #4]
 8009a28:	4620      	mov	r0, r4
 8009a2a:	f000 f915 	bl	8009c58 <_Balloc>
 8009a2e:	4605      	mov	r5, r0
 8009a30:	b928      	cbnz	r0, 8009a3e <_dtoa_r+0x9d6>
 8009a32:	4b80      	ldr	r3, [pc, #512]	; (8009c34 <_dtoa_r+0xbcc>)
 8009a34:	4602      	mov	r2, r0
 8009a36:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009a3a:	f7ff bb2e 	b.w	800909a <_dtoa_r+0x32>
 8009a3e:	693a      	ldr	r2, [r7, #16]
 8009a40:	3202      	adds	r2, #2
 8009a42:	0092      	lsls	r2, r2, #2
 8009a44:	f107 010c 	add.w	r1, r7, #12
 8009a48:	300c      	adds	r0, #12
 8009a4a:	f7fe fde1 	bl	8008610 <memcpy>
 8009a4e:	2201      	movs	r2, #1
 8009a50:	4629      	mov	r1, r5
 8009a52:	4620      	mov	r0, r4
 8009a54:	f000 fb12 	bl	800a07c <__lshift>
 8009a58:	9b00      	ldr	r3, [sp, #0]
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	9301      	str	r3, [sp, #4]
 8009a5e:	9b00      	ldr	r3, [sp, #0]
 8009a60:	444b      	add	r3, r9
 8009a62:	9307      	str	r3, [sp, #28]
 8009a64:	9b02      	ldr	r3, [sp, #8]
 8009a66:	f003 0301 	and.w	r3, r3, #1
 8009a6a:	46b8      	mov	r8, r7
 8009a6c:	9306      	str	r3, [sp, #24]
 8009a6e:	4607      	mov	r7, r0
 8009a70:	9b01      	ldr	r3, [sp, #4]
 8009a72:	4631      	mov	r1, r6
 8009a74:	3b01      	subs	r3, #1
 8009a76:	4658      	mov	r0, fp
 8009a78:	9302      	str	r3, [sp, #8]
 8009a7a:	f7ff fa69 	bl	8008f50 <quorem>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	3330      	adds	r3, #48	; 0x30
 8009a82:	9004      	str	r0, [sp, #16]
 8009a84:	4641      	mov	r1, r8
 8009a86:	4658      	mov	r0, fp
 8009a88:	9308      	str	r3, [sp, #32]
 8009a8a:	f000 fb63 	bl	800a154 <__mcmp>
 8009a8e:	463a      	mov	r2, r7
 8009a90:	4681      	mov	r9, r0
 8009a92:	4631      	mov	r1, r6
 8009a94:	4620      	mov	r0, r4
 8009a96:	f000 fb79 	bl	800a18c <__mdiff>
 8009a9a:	68c2      	ldr	r2, [r0, #12]
 8009a9c:	9b08      	ldr	r3, [sp, #32]
 8009a9e:	4605      	mov	r5, r0
 8009aa0:	bb02      	cbnz	r2, 8009ae4 <_dtoa_r+0xa7c>
 8009aa2:	4601      	mov	r1, r0
 8009aa4:	4658      	mov	r0, fp
 8009aa6:	f000 fb55 	bl	800a154 <__mcmp>
 8009aaa:	9b08      	ldr	r3, [sp, #32]
 8009aac:	4602      	mov	r2, r0
 8009aae:	4629      	mov	r1, r5
 8009ab0:	4620      	mov	r0, r4
 8009ab2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009ab6:	f000 f90f 	bl	8009cd8 <_Bfree>
 8009aba:	9b05      	ldr	r3, [sp, #20]
 8009abc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009abe:	9d01      	ldr	r5, [sp, #4]
 8009ac0:	ea43 0102 	orr.w	r1, r3, r2
 8009ac4:	9b06      	ldr	r3, [sp, #24]
 8009ac6:	430b      	orrs	r3, r1
 8009ac8:	9b08      	ldr	r3, [sp, #32]
 8009aca:	d10d      	bne.n	8009ae8 <_dtoa_r+0xa80>
 8009acc:	2b39      	cmp	r3, #57	; 0x39
 8009ace:	d029      	beq.n	8009b24 <_dtoa_r+0xabc>
 8009ad0:	f1b9 0f00 	cmp.w	r9, #0
 8009ad4:	dd01      	ble.n	8009ada <_dtoa_r+0xa72>
 8009ad6:	9b04      	ldr	r3, [sp, #16]
 8009ad8:	3331      	adds	r3, #49	; 0x31
 8009ada:	9a02      	ldr	r2, [sp, #8]
 8009adc:	7013      	strb	r3, [r2, #0]
 8009ade:	e774      	b.n	80099ca <_dtoa_r+0x962>
 8009ae0:	4638      	mov	r0, r7
 8009ae2:	e7b9      	b.n	8009a58 <_dtoa_r+0x9f0>
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	e7e2      	b.n	8009aae <_dtoa_r+0xa46>
 8009ae8:	f1b9 0f00 	cmp.w	r9, #0
 8009aec:	db06      	blt.n	8009afc <_dtoa_r+0xa94>
 8009aee:	9905      	ldr	r1, [sp, #20]
 8009af0:	ea41 0909 	orr.w	r9, r1, r9
 8009af4:	9906      	ldr	r1, [sp, #24]
 8009af6:	ea59 0101 	orrs.w	r1, r9, r1
 8009afa:	d120      	bne.n	8009b3e <_dtoa_r+0xad6>
 8009afc:	2a00      	cmp	r2, #0
 8009afe:	ddec      	ble.n	8009ada <_dtoa_r+0xa72>
 8009b00:	4659      	mov	r1, fp
 8009b02:	2201      	movs	r2, #1
 8009b04:	4620      	mov	r0, r4
 8009b06:	9301      	str	r3, [sp, #4]
 8009b08:	f000 fab8 	bl	800a07c <__lshift>
 8009b0c:	4631      	mov	r1, r6
 8009b0e:	4683      	mov	fp, r0
 8009b10:	f000 fb20 	bl	800a154 <__mcmp>
 8009b14:	2800      	cmp	r0, #0
 8009b16:	9b01      	ldr	r3, [sp, #4]
 8009b18:	dc02      	bgt.n	8009b20 <_dtoa_r+0xab8>
 8009b1a:	d1de      	bne.n	8009ada <_dtoa_r+0xa72>
 8009b1c:	07da      	lsls	r2, r3, #31
 8009b1e:	d5dc      	bpl.n	8009ada <_dtoa_r+0xa72>
 8009b20:	2b39      	cmp	r3, #57	; 0x39
 8009b22:	d1d8      	bne.n	8009ad6 <_dtoa_r+0xa6e>
 8009b24:	9a02      	ldr	r2, [sp, #8]
 8009b26:	2339      	movs	r3, #57	; 0x39
 8009b28:	7013      	strb	r3, [r2, #0]
 8009b2a:	462b      	mov	r3, r5
 8009b2c:	461d      	mov	r5, r3
 8009b2e:	3b01      	subs	r3, #1
 8009b30:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009b34:	2a39      	cmp	r2, #57	; 0x39
 8009b36:	d050      	beq.n	8009bda <_dtoa_r+0xb72>
 8009b38:	3201      	adds	r2, #1
 8009b3a:	701a      	strb	r2, [r3, #0]
 8009b3c:	e745      	b.n	80099ca <_dtoa_r+0x962>
 8009b3e:	2a00      	cmp	r2, #0
 8009b40:	dd03      	ble.n	8009b4a <_dtoa_r+0xae2>
 8009b42:	2b39      	cmp	r3, #57	; 0x39
 8009b44:	d0ee      	beq.n	8009b24 <_dtoa_r+0xabc>
 8009b46:	3301      	adds	r3, #1
 8009b48:	e7c7      	b.n	8009ada <_dtoa_r+0xa72>
 8009b4a:	9a01      	ldr	r2, [sp, #4]
 8009b4c:	9907      	ldr	r1, [sp, #28]
 8009b4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009b52:	428a      	cmp	r2, r1
 8009b54:	d02a      	beq.n	8009bac <_dtoa_r+0xb44>
 8009b56:	4659      	mov	r1, fp
 8009b58:	2300      	movs	r3, #0
 8009b5a:	220a      	movs	r2, #10
 8009b5c:	4620      	mov	r0, r4
 8009b5e:	f000 f8dd 	bl	8009d1c <__multadd>
 8009b62:	45b8      	cmp	r8, r7
 8009b64:	4683      	mov	fp, r0
 8009b66:	f04f 0300 	mov.w	r3, #0
 8009b6a:	f04f 020a 	mov.w	r2, #10
 8009b6e:	4641      	mov	r1, r8
 8009b70:	4620      	mov	r0, r4
 8009b72:	d107      	bne.n	8009b84 <_dtoa_r+0xb1c>
 8009b74:	f000 f8d2 	bl	8009d1c <__multadd>
 8009b78:	4680      	mov	r8, r0
 8009b7a:	4607      	mov	r7, r0
 8009b7c:	9b01      	ldr	r3, [sp, #4]
 8009b7e:	3301      	adds	r3, #1
 8009b80:	9301      	str	r3, [sp, #4]
 8009b82:	e775      	b.n	8009a70 <_dtoa_r+0xa08>
 8009b84:	f000 f8ca 	bl	8009d1c <__multadd>
 8009b88:	4639      	mov	r1, r7
 8009b8a:	4680      	mov	r8, r0
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	220a      	movs	r2, #10
 8009b90:	4620      	mov	r0, r4
 8009b92:	f000 f8c3 	bl	8009d1c <__multadd>
 8009b96:	4607      	mov	r7, r0
 8009b98:	e7f0      	b.n	8009b7c <_dtoa_r+0xb14>
 8009b9a:	f1b9 0f00 	cmp.w	r9, #0
 8009b9e:	9a00      	ldr	r2, [sp, #0]
 8009ba0:	bfcc      	ite	gt
 8009ba2:	464d      	movgt	r5, r9
 8009ba4:	2501      	movle	r5, #1
 8009ba6:	4415      	add	r5, r2
 8009ba8:	f04f 0800 	mov.w	r8, #0
 8009bac:	4659      	mov	r1, fp
 8009bae:	2201      	movs	r2, #1
 8009bb0:	4620      	mov	r0, r4
 8009bb2:	9301      	str	r3, [sp, #4]
 8009bb4:	f000 fa62 	bl	800a07c <__lshift>
 8009bb8:	4631      	mov	r1, r6
 8009bba:	4683      	mov	fp, r0
 8009bbc:	f000 faca 	bl	800a154 <__mcmp>
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	dcb2      	bgt.n	8009b2a <_dtoa_r+0xac2>
 8009bc4:	d102      	bne.n	8009bcc <_dtoa_r+0xb64>
 8009bc6:	9b01      	ldr	r3, [sp, #4]
 8009bc8:	07db      	lsls	r3, r3, #31
 8009bca:	d4ae      	bmi.n	8009b2a <_dtoa_r+0xac2>
 8009bcc:	462b      	mov	r3, r5
 8009bce:	461d      	mov	r5, r3
 8009bd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009bd4:	2a30      	cmp	r2, #48	; 0x30
 8009bd6:	d0fa      	beq.n	8009bce <_dtoa_r+0xb66>
 8009bd8:	e6f7      	b.n	80099ca <_dtoa_r+0x962>
 8009bda:	9a00      	ldr	r2, [sp, #0]
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d1a5      	bne.n	8009b2c <_dtoa_r+0xac4>
 8009be0:	f10a 0a01 	add.w	sl, sl, #1
 8009be4:	2331      	movs	r3, #49	; 0x31
 8009be6:	e779      	b.n	8009adc <_dtoa_r+0xa74>
 8009be8:	4b13      	ldr	r3, [pc, #76]	; (8009c38 <_dtoa_r+0xbd0>)
 8009bea:	f7ff baaf 	b.w	800914c <_dtoa_r+0xe4>
 8009bee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	f47f aa86 	bne.w	8009102 <_dtoa_r+0x9a>
 8009bf6:	4b11      	ldr	r3, [pc, #68]	; (8009c3c <_dtoa_r+0xbd4>)
 8009bf8:	f7ff baa8 	b.w	800914c <_dtoa_r+0xe4>
 8009bfc:	f1b9 0f00 	cmp.w	r9, #0
 8009c00:	dc03      	bgt.n	8009c0a <_dtoa_r+0xba2>
 8009c02:	9b05      	ldr	r3, [sp, #20]
 8009c04:	2b02      	cmp	r3, #2
 8009c06:	f73f aec9 	bgt.w	800999c <_dtoa_r+0x934>
 8009c0a:	9d00      	ldr	r5, [sp, #0]
 8009c0c:	4631      	mov	r1, r6
 8009c0e:	4658      	mov	r0, fp
 8009c10:	f7ff f99e 	bl	8008f50 <quorem>
 8009c14:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009c18:	f805 3b01 	strb.w	r3, [r5], #1
 8009c1c:	9a00      	ldr	r2, [sp, #0]
 8009c1e:	1aaa      	subs	r2, r5, r2
 8009c20:	4591      	cmp	r9, r2
 8009c22:	ddba      	ble.n	8009b9a <_dtoa_r+0xb32>
 8009c24:	4659      	mov	r1, fp
 8009c26:	2300      	movs	r3, #0
 8009c28:	220a      	movs	r2, #10
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	f000 f876 	bl	8009d1c <__multadd>
 8009c30:	4683      	mov	fp, r0
 8009c32:	e7eb      	b.n	8009c0c <_dtoa_r+0xba4>
 8009c34:	0800bd3f 	.word	0x0800bd3f
 8009c38:	0800bc98 	.word	0x0800bc98
 8009c3c:	0800bcbc 	.word	0x0800bcbc

08009c40 <_localeconv_r>:
 8009c40:	4800      	ldr	r0, [pc, #0]	; (8009c44 <_localeconv_r+0x4>)
 8009c42:	4770      	bx	lr
 8009c44:	20000164 	.word	0x20000164

08009c48 <malloc>:
 8009c48:	4b02      	ldr	r3, [pc, #8]	; (8009c54 <malloc+0xc>)
 8009c4a:	4601      	mov	r1, r0
 8009c4c:	6818      	ldr	r0, [r3, #0]
 8009c4e:	f000 bbe1 	b.w	800a414 <_malloc_r>
 8009c52:	bf00      	nop
 8009c54:	20000010 	.word	0x20000010

08009c58 <_Balloc>:
 8009c58:	b570      	push	{r4, r5, r6, lr}
 8009c5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009c5c:	4604      	mov	r4, r0
 8009c5e:	460d      	mov	r5, r1
 8009c60:	b976      	cbnz	r6, 8009c80 <_Balloc+0x28>
 8009c62:	2010      	movs	r0, #16
 8009c64:	f7ff fff0 	bl	8009c48 <malloc>
 8009c68:	4602      	mov	r2, r0
 8009c6a:	6260      	str	r0, [r4, #36]	; 0x24
 8009c6c:	b920      	cbnz	r0, 8009c78 <_Balloc+0x20>
 8009c6e:	4b18      	ldr	r3, [pc, #96]	; (8009cd0 <_Balloc+0x78>)
 8009c70:	4818      	ldr	r0, [pc, #96]	; (8009cd4 <_Balloc+0x7c>)
 8009c72:	2166      	movs	r1, #102	; 0x66
 8009c74:	f000 fd94 	bl	800a7a0 <__assert_func>
 8009c78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c7c:	6006      	str	r6, [r0, #0]
 8009c7e:	60c6      	str	r6, [r0, #12]
 8009c80:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009c82:	68f3      	ldr	r3, [r6, #12]
 8009c84:	b183      	cbz	r3, 8009ca8 <_Balloc+0x50>
 8009c86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c88:	68db      	ldr	r3, [r3, #12]
 8009c8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009c8e:	b9b8      	cbnz	r0, 8009cc0 <_Balloc+0x68>
 8009c90:	2101      	movs	r1, #1
 8009c92:	fa01 f605 	lsl.w	r6, r1, r5
 8009c96:	1d72      	adds	r2, r6, #5
 8009c98:	0092      	lsls	r2, r2, #2
 8009c9a:	4620      	mov	r0, r4
 8009c9c:	f000 fb5a 	bl	800a354 <_calloc_r>
 8009ca0:	b160      	cbz	r0, 8009cbc <_Balloc+0x64>
 8009ca2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009ca6:	e00e      	b.n	8009cc6 <_Balloc+0x6e>
 8009ca8:	2221      	movs	r2, #33	; 0x21
 8009caa:	2104      	movs	r1, #4
 8009cac:	4620      	mov	r0, r4
 8009cae:	f000 fb51 	bl	800a354 <_calloc_r>
 8009cb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cb4:	60f0      	str	r0, [r6, #12]
 8009cb6:	68db      	ldr	r3, [r3, #12]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d1e4      	bne.n	8009c86 <_Balloc+0x2e>
 8009cbc:	2000      	movs	r0, #0
 8009cbe:	bd70      	pop	{r4, r5, r6, pc}
 8009cc0:	6802      	ldr	r2, [r0, #0]
 8009cc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009ccc:	e7f7      	b.n	8009cbe <_Balloc+0x66>
 8009cce:	bf00      	nop
 8009cd0:	0800bcc9 	.word	0x0800bcc9
 8009cd4:	0800bd50 	.word	0x0800bd50

08009cd8 <_Bfree>:
 8009cd8:	b570      	push	{r4, r5, r6, lr}
 8009cda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009cdc:	4605      	mov	r5, r0
 8009cde:	460c      	mov	r4, r1
 8009ce0:	b976      	cbnz	r6, 8009d00 <_Bfree+0x28>
 8009ce2:	2010      	movs	r0, #16
 8009ce4:	f7ff ffb0 	bl	8009c48 <malloc>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	6268      	str	r0, [r5, #36]	; 0x24
 8009cec:	b920      	cbnz	r0, 8009cf8 <_Bfree+0x20>
 8009cee:	4b09      	ldr	r3, [pc, #36]	; (8009d14 <_Bfree+0x3c>)
 8009cf0:	4809      	ldr	r0, [pc, #36]	; (8009d18 <_Bfree+0x40>)
 8009cf2:	218a      	movs	r1, #138	; 0x8a
 8009cf4:	f000 fd54 	bl	800a7a0 <__assert_func>
 8009cf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009cfc:	6006      	str	r6, [r0, #0]
 8009cfe:	60c6      	str	r6, [r0, #12]
 8009d00:	b13c      	cbz	r4, 8009d12 <_Bfree+0x3a>
 8009d02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009d04:	6862      	ldr	r2, [r4, #4]
 8009d06:	68db      	ldr	r3, [r3, #12]
 8009d08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009d0c:	6021      	str	r1, [r4, #0]
 8009d0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009d12:	bd70      	pop	{r4, r5, r6, pc}
 8009d14:	0800bcc9 	.word	0x0800bcc9
 8009d18:	0800bd50 	.word	0x0800bd50

08009d1c <__multadd>:
 8009d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d20:	690e      	ldr	r6, [r1, #16]
 8009d22:	4607      	mov	r7, r0
 8009d24:	4698      	mov	r8, r3
 8009d26:	460c      	mov	r4, r1
 8009d28:	f101 0014 	add.w	r0, r1, #20
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	6805      	ldr	r5, [r0, #0]
 8009d30:	b2a9      	uxth	r1, r5
 8009d32:	fb02 8101 	mla	r1, r2, r1, r8
 8009d36:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009d3a:	0c2d      	lsrs	r5, r5, #16
 8009d3c:	fb02 c505 	mla	r5, r2, r5, ip
 8009d40:	b289      	uxth	r1, r1
 8009d42:	3301      	adds	r3, #1
 8009d44:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009d48:	429e      	cmp	r6, r3
 8009d4a:	f840 1b04 	str.w	r1, [r0], #4
 8009d4e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009d52:	dcec      	bgt.n	8009d2e <__multadd+0x12>
 8009d54:	f1b8 0f00 	cmp.w	r8, #0
 8009d58:	d022      	beq.n	8009da0 <__multadd+0x84>
 8009d5a:	68a3      	ldr	r3, [r4, #8]
 8009d5c:	42b3      	cmp	r3, r6
 8009d5e:	dc19      	bgt.n	8009d94 <__multadd+0x78>
 8009d60:	6861      	ldr	r1, [r4, #4]
 8009d62:	4638      	mov	r0, r7
 8009d64:	3101      	adds	r1, #1
 8009d66:	f7ff ff77 	bl	8009c58 <_Balloc>
 8009d6a:	4605      	mov	r5, r0
 8009d6c:	b928      	cbnz	r0, 8009d7a <__multadd+0x5e>
 8009d6e:	4602      	mov	r2, r0
 8009d70:	4b0d      	ldr	r3, [pc, #52]	; (8009da8 <__multadd+0x8c>)
 8009d72:	480e      	ldr	r0, [pc, #56]	; (8009dac <__multadd+0x90>)
 8009d74:	21b5      	movs	r1, #181	; 0xb5
 8009d76:	f000 fd13 	bl	800a7a0 <__assert_func>
 8009d7a:	6922      	ldr	r2, [r4, #16]
 8009d7c:	3202      	adds	r2, #2
 8009d7e:	f104 010c 	add.w	r1, r4, #12
 8009d82:	0092      	lsls	r2, r2, #2
 8009d84:	300c      	adds	r0, #12
 8009d86:	f7fe fc43 	bl	8008610 <memcpy>
 8009d8a:	4621      	mov	r1, r4
 8009d8c:	4638      	mov	r0, r7
 8009d8e:	f7ff ffa3 	bl	8009cd8 <_Bfree>
 8009d92:	462c      	mov	r4, r5
 8009d94:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009d98:	3601      	adds	r6, #1
 8009d9a:	f8c3 8014 	str.w	r8, [r3, #20]
 8009d9e:	6126      	str	r6, [r4, #16]
 8009da0:	4620      	mov	r0, r4
 8009da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009da6:	bf00      	nop
 8009da8:	0800bd3f 	.word	0x0800bd3f
 8009dac:	0800bd50 	.word	0x0800bd50

08009db0 <__hi0bits>:
 8009db0:	0c03      	lsrs	r3, r0, #16
 8009db2:	041b      	lsls	r3, r3, #16
 8009db4:	b9d3      	cbnz	r3, 8009dec <__hi0bits+0x3c>
 8009db6:	0400      	lsls	r0, r0, #16
 8009db8:	2310      	movs	r3, #16
 8009dba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009dbe:	bf04      	itt	eq
 8009dc0:	0200      	lsleq	r0, r0, #8
 8009dc2:	3308      	addeq	r3, #8
 8009dc4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009dc8:	bf04      	itt	eq
 8009dca:	0100      	lsleq	r0, r0, #4
 8009dcc:	3304      	addeq	r3, #4
 8009dce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009dd2:	bf04      	itt	eq
 8009dd4:	0080      	lsleq	r0, r0, #2
 8009dd6:	3302      	addeq	r3, #2
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	db05      	blt.n	8009de8 <__hi0bits+0x38>
 8009ddc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009de0:	f103 0301 	add.w	r3, r3, #1
 8009de4:	bf08      	it	eq
 8009de6:	2320      	moveq	r3, #32
 8009de8:	4618      	mov	r0, r3
 8009dea:	4770      	bx	lr
 8009dec:	2300      	movs	r3, #0
 8009dee:	e7e4      	b.n	8009dba <__hi0bits+0xa>

08009df0 <__lo0bits>:
 8009df0:	6803      	ldr	r3, [r0, #0]
 8009df2:	f013 0207 	ands.w	r2, r3, #7
 8009df6:	4601      	mov	r1, r0
 8009df8:	d00b      	beq.n	8009e12 <__lo0bits+0x22>
 8009dfa:	07da      	lsls	r2, r3, #31
 8009dfc:	d424      	bmi.n	8009e48 <__lo0bits+0x58>
 8009dfe:	0798      	lsls	r0, r3, #30
 8009e00:	bf49      	itett	mi
 8009e02:	085b      	lsrmi	r3, r3, #1
 8009e04:	089b      	lsrpl	r3, r3, #2
 8009e06:	2001      	movmi	r0, #1
 8009e08:	600b      	strmi	r3, [r1, #0]
 8009e0a:	bf5c      	itt	pl
 8009e0c:	600b      	strpl	r3, [r1, #0]
 8009e0e:	2002      	movpl	r0, #2
 8009e10:	4770      	bx	lr
 8009e12:	b298      	uxth	r0, r3
 8009e14:	b9b0      	cbnz	r0, 8009e44 <__lo0bits+0x54>
 8009e16:	0c1b      	lsrs	r3, r3, #16
 8009e18:	2010      	movs	r0, #16
 8009e1a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009e1e:	bf04      	itt	eq
 8009e20:	0a1b      	lsreq	r3, r3, #8
 8009e22:	3008      	addeq	r0, #8
 8009e24:	071a      	lsls	r2, r3, #28
 8009e26:	bf04      	itt	eq
 8009e28:	091b      	lsreq	r3, r3, #4
 8009e2a:	3004      	addeq	r0, #4
 8009e2c:	079a      	lsls	r2, r3, #30
 8009e2e:	bf04      	itt	eq
 8009e30:	089b      	lsreq	r3, r3, #2
 8009e32:	3002      	addeq	r0, #2
 8009e34:	07da      	lsls	r2, r3, #31
 8009e36:	d403      	bmi.n	8009e40 <__lo0bits+0x50>
 8009e38:	085b      	lsrs	r3, r3, #1
 8009e3a:	f100 0001 	add.w	r0, r0, #1
 8009e3e:	d005      	beq.n	8009e4c <__lo0bits+0x5c>
 8009e40:	600b      	str	r3, [r1, #0]
 8009e42:	4770      	bx	lr
 8009e44:	4610      	mov	r0, r2
 8009e46:	e7e8      	b.n	8009e1a <__lo0bits+0x2a>
 8009e48:	2000      	movs	r0, #0
 8009e4a:	4770      	bx	lr
 8009e4c:	2020      	movs	r0, #32
 8009e4e:	4770      	bx	lr

08009e50 <__i2b>:
 8009e50:	b510      	push	{r4, lr}
 8009e52:	460c      	mov	r4, r1
 8009e54:	2101      	movs	r1, #1
 8009e56:	f7ff feff 	bl	8009c58 <_Balloc>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	b928      	cbnz	r0, 8009e6a <__i2b+0x1a>
 8009e5e:	4b05      	ldr	r3, [pc, #20]	; (8009e74 <__i2b+0x24>)
 8009e60:	4805      	ldr	r0, [pc, #20]	; (8009e78 <__i2b+0x28>)
 8009e62:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009e66:	f000 fc9b 	bl	800a7a0 <__assert_func>
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	6144      	str	r4, [r0, #20]
 8009e6e:	6103      	str	r3, [r0, #16]
 8009e70:	bd10      	pop	{r4, pc}
 8009e72:	bf00      	nop
 8009e74:	0800bd3f 	.word	0x0800bd3f
 8009e78:	0800bd50 	.word	0x0800bd50

08009e7c <__multiply>:
 8009e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e80:	4614      	mov	r4, r2
 8009e82:	690a      	ldr	r2, [r1, #16]
 8009e84:	6923      	ldr	r3, [r4, #16]
 8009e86:	429a      	cmp	r2, r3
 8009e88:	bfb8      	it	lt
 8009e8a:	460b      	movlt	r3, r1
 8009e8c:	460d      	mov	r5, r1
 8009e8e:	bfbc      	itt	lt
 8009e90:	4625      	movlt	r5, r4
 8009e92:	461c      	movlt	r4, r3
 8009e94:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009e98:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009e9c:	68ab      	ldr	r3, [r5, #8]
 8009e9e:	6869      	ldr	r1, [r5, #4]
 8009ea0:	eb0a 0709 	add.w	r7, sl, r9
 8009ea4:	42bb      	cmp	r3, r7
 8009ea6:	b085      	sub	sp, #20
 8009ea8:	bfb8      	it	lt
 8009eaa:	3101      	addlt	r1, #1
 8009eac:	f7ff fed4 	bl	8009c58 <_Balloc>
 8009eb0:	b930      	cbnz	r0, 8009ec0 <__multiply+0x44>
 8009eb2:	4602      	mov	r2, r0
 8009eb4:	4b42      	ldr	r3, [pc, #264]	; (8009fc0 <__multiply+0x144>)
 8009eb6:	4843      	ldr	r0, [pc, #268]	; (8009fc4 <__multiply+0x148>)
 8009eb8:	f240 115d 	movw	r1, #349	; 0x15d
 8009ebc:	f000 fc70 	bl	800a7a0 <__assert_func>
 8009ec0:	f100 0614 	add.w	r6, r0, #20
 8009ec4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009ec8:	4633      	mov	r3, r6
 8009eca:	2200      	movs	r2, #0
 8009ecc:	4543      	cmp	r3, r8
 8009ece:	d31e      	bcc.n	8009f0e <__multiply+0x92>
 8009ed0:	f105 0c14 	add.w	ip, r5, #20
 8009ed4:	f104 0314 	add.w	r3, r4, #20
 8009ed8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009edc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009ee0:	9202      	str	r2, [sp, #8]
 8009ee2:	ebac 0205 	sub.w	r2, ip, r5
 8009ee6:	3a15      	subs	r2, #21
 8009ee8:	f022 0203 	bic.w	r2, r2, #3
 8009eec:	3204      	adds	r2, #4
 8009eee:	f105 0115 	add.w	r1, r5, #21
 8009ef2:	458c      	cmp	ip, r1
 8009ef4:	bf38      	it	cc
 8009ef6:	2204      	movcc	r2, #4
 8009ef8:	9201      	str	r2, [sp, #4]
 8009efa:	9a02      	ldr	r2, [sp, #8]
 8009efc:	9303      	str	r3, [sp, #12]
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d808      	bhi.n	8009f14 <__multiply+0x98>
 8009f02:	2f00      	cmp	r7, #0
 8009f04:	dc55      	bgt.n	8009fb2 <__multiply+0x136>
 8009f06:	6107      	str	r7, [r0, #16]
 8009f08:	b005      	add	sp, #20
 8009f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f0e:	f843 2b04 	str.w	r2, [r3], #4
 8009f12:	e7db      	b.n	8009ecc <__multiply+0x50>
 8009f14:	f8b3 a000 	ldrh.w	sl, [r3]
 8009f18:	f1ba 0f00 	cmp.w	sl, #0
 8009f1c:	d020      	beq.n	8009f60 <__multiply+0xe4>
 8009f1e:	f105 0e14 	add.w	lr, r5, #20
 8009f22:	46b1      	mov	r9, r6
 8009f24:	2200      	movs	r2, #0
 8009f26:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009f2a:	f8d9 b000 	ldr.w	fp, [r9]
 8009f2e:	b2a1      	uxth	r1, r4
 8009f30:	fa1f fb8b 	uxth.w	fp, fp
 8009f34:	fb0a b101 	mla	r1, sl, r1, fp
 8009f38:	4411      	add	r1, r2
 8009f3a:	f8d9 2000 	ldr.w	r2, [r9]
 8009f3e:	0c24      	lsrs	r4, r4, #16
 8009f40:	0c12      	lsrs	r2, r2, #16
 8009f42:	fb0a 2404 	mla	r4, sl, r4, r2
 8009f46:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009f4a:	b289      	uxth	r1, r1
 8009f4c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009f50:	45f4      	cmp	ip, lr
 8009f52:	f849 1b04 	str.w	r1, [r9], #4
 8009f56:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009f5a:	d8e4      	bhi.n	8009f26 <__multiply+0xaa>
 8009f5c:	9901      	ldr	r1, [sp, #4]
 8009f5e:	5072      	str	r2, [r6, r1]
 8009f60:	9a03      	ldr	r2, [sp, #12]
 8009f62:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009f66:	3304      	adds	r3, #4
 8009f68:	f1b9 0f00 	cmp.w	r9, #0
 8009f6c:	d01f      	beq.n	8009fae <__multiply+0x132>
 8009f6e:	6834      	ldr	r4, [r6, #0]
 8009f70:	f105 0114 	add.w	r1, r5, #20
 8009f74:	46b6      	mov	lr, r6
 8009f76:	f04f 0a00 	mov.w	sl, #0
 8009f7a:	880a      	ldrh	r2, [r1, #0]
 8009f7c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009f80:	fb09 b202 	mla	r2, r9, r2, fp
 8009f84:	4492      	add	sl, r2
 8009f86:	b2a4      	uxth	r4, r4
 8009f88:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009f8c:	f84e 4b04 	str.w	r4, [lr], #4
 8009f90:	f851 4b04 	ldr.w	r4, [r1], #4
 8009f94:	f8be 2000 	ldrh.w	r2, [lr]
 8009f98:	0c24      	lsrs	r4, r4, #16
 8009f9a:	fb09 2404 	mla	r4, r9, r4, r2
 8009f9e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009fa2:	458c      	cmp	ip, r1
 8009fa4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009fa8:	d8e7      	bhi.n	8009f7a <__multiply+0xfe>
 8009faa:	9a01      	ldr	r2, [sp, #4]
 8009fac:	50b4      	str	r4, [r6, r2]
 8009fae:	3604      	adds	r6, #4
 8009fb0:	e7a3      	b.n	8009efa <__multiply+0x7e>
 8009fb2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d1a5      	bne.n	8009f06 <__multiply+0x8a>
 8009fba:	3f01      	subs	r7, #1
 8009fbc:	e7a1      	b.n	8009f02 <__multiply+0x86>
 8009fbe:	bf00      	nop
 8009fc0:	0800bd3f 	.word	0x0800bd3f
 8009fc4:	0800bd50 	.word	0x0800bd50

08009fc8 <__pow5mult>:
 8009fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fcc:	4615      	mov	r5, r2
 8009fce:	f012 0203 	ands.w	r2, r2, #3
 8009fd2:	4606      	mov	r6, r0
 8009fd4:	460f      	mov	r7, r1
 8009fd6:	d007      	beq.n	8009fe8 <__pow5mult+0x20>
 8009fd8:	4c25      	ldr	r4, [pc, #148]	; (800a070 <__pow5mult+0xa8>)
 8009fda:	3a01      	subs	r2, #1
 8009fdc:	2300      	movs	r3, #0
 8009fde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009fe2:	f7ff fe9b 	bl	8009d1c <__multadd>
 8009fe6:	4607      	mov	r7, r0
 8009fe8:	10ad      	asrs	r5, r5, #2
 8009fea:	d03d      	beq.n	800a068 <__pow5mult+0xa0>
 8009fec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009fee:	b97c      	cbnz	r4, 800a010 <__pow5mult+0x48>
 8009ff0:	2010      	movs	r0, #16
 8009ff2:	f7ff fe29 	bl	8009c48 <malloc>
 8009ff6:	4602      	mov	r2, r0
 8009ff8:	6270      	str	r0, [r6, #36]	; 0x24
 8009ffa:	b928      	cbnz	r0, 800a008 <__pow5mult+0x40>
 8009ffc:	4b1d      	ldr	r3, [pc, #116]	; (800a074 <__pow5mult+0xac>)
 8009ffe:	481e      	ldr	r0, [pc, #120]	; (800a078 <__pow5mult+0xb0>)
 800a000:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a004:	f000 fbcc 	bl	800a7a0 <__assert_func>
 800a008:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a00c:	6004      	str	r4, [r0, #0]
 800a00e:	60c4      	str	r4, [r0, #12]
 800a010:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a014:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a018:	b94c      	cbnz	r4, 800a02e <__pow5mult+0x66>
 800a01a:	f240 2171 	movw	r1, #625	; 0x271
 800a01e:	4630      	mov	r0, r6
 800a020:	f7ff ff16 	bl	8009e50 <__i2b>
 800a024:	2300      	movs	r3, #0
 800a026:	f8c8 0008 	str.w	r0, [r8, #8]
 800a02a:	4604      	mov	r4, r0
 800a02c:	6003      	str	r3, [r0, #0]
 800a02e:	f04f 0900 	mov.w	r9, #0
 800a032:	07eb      	lsls	r3, r5, #31
 800a034:	d50a      	bpl.n	800a04c <__pow5mult+0x84>
 800a036:	4639      	mov	r1, r7
 800a038:	4622      	mov	r2, r4
 800a03a:	4630      	mov	r0, r6
 800a03c:	f7ff ff1e 	bl	8009e7c <__multiply>
 800a040:	4639      	mov	r1, r7
 800a042:	4680      	mov	r8, r0
 800a044:	4630      	mov	r0, r6
 800a046:	f7ff fe47 	bl	8009cd8 <_Bfree>
 800a04a:	4647      	mov	r7, r8
 800a04c:	106d      	asrs	r5, r5, #1
 800a04e:	d00b      	beq.n	800a068 <__pow5mult+0xa0>
 800a050:	6820      	ldr	r0, [r4, #0]
 800a052:	b938      	cbnz	r0, 800a064 <__pow5mult+0x9c>
 800a054:	4622      	mov	r2, r4
 800a056:	4621      	mov	r1, r4
 800a058:	4630      	mov	r0, r6
 800a05a:	f7ff ff0f 	bl	8009e7c <__multiply>
 800a05e:	6020      	str	r0, [r4, #0]
 800a060:	f8c0 9000 	str.w	r9, [r0]
 800a064:	4604      	mov	r4, r0
 800a066:	e7e4      	b.n	800a032 <__pow5mult+0x6a>
 800a068:	4638      	mov	r0, r7
 800a06a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a06e:	bf00      	nop
 800a070:	0800bea0 	.word	0x0800bea0
 800a074:	0800bcc9 	.word	0x0800bcc9
 800a078:	0800bd50 	.word	0x0800bd50

0800a07c <__lshift>:
 800a07c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a080:	460c      	mov	r4, r1
 800a082:	6849      	ldr	r1, [r1, #4]
 800a084:	6923      	ldr	r3, [r4, #16]
 800a086:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a08a:	68a3      	ldr	r3, [r4, #8]
 800a08c:	4607      	mov	r7, r0
 800a08e:	4691      	mov	r9, r2
 800a090:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a094:	f108 0601 	add.w	r6, r8, #1
 800a098:	42b3      	cmp	r3, r6
 800a09a:	db0b      	blt.n	800a0b4 <__lshift+0x38>
 800a09c:	4638      	mov	r0, r7
 800a09e:	f7ff fddb 	bl	8009c58 <_Balloc>
 800a0a2:	4605      	mov	r5, r0
 800a0a4:	b948      	cbnz	r0, 800a0ba <__lshift+0x3e>
 800a0a6:	4602      	mov	r2, r0
 800a0a8:	4b28      	ldr	r3, [pc, #160]	; (800a14c <__lshift+0xd0>)
 800a0aa:	4829      	ldr	r0, [pc, #164]	; (800a150 <__lshift+0xd4>)
 800a0ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a0b0:	f000 fb76 	bl	800a7a0 <__assert_func>
 800a0b4:	3101      	adds	r1, #1
 800a0b6:	005b      	lsls	r3, r3, #1
 800a0b8:	e7ee      	b.n	800a098 <__lshift+0x1c>
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	f100 0114 	add.w	r1, r0, #20
 800a0c0:	f100 0210 	add.w	r2, r0, #16
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	4553      	cmp	r3, sl
 800a0c8:	db33      	blt.n	800a132 <__lshift+0xb6>
 800a0ca:	6920      	ldr	r0, [r4, #16]
 800a0cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a0d0:	f104 0314 	add.w	r3, r4, #20
 800a0d4:	f019 091f 	ands.w	r9, r9, #31
 800a0d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a0dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a0e0:	d02b      	beq.n	800a13a <__lshift+0xbe>
 800a0e2:	f1c9 0e20 	rsb	lr, r9, #32
 800a0e6:	468a      	mov	sl, r1
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	6818      	ldr	r0, [r3, #0]
 800a0ec:	fa00 f009 	lsl.w	r0, r0, r9
 800a0f0:	4302      	orrs	r2, r0
 800a0f2:	f84a 2b04 	str.w	r2, [sl], #4
 800a0f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0fa:	459c      	cmp	ip, r3
 800a0fc:	fa22 f20e 	lsr.w	r2, r2, lr
 800a100:	d8f3      	bhi.n	800a0ea <__lshift+0x6e>
 800a102:	ebac 0304 	sub.w	r3, ip, r4
 800a106:	3b15      	subs	r3, #21
 800a108:	f023 0303 	bic.w	r3, r3, #3
 800a10c:	3304      	adds	r3, #4
 800a10e:	f104 0015 	add.w	r0, r4, #21
 800a112:	4584      	cmp	ip, r0
 800a114:	bf38      	it	cc
 800a116:	2304      	movcc	r3, #4
 800a118:	50ca      	str	r2, [r1, r3]
 800a11a:	b10a      	cbz	r2, 800a120 <__lshift+0xa4>
 800a11c:	f108 0602 	add.w	r6, r8, #2
 800a120:	3e01      	subs	r6, #1
 800a122:	4638      	mov	r0, r7
 800a124:	612e      	str	r6, [r5, #16]
 800a126:	4621      	mov	r1, r4
 800a128:	f7ff fdd6 	bl	8009cd8 <_Bfree>
 800a12c:	4628      	mov	r0, r5
 800a12e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a132:	f842 0f04 	str.w	r0, [r2, #4]!
 800a136:	3301      	adds	r3, #1
 800a138:	e7c5      	b.n	800a0c6 <__lshift+0x4a>
 800a13a:	3904      	subs	r1, #4
 800a13c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a140:	f841 2f04 	str.w	r2, [r1, #4]!
 800a144:	459c      	cmp	ip, r3
 800a146:	d8f9      	bhi.n	800a13c <__lshift+0xc0>
 800a148:	e7ea      	b.n	800a120 <__lshift+0xa4>
 800a14a:	bf00      	nop
 800a14c:	0800bd3f 	.word	0x0800bd3f
 800a150:	0800bd50 	.word	0x0800bd50

0800a154 <__mcmp>:
 800a154:	b530      	push	{r4, r5, lr}
 800a156:	6902      	ldr	r2, [r0, #16]
 800a158:	690c      	ldr	r4, [r1, #16]
 800a15a:	1b12      	subs	r2, r2, r4
 800a15c:	d10e      	bne.n	800a17c <__mcmp+0x28>
 800a15e:	f100 0314 	add.w	r3, r0, #20
 800a162:	3114      	adds	r1, #20
 800a164:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a168:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a16c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a170:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a174:	42a5      	cmp	r5, r4
 800a176:	d003      	beq.n	800a180 <__mcmp+0x2c>
 800a178:	d305      	bcc.n	800a186 <__mcmp+0x32>
 800a17a:	2201      	movs	r2, #1
 800a17c:	4610      	mov	r0, r2
 800a17e:	bd30      	pop	{r4, r5, pc}
 800a180:	4283      	cmp	r3, r0
 800a182:	d3f3      	bcc.n	800a16c <__mcmp+0x18>
 800a184:	e7fa      	b.n	800a17c <__mcmp+0x28>
 800a186:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a18a:	e7f7      	b.n	800a17c <__mcmp+0x28>

0800a18c <__mdiff>:
 800a18c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a190:	460c      	mov	r4, r1
 800a192:	4606      	mov	r6, r0
 800a194:	4611      	mov	r1, r2
 800a196:	4620      	mov	r0, r4
 800a198:	4617      	mov	r7, r2
 800a19a:	f7ff ffdb 	bl	800a154 <__mcmp>
 800a19e:	1e05      	subs	r5, r0, #0
 800a1a0:	d110      	bne.n	800a1c4 <__mdiff+0x38>
 800a1a2:	4629      	mov	r1, r5
 800a1a4:	4630      	mov	r0, r6
 800a1a6:	f7ff fd57 	bl	8009c58 <_Balloc>
 800a1aa:	b930      	cbnz	r0, 800a1ba <__mdiff+0x2e>
 800a1ac:	4b39      	ldr	r3, [pc, #228]	; (800a294 <__mdiff+0x108>)
 800a1ae:	4602      	mov	r2, r0
 800a1b0:	f240 2132 	movw	r1, #562	; 0x232
 800a1b4:	4838      	ldr	r0, [pc, #224]	; (800a298 <__mdiff+0x10c>)
 800a1b6:	f000 faf3 	bl	800a7a0 <__assert_func>
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a1c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1c4:	bfa4      	itt	ge
 800a1c6:	463b      	movge	r3, r7
 800a1c8:	4627      	movge	r7, r4
 800a1ca:	4630      	mov	r0, r6
 800a1cc:	6879      	ldr	r1, [r7, #4]
 800a1ce:	bfa6      	itte	ge
 800a1d0:	461c      	movge	r4, r3
 800a1d2:	2500      	movge	r5, #0
 800a1d4:	2501      	movlt	r5, #1
 800a1d6:	f7ff fd3f 	bl	8009c58 <_Balloc>
 800a1da:	b920      	cbnz	r0, 800a1e6 <__mdiff+0x5a>
 800a1dc:	4b2d      	ldr	r3, [pc, #180]	; (800a294 <__mdiff+0x108>)
 800a1de:	4602      	mov	r2, r0
 800a1e0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a1e4:	e7e6      	b.n	800a1b4 <__mdiff+0x28>
 800a1e6:	693e      	ldr	r6, [r7, #16]
 800a1e8:	60c5      	str	r5, [r0, #12]
 800a1ea:	6925      	ldr	r5, [r4, #16]
 800a1ec:	f107 0114 	add.w	r1, r7, #20
 800a1f0:	f104 0914 	add.w	r9, r4, #20
 800a1f4:	f100 0e14 	add.w	lr, r0, #20
 800a1f8:	f107 0210 	add.w	r2, r7, #16
 800a1fc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a200:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a204:	46f2      	mov	sl, lr
 800a206:	2700      	movs	r7, #0
 800a208:	f859 3b04 	ldr.w	r3, [r9], #4
 800a20c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a210:	fa1f f883 	uxth.w	r8, r3
 800a214:	fa17 f78b 	uxtah	r7, r7, fp
 800a218:	0c1b      	lsrs	r3, r3, #16
 800a21a:	eba7 0808 	sub.w	r8, r7, r8
 800a21e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a222:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a226:	fa1f f888 	uxth.w	r8, r8
 800a22a:	141f      	asrs	r7, r3, #16
 800a22c:	454d      	cmp	r5, r9
 800a22e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a232:	f84a 3b04 	str.w	r3, [sl], #4
 800a236:	d8e7      	bhi.n	800a208 <__mdiff+0x7c>
 800a238:	1b2b      	subs	r3, r5, r4
 800a23a:	3b15      	subs	r3, #21
 800a23c:	f023 0303 	bic.w	r3, r3, #3
 800a240:	3304      	adds	r3, #4
 800a242:	3415      	adds	r4, #21
 800a244:	42a5      	cmp	r5, r4
 800a246:	bf38      	it	cc
 800a248:	2304      	movcc	r3, #4
 800a24a:	4419      	add	r1, r3
 800a24c:	4473      	add	r3, lr
 800a24e:	469e      	mov	lr, r3
 800a250:	460d      	mov	r5, r1
 800a252:	4565      	cmp	r5, ip
 800a254:	d30e      	bcc.n	800a274 <__mdiff+0xe8>
 800a256:	f10c 0203 	add.w	r2, ip, #3
 800a25a:	1a52      	subs	r2, r2, r1
 800a25c:	f022 0203 	bic.w	r2, r2, #3
 800a260:	3903      	subs	r1, #3
 800a262:	458c      	cmp	ip, r1
 800a264:	bf38      	it	cc
 800a266:	2200      	movcc	r2, #0
 800a268:	441a      	add	r2, r3
 800a26a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a26e:	b17b      	cbz	r3, 800a290 <__mdiff+0x104>
 800a270:	6106      	str	r6, [r0, #16]
 800a272:	e7a5      	b.n	800a1c0 <__mdiff+0x34>
 800a274:	f855 8b04 	ldr.w	r8, [r5], #4
 800a278:	fa17 f488 	uxtah	r4, r7, r8
 800a27c:	1422      	asrs	r2, r4, #16
 800a27e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a282:	b2a4      	uxth	r4, r4
 800a284:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a288:	f84e 4b04 	str.w	r4, [lr], #4
 800a28c:	1417      	asrs	r7, r2, #16
 800a28e:	e7e0      	b.n	800a252 <__mdiff+0xc6>
 800a290:	3e01      	subs	r6, #1
 800a292:	e7ea      	b.n	800a26a <__mdiff+0xde>
 800a294:	0800bd3f 	.word	0x0800bd3f
 800a298:	0800bd50 	.word	0x0800bd50

0800a29c <__d2b>:
 800a29c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a2a0:	4689      	mov	r9, r1
 800a2a2:	2101      	movs	r1, #1
 800a2a4:	ec57 6b10 	vmov	r6, r7, d0
 800a2a8:	4690      	mov	r8, r2
 800a2aa:	f7ff fcd5 	bl	8009c58 <_Balloc>
 800a2ae:	4604      	mov	r4, r0
 800a2b0:	b930      	cbnz	r0, 800a2c0 <__d2b+0x24>
 800a2b2:	4602      	mov	r2, r0
 800a2b4:	4b25      	ldr	r3, [pc, #148]	; (800a34c <__d2b+0xb0>)
 800a2b6:	4826      	ldr	r0, [pc, #152]	; (800a350 <__d2b+0xb4>)
 800a2b8:	f240 310a 	movw	r1, #778	; 0x30a
 800a2bc:	f000 fa70 	bl	800a7a0 <__assert_func>
 800a2c0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a2c4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a2c8:	bb35      	cbnz	r5, 800a318 <__d2b+0x7c>
 800a2ca:	2e00      	cmp	r6, #0
 800a2cc:	9301      	str	r3, [sp, #4]
 800a2ce:	d028      	beq.n	800a322 <__d2b+0x86>
 800a2d0:	4668      	mov	r0, sp
 800a2d2:	9600      	str	r6, [sp, #0]
 800a2d4:	f7ff fd8c 	bl	8009df0 <__lo0bits>
 800a2d8:	9900      	ldr	r1, [sp, #0]
 800a2da:	b300      	cbz	r0, 800a31e <__d2b+0x82>
 800a2dc:	9a01      	ldr	r2, [sp, #4]
 800a2de:	f1c0 0320 	rsb	r3, r0, #32
 800a2e2:	fa02 f303 	lsl.w	r3, r2, r3
 800a2e6:	430b      	orrs	r3, r1
 800a2e8:	40c2      	lsrs	r2, r0
 800a2ea:	6163      	str	r3, [r4, #20]
 800a2ec:	9201      	str	r2, [sp, #4]
 800a2ee:	9b01      	ldr	r3, [sp, #4]
 800a2f0:	61a3      	str	r3, [r4, #24]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	bf14      	ite	ne
 800a2f6:	2202      	movne	r2, #2
 800a2f8:	2201      	moveq	r2, #1
 800a2fa:	6122      	str	r2, [r4, #16]
 800a2fc:	b1d5      	cbz	r5, 800a334 <__d2b+0x98>
 800a2fe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a302:	4405      	add	r5, r0
 800a304:	f8c9 5000 	str.w	r5, [r9]
 800a308:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a30c:	f8c8 0000 	str.w	r0, [r8]
 800a310:	4620      	mov	r0, r4
 800a312:	b003      	add	sp, #12
 800a314:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a318:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a31c:	e7d5      	b.n	800a2ca <__d2b+0x2e>
 800a31e:	6161      	str	r1, [r4, #20]
 800a320:	e7e5      	b.n	800a2ee <__d2b+0x52>
 800a322:	a801      	add	r0, sp, #4
 800a324:	f7ff fd64 	bl	8009df0 <__lo0bits>
 800a328:	9b01      	ldr	r3, [sp, #4]
 800a32a:	6163      	str	r3, [r4, #20]
 800a32c:	2201      	movs	r2, #1
 800a32e:	6122      	str	r2, [r4, #16]
 800a330:	3020      	adds	r0, #32
 800a332:	e7e3      	b.n	800a2fc <__d2b+0x60>
 800a334:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a338:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a33c:	f8c9 0000 	str.w	r0, [r9]
 800a340:	6918      	ldr	r0, [r3, #16]
 800a342:	f7ff fd35 	bl	8009db0 <__hi0bits>
 800a346:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a34a:	e7df      	b.n	800a30c <__d2b+0x70>
 800a34c:	0800bd3f 	.word	0x0800bd3f
 800a350:	0800bd50 	.word	0x0800bd50

0800a354 <_calloc_r>:
 800a354:	b513      	push	{r0, r1, r4, lr}
 800a356:	434a      	muls	r2, r1
 800a358:	4611      	mov	r1, r2
 800a35a:	9201      	str	r2, [sp, #4]
 800a35c:	f000 f85a 	bl	800a414 <_malloc_r>
 800a360:	4604      	mov	r4, r0
 800a362:	b118      	cbz	r0, 800a36c <_calloc_r+0x18>
 800a364:	9a01      	ldr	r2, [sp, #4]
 800a366:	2100      	movs	r1, #0
 800a368:	f7fe f960 	bl	800862c <memset>
 800a36c:	4620      	mov	r0, r4
 800a36e:	b002      	add	sp, #8
 800a370:	bd10      	pop	{r4, pc}
	...

0800a374 <_free_r>:
 800a374:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a376:	2900      	cmp	r1, #0
 800a378:	d048      	beq.n	800a40c <_free_r+0x98>
 800a37a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a37e:	9001      	str	r0, [sp, #4]
 800a380:	2b00      	cmp	r3, #0
 800a382:	f1a1 0404 	sub.w	r4, r1, #4
 800a386:	bfb8      	it	lt
 800a388:	18e4      	addlt	r4, r4, r3
 800a38a:	f000 fa65 	bl	800a858 <__malloc_lock>
 800a38e:	4a20      	ldr	r2, [pc, #128]	; (800a410 <_free_r+0x9c>)
 800a390:	9801      	ldr	r0, [sp, #4]
 800a392:	6813      	ldr	r3, [r2, #0]
 800a394:	4615      	mov	r5, r2
 800a396:	b933      	cbnz	r3, 800a3a6 <_free_r+0x32>
 800a398:	6063      	str	r3, [r4, #4]
 800a39a:	6014      	str	r4, [r2, #0]
 800a39c:	b003      	add	sp, #12
 800a39e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a3a2:	f000 ba5f 	b.w	800a864 <__malloc_unlock>
 800a3a6:	42a3      	cmp	r3, r4
 800a3a8:	d90b      	bls.n	800a3c2 <_free_r+0x4e>
 800a3aa:	6821      	ldr	r1, [r4, #0]
 800a3ac:	1862      	adds	r2, r4, r1
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	bf04      	itt	eq
 800a3b2:	681a      	ldreq	r2, [r3, #0]
 800a3b4:	685b      	ldreq	r3, [r3, #4]
 800a3b6:	6063      	str	r3, [r4, #4]
 800a3b8:	bf04      	itt	eq
 800a3ba:	1852      	addeq	r2, r2, r1
 800a3bc:	6022      	streq	r2, [r4, #0]
 800a3be:	602c      	str	r4, [r5, #0]
 800a3c0:	e7ec      	b.n	800a39c <_free_r+0x28>
 800a3c2:	461a      	mov	r2, r3
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	b10b      	cbz	r3, 800a3cc <_free_r+0x58>
 800a3c8:	42a3      	cmp	r3, r4
 800a3ca:	d9fa      	bls.n	800a3c2 <_free_r+0x4e>
 800a3cc:	6811      	ldr	r1, [r2, #0]
 800a3ce:	1855      	adds	r5, r2, r1
 800a3d0:	42a5      	cmp	r5, r4
 800a3d2:	d10b      	bne.n	800a3ec <_free_r+0x78>
 800a3d4:	6824      	ldr	r4, [r4, #0]
 800a3d6:	4421      	add	r1, r4
 800a3d8:	1854      	adds	r4, r2, r1
 800a3da:	42a3      	cmp	r3, r4
 800a3dc:	6011      	str	r1, [r2, #0]
 800a3de:	d1dd      	bne.n	800a39c <_free_r+0x28>
 800a3e0:	681c      	ldr	r4, [r3, #0]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	6053      	str	r3, [r2, #4]
 800a3e6:	4421      	add	r1, r4
 800a3e8:	6011      	str	r1, [r2, #0]
 800a3ea:	e7d7      	b.n	800a39c <_free_r+0x28>
 800a3ec:	d902      	bls.n	800a3f4 <_free_r+0x80>
 800a3ee:	230c      	movs	r3, #12
 800a3f0:	6003      	str	r3, [r0, #0]
 800a3f2:	e7d3      	b.n	800a39c <_free_r+0x28>
 800a3f4:	6825      	ldr	r5, [r4, #0]
 800a3f6:	1961      	adds	r1, r4, r5
 800a3f8:	428b      	cmp	r3, r1
 800a3fa:	bf04      	itt	eq
 800a3fc:	6819      	ldreq	r1, [r3, #0]
 800a3fe:	685b      	ldreq	r3, [r3, #4]
 800a400:	6063      	str	r3, [r4, #4]
 800a402:	bf04      	itt	eq
 800a404:	1949      	addeq	r1, r1, r5
 800a406:	6021      	streq	r1, [r4, #0]
 800a408:	6054      	str	r4, [r2, #4]
 800a40a:	e7c7      	b.n	800a39c <_free_r+0x28>
 800a40c:	b003      	add	sp, #12
 800a40e:	bd30      	pop	{r4, r5, pc}
 800a410:	20004b14 	.word	0x20004b14

0800a414 <_malloc_r>:
 800a414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a416:	1ccd      	adds	r5, r1, #3
 800a418:	f025 0503 	bic.w	r5, r5, #3
 800a41c:	3508      	adds	r5, #8
 800a41e:	2d0c      	cmp	r5, #12
 800a420:	bf38      	it	cc
 800a422:	250c      	movcc	r5, #12
 800a424:	2d00      	cmp	r5, #0
 800a426:	4606      	mov	r6, r0
 800a428:	db01      	blt.n	800a42e <_malloc_r+0x1a>
 800a42a:	42a9      	cmp	r1, r5
 800a42c:	d903      	bls.n	800a436 <_malloc_r+0x22>
 800a42e:	230c      	movs	r3, #12
 800a430:	6033      	str	r3, [r6, #0]
 800a432:	2000      	movs	r0, #0
 800a434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a436:	f000 fa0f 	bl	800a858 <__malloc_lock>
 800a43a:	4921      	ldr	r1, [pc, #132]	; (800a4c0 <_malloc_r+0xac>)
 800a43c:	680a      	ldr	r2, [r1, #0]
 800a43e:	4614      	mov	r4, r2
 800a440:	b99c      	cbnz	r4, 800a46a <_malloc_r+0x56>
 800a442:	4f20      	ldr	r7, [pc, #128]	; (800a4c4 <_malloc_r+0xb0>)
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	b923      	cbnz	r3, 800a452 <_malloc_r+0x3e>
 800a448:	4621      	mov	r1, r4
 800a44a:	4630      	mov	r0, r6
 800a44c:	f000 f998 	bl	800a780 <_sbrk_r>
 800a450:	6038      	str	r0, [r7, #0]
 800a452:	4629      	mov	r1, r5
 800a454:	4630      	mov	r0, r6
 800a456:	f000 f993 	bl	800a780 <_sbrk_r>
 800a45a:	1c43      	adds	r3, r0, #1
 800a45c:	d123      	bne.n	800a4a6 <_malloc_r+0x92>
 800a45e:	230c      	movs	r3, #12
 800a460:	6033      	str	r3, [r6, #0]
 800a462:	4630      	mov	r0, r6
 800a464:	f000 f9fe 	bl	800a864 <__malloc_unlock>
 800a468:	e7e3      	b.n	800a432 <_malloc_r+0x1e>
 800a46a:	6823      	ldr	r3, [r4, #0]
 800a46c:	1b5b      	subs	r3, r3, r5
 800a46e:	d417      	bmi.n	800a4a0 <_malloc_r+0x8c>
 800a470:	2b0b      	cmp	r3, #11
 800a472:	d903      	bls.n	800a47c <_malloc_r+0x68>
 800a474:	6023      	str	r3, [r4, #0]
 800a476:	441c      	add	r4, r3
 800a478:	6025      	str	r5, [r4, #0]
 800a47a:	e004      	b.n	800a486 <_malloc_r+0x72>
 800a47c:	6863      	ldr	r3, [r4, #4]
 800a47e:	42a2      	cmp	r2, r4
 800a480:	bf0c      	ite	eq
 800a482:	600b      	streq	r3, [r1, #0]
 800a484:	6053      	strne	r3, [r2, #4]
 800a486:	4630      	mov	r0, r6
 800a488:	f000 f9ec 	bl	800a864 <__malloc_unlock>
 800a48c:	f104 000b 	add.w	r0, r4, #11
 800a490:	1d23      	adds	r3, r4, #4
 800a492:	f020 0007 	bic.w	r0, r0, #7
 800a496:	1ac2      	subs	r2, r0, r3
 800a498:	d0cc      	beq.n	800a434 <_malloc_r+0x20>
 800a49a:	1a1b      	subs	r3, r3, r0
 800a49c:	50a3      	str	r3, [r4, r2]
 800a49e:	e7c9      	b.n	800a434 <_malloc_r+0x20>
 800a4a0:	4622      	mov	r2, r4
 800a4a2:	6864      	ldr	r4, [r4, #4]
 800a4a4:	e7cc      	b.n	800a440 <_malloc_r+0x2c>
 800a4a6:	1cc4      	adds	r4, r0, #3
 800a4a8:	f024 0403 	bic.w	r4, r4, #3
 800a4ac:	42a0      	cmp	r0, r4
 800a4ae:	d0e3      	beq.n	800a478 <_malloc_r+0x64>
 800a4b0:	1a21      	subs	r1, r4, r0
 800a4b2:	4630      	mov	r0, r6
 800a4b4:	f000 f964 	bl	800a780 <_sbrk_r>
 800a4b8:	3001      	adds	r0, #1
 800a4ba:	d1dd      	bne.n	800a478 <_malloc_r+0x64>
 800a4bc:	e7cf      	b.n	800a45e <_malloc_r+0x4a>
 800a4be:	bf00      	nop
 800a4c0:	20004b14 	.word	0x20004b14
 800a4c4:	20004b18 	.word	0x20004b18

0800a4c8 <__ssputs_r>:
 800a4c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4cc:	688e      	ldr	r6, [r1, #8]
 800a4ce:	429e      	cmp	r6, r3
 800a4d0:	4682      	mov	sl, r0
 800a4d2:	460c      	mov	r4, r1
 800a4d4:	4690      	mov	r8, r2
 800a4d6:	461f      	mov	r7, r3
 800a4d8:	d838      	bhi.n	800a54c <__ssputs_r+0x84>
 800a4da:	898a      	ldrh	r2, [r1, #12]
 800a4dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a4e0:	d032      	beq.n	800a548 <__ssputs_r+0x80>
 800a4e2:	6825      	ldr	r5, [r4, #0]
 800a4e4:	6909      	ldr	r1, [r1, #16]
 800a4e6:	eba5 0901 	sub.w	r9, r5, r1
 800a4ea:	6965      	ldr	r5, [r4, #20]
 800a4ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a4f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a4f4:	3301      	adds	r3, #1
 800a4f6:	444b      	add	r3, r9
 800a4f8:	106d      	asrs	r5, r5, #1
 800a4fa:	429d      	cmp	r5, r3
 800a4fc:	bf38      	it	cc
 800a4fe:	461d      	movcc	r5, r3
 800a500:	0553      	lsls	r3, r2, #21
 800a502:	d531      	bpl.n	800a568 <__ssputs_r+0xa0>
 800a504:	4629      	mov	r1, r5
 800a506:	f7ff ff85 	bl	800a414 <_malloc_r>
 800a50a:	4606      	mov	r6, r0
 800a50c:	b950      	cbnz	r0, 800a524 <__ssputs_r+0x5c>
 800a50e:	230c      	movs	r3, #12
 800a510:	f8ca 3000 	str.w	r3, [sl]
 800a514:	89a3      	ldrh	r3, [r4, #12]
 800a516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a51a:	81a3      	strh	r3, [r4, #12]
 800a51c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a524:	6921      	ldr	r1, [r4, #16]
 800a526:	464a      	mov	r2, r9
 800a528:	f7fe f872 	bl	8008610 <memcpy>
 800a52c:	89a3      	ldrh	r3, [r4, #12]
 800a52e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a536:	81a3      	strh	r3, [r4, #12]
 800a538:	6126      	str	r6, [r4, #16]
 800a53a:	6165      	str	r5, [r4, #20]
 800a53c:	444e      	add	r6, r9
 800a53e:	eba5 0509 	sub.w	r5, r5, r9
 800a542:	6026      	str	r6, [r4, #0]
 800a544:	60a5      	str	r5, [r4, #8]
 800a546:	463e      	mov	r6, r7
 800a548:	42be      	cmp	r6, r7
 800a54a:	d900      	bls.n	800a54e <__ssputs_r+0x86>
 800a54c:	463e      	mov	r6, r7
 800a54e:	4632      	mov	r2, r6
 800a550:	6820      	ldr	r0, [r4, #0]
 800a552:	4641      	mov	r1, r8
 800a554:	f000 f966 	bl	800a824 <memmove>
 800a558:	68a3      	ldr	r3, [r4, #8]
 800a55a:	6822      	ldr	r2, [r4, #0]
 800a55c:	1b9b      	subs	r3, r3, r6
 800a55e:	4432      	add	r2, r6
 800a560:	60a3      	str	r3, [r4, #8]
 800a562:	6022      	str	r2, [r4, #0]
 800a564:	2000      	movs	r0, #0
 800a566:	e7db      	b.n	800a520 <__ssputs_r+0x58>
 800a568:	462a      	mov	r2, r5
 800a56a:	f000 f981 	bl	800a870 <_realloc_r>
 800a56e:	4606      	mov	r6, r0
 800a570:	2800      	cmp	r0, #0
 800a572:	d1e1      	bne.n	800a538 <__ssputs_r+0x70>
 800a574:	6921      	ldr	r1, [r4, #16]
 800a576:	4650      	mov	r0, sl
 800a578:	f7ff fefc 	bl	800a374 <_free_r>
 800a57c:	e7c7      	b.n	800a50e <__ssputs_r+0x46>
	...

0800a580 <_svfiprintf_r>:
 800a580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a584:	4698      	mov	r8, r3
 800a586:	898b      	ldrh	r3, [r1, #12]
 800a588:	061b      	lsls	r3, r3, #24
 800a58a:	b09d      	sub	sp, #116	; 0x74
 800a58c:	4607      	mov	r7, r0
 800a58e:	460d      	mov	r5, r1
 800a590:	4614      	mov	r4, r2
 800a592:	d50e      	bpl.n	800a5b2 <_svfiprintf_r+0x32>
 800a594:	690b      	ldr	r3, [r1, #16]
 800a596:	b963      	cbnz	r3, 800a5b2 <_svfiprintf_r+0x32>
 800a598:	2140      	movs	r1, #64	; 0x40
 800a59a:	f7ff ff3b 	bl	800a414 <_malloc_r>
 800a59e:	6028      	str	r0, [r5, #0]
 800a5a0:	6128      	str	r0, [r5, #16]
 800a5a2:	b920      	cbnz	r0, 800a5ae <_svfiprintf_r+0x2e>
 800a5a4:	230c      	movs	r3, #12
 800a5a6:	603b      	str	r3, [r7, #0]
 800a5a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5ac:	e0d1      	b.n	800a752 <_svfiprintf_r+0x1d2>
 800a5ae:	2340      	movs	r3, #64	; 0x40
 800a5b0:	616b      	str	r3, [r5, #20]
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	9309      	str	r3, [sp, #36]	; 0x24
 800a5b6:	2320      	movs	r3, #32
 800a5b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a5bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5c0:	2330      	movs	r3, #48	; 0x30
 800a5c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a76c <_svfiprintf_r+0x1ec>
 800a5c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a5ca:	f04f 0901 	mov.w	r9, #1
 800a5ce:	4623      	mov	r3, r4
 800a5d0:	469a      	mov	sl, r3
 800a5d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5d6:	b10a      	cbz	r2, 800a5dc <_svfiprintf_r+0x5c>
 800a5d8:	2a25      	cmp	r2, #37	; 0x25
 800a5da:	d1f9      	bne.n	800a5d0 <_svfiprintf_r+0x50>
 800a5dc:	ebba 0b04 	subs.w	fp, sl, r4
 800a5e0:	d00b      	beq.n	800a5fa <_svfiprintf_r+0x7a>
 800a5e2:	465b      	mov	r3, fp
 800a5e4:	4622      	mov	r2, r4
 800a5e6:	4629      	mov	r1, r5
 800a5e8:	4638      	mov	r0, r7
 800a5ea:	f7ff ff6d 	bl	800a4c8 <__ssputs_r>
 800a5ee:	3001      	adds	r0, #1
 800a5f0:	f000 80aa 	beq.w	800a748 <_svfiprintf_r+0x1c8>
 800a5f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5f6:	445a      	add	r2, fp
 800a5f8:	9209      	str	r2, [sp, #36]	; 0x24
 800a5fa:	f89a 3000 	ldrb.w	r3, [sl]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	f000 80a2 	beq.w	800a748 <_svfiprintf_r+0x1c8>
 800a604:	2300      	movs	r3, #0
 800a606:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a60a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a60e:	f10a 0a01 	add.w	sl, sl, #1
 800a612:	9304      	str	r3, [sp, #16]
 800a614:	9307      	str	r3, [sp, #28]
 800a616:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a61a:	931a      	str	r3, [sp, #104]	; 0x68
 800a61c:	4654      	mov	r4, sl
 800a61e:	2205      	movs	r2, #5
 800a620:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a624:	4851      	ldr	r0, [pc, #324]	; (800a76c <_svfiprintf_r+0x1ec>)
 800a626:	f7f5 fdf3 	bl	8000210 <memchr>
 800a62a:	9a04      	ldr	r2, [sp, #16]
 800a62c:	b9d8      	cbnz	r0, 800a666 <_svfiprintf_r+0xe6>
 800a62e:	06d0      	lsls	r0, r2, #27
 800a630:	bf44      	itt	mi
 800a632:	2320      	movmi	r3, #32
 800a634:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a638:	0711      	lsls	r1, r2, #28
 800a63a:	bf44      	itt	mi
 800a63c:	232b      	movmi	r3, #43	; 0x2b
 800a63e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a642:	f89a 3000 	ldrb.w	r3, [sl]
 800a646:	2b2a      	cmp	r3, #42	; 0x2a
 800a648:	d015      	beq.n	800a676 <_svfiprintf_r+0xf6>
 800a64a:	9a07      	ldr	r2, [sp, #28]
 800a64c:	4654      	mov	r4, sl
 800a64e:	2000      	movs	r0, #0
 800a650:	f04f 0c0a 	mov.w	ip, #10
 800a654:	4621      	mov	r1, r4
 800a656:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a65a:	3b30      	subs	r3, #48	; 0x30
 800a65c:	2b09      	cmp	r3, #9
 800a65e:	d94e      	bls.n	800a6fe <_svfiprintf_r+0x17e>
 800a660:	b1b0      	cbz	r0, 800a690 <_svfiprintf_r+0x110>
 800a662:	9207      	str	r2, [sp, #28]
 800a664:	e014      	b.n	800a690 <_svfiprintf_r+0x110>
 800a666:	eba0 0308 	sub.w	r3, r0, r8
 800a66a:	fa09 f303 	lsl.w	r3, r9, r3
 800a66e:	4313      	orrs	r3, r2
 800a670:	9304      	str	r3, [sp, #16]
 800a672:	46a2      	mov	sl, r4
 800a674:	e7d2      	b.n	800a61c <_svfiprintf_r+0x9c>
 800a676:	9b03      	ldr	r3, [sp, #12]
 800a678:	1d19      	adds	r1, r3, #4
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	9103      	str	r1, [sp, #12]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	bfbb      	ittet	lt
 800a682:	425b      	neglt	r3, r3
 800a684:	f042 0202 	orrlt.w	r2, r2, #2
 800a688:	9307      	strge	r3, [sp, #28]
 800a68a:	9307      	strlt	r3, [sp, #28]
 800a68c:	bfb8      	it	lt
 800a68e:	9204      	strlt	r2, [sp, #16]
 800a690:	7823      	ldrb	r3, [r4, #0]
 800a692:	2b2e      	cmp	r3, #46	; 0x2e
 800a694:	d10c      	bne.n	800a6b0 <_svfiprintf_r+0x130>
 800a696:	7863      	ldrb	r3, [r4, #1]
 800a698:	2b2a      	cmp	r3, #42	; 0x2a
 800a69a:	d135      	bne.n	800a708 <_svfiprintf_r+0x188>
 800a69c:	9b03      	ldr	r3, [sp, #12]
 800a69e:	1d1a      	adds	r2, r3, #4
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	9203      	str	r2, [sp, #12]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	bfb8      	it	lt
 800a6a8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a6ac:	3402      	adds	r4, #2
 800a6ae:	9305      	str	r3, [sp, #20]
 800a6b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a77c <_svfiprintf_r+0x1fc>
 800a6b4:	7821      	ldrb	r1, [r4, #0]
 800a6b6:	2203      	movs	r2, #3
 800a6b8:	4650      	mov	r0, sl
 800a6ba:	f7f5 fda9 	bl	8000210 <memchr>
 800a6be:	b140      	cbz	r0, 800a6d2 <_svfiprintf_r+0x152>
 800a6c0:	2340      	movs	r3, #64	; 0x40
 800a6c2:	eba0 000a 	sub.w	r0, r0, sl
 800a6c6:	fa03 f000 	lsl.w	r0, r3, r0
 800a6ca:	9b04      	ldr	r3, [sp, #16]
 800a6cc:	4303      	orrs	r3, r0
 800a6ce:	3401      	adds	r4, #1
 800a6d0:	9304      	str	r3, [sp, #16]
 800a6d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6d6:	4826      	ldr	r0, [pc, #152]	; (800a770 <_svfiprintf_r+0x1f0>)
 800a6d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6dc:	2206      	movs	r2, #6
 800a6de:	f7f5 fd97 	bl	8000210 <memchr>
 800a6e2:	2800      	cmp	r0, #0
 800a6e4:	d038      	beq.n	800a758 <_svfiprintf_r+0x1d8>
 800a6e6:	4b23      	ldr	r3, [pc, #140]	; (800a774 <_svfiprintf_r+0x1f4>)
 800a6e8:	bb1b      	cbnz	r3, 800a732 <_svfiprintf_r+0x1b2>
 800a6ea:	9b03      	ldr	r3, [sp, #12]
 800a6ec:	3307      	adds	r3, #7
 800a6ee:	f023 0307 	bic.w	r3, r3, #7
 800a6f2:	3308      	adds	r3, #8
 800a6f4:	9303      	str	r3, [sp, #12]
 800a6f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6f8:	4433      	add	r3, r6
 800a6fa:	9309      	str	r3, [sp, #36]	; 0x24
 800a6fc:	e767      	b.n	800a5ce <_svfiprintf_r+0x4e>
 800a6fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800a702:	460c      	mov	r4, r1
 800a704:	2001      	movs	r0, #1
 800a706:	e7a5      	b.n	800a654 <_svfiprintf_r+0xd4>
 800a708:	2300      	movs	r3, #0
 800a70a:	3401      	adds	r4, #1
 800a70c:	9305      	str	r3, [sp, #20]
 800a70e:	4619      	mov	r1, r3
 800a710:	f04f 0c0a 	mov.w	ip, #10
 800a714:	4620      	mov	r0, r4
 800a716:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a71a:	3a30      	subs	r2, #48	; 0x30
 800a71c:	2a09      	cmp	r2, #9
 800a71e:	d903      	bls.n	800a728 <_svfiprintf_r+0x1a8>
 800a720:	2b00      	cmp	r3, #0
 800a722:	d0c5      	beq.n	800a6b0 <_svfiprintf_r+0x130>
 800a724:	9105      	str	r1, [sp, #20]
 800a726:	e7c3      	b.n	800a6b0 <_svfiprintf_r+0x130>
 800a728:	fb0c 2101 	mla	r1, ip, r1, r2
 800a72c:	4604      	mov	r4, r0
 800a72e:	2301      	movs	r3, #1
 800a730:	e7f0      	b.n	800a714 <_svfiprintf_r+0x194>
 800a732:	ab03      	add	r3, sp, #12
 800a734:	9300      	str	r3, [sp, #0]
 800a736:	462a      	mov	r2, r5
 800a738:	4b0f      	ldr	r3, [pc, #60]	; (800a778 <_svfiprintf_r+0x1f8>)
 800a73a:	a904      	add	r1, sp, #16
 800a73c:	4638      	mov	r0, r7
 800a73e:	f7fe f81d 	bl	800877c <_printf_float>
 800a742:	1c42      	adds	r2, r0, #1
 800a744:	4606      	mov	r6, r0
 800a746:	d1d6      	bne.n	800a6f6 <_svfiprintf_r+0x176>
 800a748:	89ab      	ldrh	r3, [r5, #12]
 800a74a:	065b      	lsls	r3, r3, #25
 800a74c:	f53f af2c 	bmi.w	800a5a8 <_svfiprintf_r+0x28>
 800a750:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a752:	b01d      	add	sp, #116	; 0x74
 800a754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a758:	ab03      	add	r3, sp, #12
 800a75a:	9300      	str	r3, [sp, #0]
 800a75c:	462a      	mov	r2, r5
 800a75e:	4b06      	ldr	r3, [pc, #24]	; (800a778 <_svfiprintf_r+0x1f8>)
 800a760:	a904      	add	r1, sp, #16
 800a762:	4638      	mov	r0, r7
 800a764:	f7fe faae 	bl	8008cc4 <_printf_i>
 800a768:	e7eb      	b.n	800a742 <_svfiprintf_r+0x1c2>
 800a76a:	bf00      	nop
 800a76c:	0800beac 	.word	0x0800beac
 800a770:	0800beb6 	.word	0x0800beb6
 800a774:	0800877d 	.word	0x0800877d
 800a778:	0800a4c9 	.word	0x0800a4c9
 800a77c:	0800beb2 	.word	0x0800beb2

0800a780 <_sbrk_r>:
 800a780:	b538      	push	{r3, r4, r5, lr}
 800a782:	4d06      	ldr	r5, [pc, #24]	; (800a79c <_sbrk_r+0x1c>)
 800a784:	2300      	movs	r3, #0
 800a786:	4604      	mov	r4, r0
 800a788:	4608      	mov	r0, r1
 800a78a:	602b      	str	r3, [r5, #0]
 800a78c:	f7f7 fde2 	bl	8002354 <_sbrk>
 800a790:	1c43      	adds	r3, r0, #1
 800a792:	d102      	bne.n	800a79a <_sbrk_r+0x1a>
 800a794:	682b      	ldr	r3, [r5, #0]
 800a796:	b103      	cbz	r3, 800a79a <_sbrk_r+0x1a>
 800a798:	6023      	str	r3, [r4, #0]
 800a79a:	bd38      	pop	{r3, r4, r5, pc}
 800a79c:	20004d3c 	.word	0x20004d3c

0800a7a0 <__assert_func>:
 800a7a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a7a2:	4614      	mov	r4, r2
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	4b09      	ldr	r3, [pc, #36]	; (800a7cc <__assert_func+0x2c>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4605      	mov	r5, r0
 800a7ac:	68d8      	ldr	r0, [r3, #12]
 800a7ae:	b14c      	cbz	r4, 800a7c4 <__assert_func+0x24>
 800a7b0:	4b07      	ldr	r3, [pc, #28]	; (800a7d0 <__assert_func+0x30>)
 800a7b2:	9100      	str	r1, [sp, #0]
 800a7b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a7b8:	4906      	ldr	r1, [pc, #24]	; (800a7d4 <__assert_func+0x34>)
 800a7ba:	462b      	mov	r3, r5
 800a7bc:	f000 f80e 	bl	800a7dc <fiprintf>
 800a7c0:	f000 faa4 	bl	800ad0c <abort>
 800a7c4:	4b04      	ldr	r3, [pc, #16]	; (800a7d8 <__assert_func+0x38>)
 800a7c6:	461c      	mov	r4, r3
 800a7c8:	e7f3      	b.n	800a7b2 <__assert_func+0x12>
 800a7ca:	bf00      	nop
 800a7cc:	20000010 	.word	0x20000010
 800a7d0:	0800bebd 	.word	0x0800bebd
 800a7d4:	0800beca 	.word	0x0800beca
 800a7d8:	0800bef8 	.word	0x0800bef8

0800a7dc <fiprintf>:
 800a7dc:	b40e      	push	{r1, r2, r3}
 800a7de:	b503      	push	{r0, r1, lr}
 800a7e0:	4601      	mov	r1, r0
 800a7e2:	ab03      	add	r3, sp, #12
 800a7e4:	4805      	ldr	r0, [pc, #20]	; (800a7fc <fiprintf+0x20>)
 800a7e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7ea:	6800      	ldr	r0, [r0, #0]
 800a7ec:	9301      	str	r3, [sp, #4]
 800a7ee:	f000 f88f 	bl	800a910 <_vfiprintf_r>
 800a7f2:	b002      	add	sp, #8
 800a7f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7f8:	b003      	add	sp, #12
 800a7fa:	4770      	bx	lr
 800a7fc:	20000010 	.word	0x20000010

0800a800 <__ascii_mbtowc>:
 800a800:	b082      	sub	sp, #8
 800a802:	b901      	cbnz	r1, 800a806 <__ascii_mbtowc+0x6>
 800a804:	a901      	add	r1, sp, #4
 800a806:	b142      	cbz	r2, 800a81a <__ascii_mbtowc+0x1a>
 800a808:	b14b      	cbz	r3, 800a81e <__ascii_mbtowc+0x1e>
 800a80a:	7813      	ldrb	r3, [r2, #0]
 800a80c:	600b      	str	r3, [r1, #0]
 800a80e:	7812      	ldrb	r2, [r2, #0]
 800a810:	1e10      	subs	r0, r2, #0
 800a812:	bf18      	it	ne
 800a814:	2001      	movne	r0, #1
 800a816:	b002      	add	sp, #8
 800a818:	4770      	bx	lr
 800a81a:	4610      	mov	r0, r2
 800a81c:	e7fb      	b.n	800a816 <__ascii_mbtowc+0x16>
 800a81e:	f06f 0001 	mvn.w	r0, #1
 800a822:	e7f8      	b.n	800a816 <__ascii_mbtowc+0x16>

0800a824 <memmove>:
 800a824:	4288      	cmp	r0, r1
 800a826:	b510      	push	{r4, lr}
 800a828:	eb01 0402 	add.w	r4, r1, r2
 800a82c:	d902      	bls.n	800a834 <memmove+0x10>
 800a82e:	4284      	cmp	r4, r0
 800a830:	4623      	mov	r3, r4
 800a832:	d807      	bhi.n	800a844 <memmove+0x20>
 800a834:	1e43      	subs	r3, r0, #1
 800a836:	42a1      	cmp	r1, r4
 800a838:	d008      	beq.n	800a84c <memmove+0x28>
 800a83a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a83e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a842:	e7f8      	b.n	800a836 <memmove+0x12>
 800a844:	4402      	add	r2, r0
 800a846:	4601      	mov	r1, r0
 800a848:	428a      	cmp	r2, r1
 800a84a:	d100      	bne.n	800a84e <memmove+0x2a>
 800a84c:	bd10      	pop	{r4, pc}
 800a84e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a852:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a856:	e7f7      	b.n	800a848 <memmove+0x24>

0800a858 <__malloc_lock>:
 800a858:	4801      	ldr	r0, [pc, #4]	; (800a860 <__malloc_lock+0x8>)
 800a85a:	f000 bc17 	b.w	800b08c <__retarget_lock_acquire_recursive>
 800a85e:	bf00      	nop
 800a860:	20004d44 	.word	0x20004d44

0800a864 <__malloc_unlock>:
 800a864:	4801      	ldr	r0, [pc, #4]	; (800a86c <__malloc_unlock+0x8>)
 800a866:	f000 bc12 	b.w	800b08e <__retarget_lock_release_recursive>
 800a86a:	bf00      	nop
 800a86c:	20004d44 	.word	0x20004d44

0800a870 <_realloc_r>:
 800a870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a872:	4607      	mov	r7, r0
 800a874:	4614      	mov	r4, r2
 800a876:	460e      	mov	r6, r1
 800a878:	b921      	cbnz	r1, 800a884 <_realloc_r+0x14>
 800a87a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a87e:	4611      	mov	r1, r2
 800a880:	f7ff bdc8 	b.w	800a414 <_malloc_r>
 800a884:	b922      	cbnz	r2, 800a890 <_realloc_r+0x20>
 800a886:	f7ff fd75 	bl	800a374 <_free_r>
 800a88a:	4625      	mov	r5, r4
 800a88c:	4628      	mov	r0, r5
 800a88e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a890:	f000 fc62 	bl	800b158 <_malloc_usable_size_r>
 800a894:	42a0      	cmp	r0, r4
 800a896:	d20f      	bcs.n	800a8b8 <_realloc_r+0x48>
 800a898:	4621      	mov	r1, r4
 800a89a:	4638      	mov	r0, r7
 800a89c:	f7ff fdba 	bl	800a414 <_malloc_r>
 800a8a0:	4605      	mov	r5, r0
 800a8a2:	2800      	cmp	r0, #0
 800a8a4:	d0f2      	beq.n	800a88c <_realloc_r+0x1c>
 800a8a6:	4631      	mov	r1, r6
 800a8a8:	4622      	mov	r2, r4
 800a8aa:	f7fd feb1 	bl	8008610 <memcpy>
 800a8ae:	4631      	mov	r1, r6
 800a8b0:	4638      	mov	r0, r7
 800a8b2:	f7ff fd5f 	bl	800a374 <_free_r>
 800a8b6:	e7e9      	b.n	800a88c <_realloc_r+0x1c>
 800a8b8:	4635      	mov	r5, r6
 800a8ba:	e7e7      	b.n	800a88c <_realloc_r+0x1c>

0800a8bc <__sfputc_r>:
 800a8bc:	6893      	ldr	r3, [r2, #8]
 800a8be:	3b01      	subs	r3, #1
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	b410      	push	{r4}
 800a8c4:	6093      	str	r3, [r2, #8]
 800a8c6:	da08      	bge.n	800a8da <__sfputc_r+0x1e>
 800a8c8:	6994      	ldr	r4, [r2, #24]
 800a8ca:	42a3      	cmp	r3, r4
 800a8cc:	db01      	blt.n	800a8d2 <__sfputc_r+0x16>
 800a8ce:	290a      	cmp	r1, #10
 800a8d0:	d103      	bne.n	800a8da <__sfputc_r+0x1e>
 800a8d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8d6:	f000 b94b 	b.w	800ab70 <__swbuf_r>
 800a8da:	6813      	ldr	r3, [r2, #0]
 800a8dc:	1c58      	adds	r0, r3, #1
 800a8de:	6010      	str	r0, [r2, #0]
 800a8e0:	7019      	strb	r1, [r3, #0]
 800a8e2:	4608      	mov	r0, r1
 800a8e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8e8:	4770      	bx	lr

0800a8ea <__sfputs_r>:
 800a8ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ec:	4606      	mov	r6, r0
 800a8ee:	460f      	mov	r7, r1
 800a8f0:	4614      	mov	r4, r2
 800a8f2:	18d5      	adds	r5, r2, r3
 800a8f4:	42ac      	cmp	r4, r5
 800a8f6:	d101      	bne.n	800a8fc <__sfputs_r+0x12>
 800a8f8:	2000      	movs	r0, #0
 800a8fa:	e007      	b.n	800a90c <__sfputs_r+0x22>
 800a8fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a900:	463a      	mov	r2, r7
 800a902:	4630      	mov	r0, r6
 800a904:	f7ff ffda 	bl	800a8bc <__sfputc_r>
 800a908:	1c43      	adds	r3, r0, #1
 800a90a:	d1f3      	bne.n	800a8f4 <__sfputs_r+0xa>
 800a90c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a910 <_vfiprintf_r>:
 800a910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a914:	460d      	mov	r5, r1
 800a916:	b09d      	sub	sp, #116	; 0x74
 800a918:	4614      	mov	r4, r2
 800a91a:	4698      	mov	r8, r3
 800a91c:	4606      	mov	r6, r0
 800a91e:	b118      	cbz	r0, 800a928 <_vfiprintf_r+0x18>
 800a920:	6983      	ldr	r3, [r0, #24]
 800a922:	b90b      	cbnz	r3, 800a928 <_vfiprintf_r+0x18>
 800a924:	f000 fb14 	bl	800af50 <__sinit>
 800a928:	4b89      	ldr	r3, [pc, #548]	; (800ab50 <_vfiprintf_r+0x240>)
 800a92a:	429d      	cmp	r5, r3
 800a92c:	d11b      	bne.n	800a966 <_vfiprintf_r+0x56>
 800a92e:	6875      	ldr	r5, [r6, #4]
 800a930:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a932:	07d9      	lsls	r1, r3, #31
 800a934:	d405      	bmi.n	800a942 <_vfiprintf_r+0x32>
 800a936:	89ab      	ldrh	r3, [r5, #12]
 800a938:	059a      	lsls	r2, r3, #22
 800a93a:	d402      	bmi.n	800a942 <_vfiprintf_r+0x32>
 800a93c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a93e:	f000 fba5 	bl	800b08c <__retarget_lock_acquire_recursive>
 800a942:	89ab      	ldrh	r3, [r5, #12]
 800a944:	071b      	lsls	r3, r3, #28
 800a946:	d501      	bpl.n	800a94c <_vfiprintf_r+0x3c>
 800a948:	692b      	ldr	r3, [r5, #16]
 800a94a:	b9eb      	cbnz	r3, 800a988 <_vfiprintf_r+0x78>
 800a94c:	4629      	mov	r1, r5
 800a94e:	4630      	mov	r0, r6
 800a950:	f000 f96e 	bl	800ac30 <__swsetup_r>
 800a954:	b1c0      	cbz	r0, 800a988 <_vfiprintf_r+0x78>
 800a956:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a958:	07dc      	lsls	r4, r3, #31
 800a95a:	d50e      	bpl.n	800a97a <_vfiprintf_r+0x6a>
 800a95c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a960:	b01d      	add	sp, #116	; 0x74
 800a962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a966:	4b7b      	ldr	r3, [pc, #492]	; (800ab54 <_vfiprintf_r+0x244>)
 800a968:	429d      	cmp	r5, r3
 800a96a:	d101      	bne.n	800a970 <_vfiprintf_r+0x60>
 800a96c:	68b5      	ldr	r5, [r6, #8]
 800a96e:	e7df      	b.n	800a930 <_vfiprintf_r+0x20>
 800a970:	4b79      	ldr	r3, [pc, #484]	; (800ab58 <_vfiprintf_r+0x248>)
 800a972:	429d      	cmp	r5, r3
 800a974:	bf08      	it	eq
 800a976:	68f5      	ldreq	r5, [r6, #12]
 800a978:	e7da      	b.n	800a930 <_vfiprintf_r+0x20>
 800a97a:	89ab      	ldrh	r3, [r5, #12]
 800a97c:	0598      	lsls	r0, r3, #22
 800a97e:	d4ed      	bmi.n	800a95c <_vfiprintf_r+0x4c>
 800a980:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a982:	f000 fb84 	bl	800b08e <__retarget_lock_release_recursive>
 800a986:	e7e9      	b.n	800a95c <_vfiprintf_r+0x4c>
 800a988:	2300      	movs	r3, #0
 800a98a:	9309      	str	r3, [sp, #36]	; 0x24
 800a98c:	2320      	movs	r3, #32
 800a98e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a992:	f8cd 800c 	str.w	r8, [sp, #12]
 800a996:	2330      	movs	r3, #48	; 0x30
 800a998:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ab5c <_vfiprintf_r+0x24c>
 800a99c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a9a0:	f04f 0901 	mov.w	r9, #1
 800a9a4:	4623      	mov	r3, r4
 800a9a6:	469a      	mov	sl, r3
 800a9a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9ac:	b10a      	cbz	r2, 800a9b2 <_vfiprintf_r+0xa2>
 800a9ae:	2a25      	cmp	r2, #37	; 0x25
 800a9b0:	d1f9      	bne.n	800a9a6 <_vfiprintf_r+0x96>
 800a9b2:	ebba 0b04 	subs.w	fp, sl, r4
 800a9b6:	d00b      	beq.n	800a9d0 <_vfiprintf_r+0xc0>
 800a9b8:	465b      	mov	r3, fp
 800a9ba:	4622      	mov	r2, r4
 800a9bc:	4629      	mov	r1, r5
 800a9be:	4630      	mov	r0, r6
 800a9c0:	f7ff ff93 	bl	800a8ea <__sfputs_r>
 800a9c4:	3001      	adds	r0, #1
 800a9c6:	f000 80aa 	beq.w	800ab1e <_vfiprintf_r+0x20e>
 800a9ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9cc:	445a      	add	r2, fp
 800a9ce:	9209      	str	r2, [sp, #36]	; 0x24
 800a9d0:	f89a 3000 	ldrb.w	r3, [sl]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	f000 80a2 	beq.w	800ab1e <_vfiprintf_r+0x20e>
 800a9da:	2300      	movs	r3, #0
 800a9dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a9e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9e4:	f10a 0a01 	add.w	sl, sl, #1
 800a9e8:	9304      	str	r3, [sp, #16]
 800a9ea:	9307      	str	r3, [sp, #28]
 800a9ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a9f0:	931a      	str	r3, [sp, #104]	; 0x68
 800a9f2:	4654      	mov	r4, sl
 800a9f4:	2205      	movs	r2, #5
 800a9f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9fa:	4858      	ldr	r0, [pc, #352]	; (800ab5c <_vfiprintf_r+0x24c>)
 800a9fc:	f7f5 fc08 	bl	8000210 <memchr>
 800aa00:	9a04      	ldr	r2, [sp, #16]
 800aa02:	b9d8      	cbnz	r0, 800aa3c <_vfiprintf_r+0x12c>
 800aa04:	06d1      	lsls	r1, r2, #27
 800aa06:	bf44      	itt	mi
 800aa08:	2320      	movmi	r3, #32
 800aa0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa0e:	0713      	lsls	r3, r2, #28
 800aa10:	bf44      	itt	mi
 800aa12:	232b      	movmi	r3, #43	; 0x2b
 800aa14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa18:	f89a 3000 	ldrb.w	r3, [sl]
 800aa1c:	2b2a      	cmp	r3, #42	; 0x2a
 800aa1e:	d015      	beq.n	800aa4c <_vfiprintf_r+0x13c>
 800aa20:	9a07      	ldr	r2, [sp, #28]
 800aa22:	4654      	mov	r4, sl
 800aa24:	2000      	movs	r0, #0
 800aa26:	f04f 0c0a 	mov.w	ip, #10
 800aa2a:	4621      	mov	r1, r4
 800aa2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa30:	3b30      	subs	r3, #48	; 0x30
 800aa32:	2b09      	cmp	r3, #9
 800aa34:	d94e      	bls.n	800aad4 <_vfiprintf_r+0x1c4>
 800aa36:	b1b0      	cbz	r0, 800aa66 <_vfiprintf_r+0x156>
 800aa38:	9207      	str	r2, [sp, #28]
 800aa3a:	e014      	b.n	800aa66 <_vfiprintf_r+0x156>
 800aa3c:	eba0 0308 	sub.w	r3, r0, r8
 800aa40:	fa09 f303 	lsl.w	r3, r9, r3
 800aa44:	4313      	orrs	r3, r2
 800aa46:	9304      	str	r3, [sp, #16]
 800aa48:	46a2      	mov	sl, r4
 800aa4a:	e7d2      	b.n	800a9f2 <_vfiprintf_r+0xe2>
 800aa4c:	9b03      	ldr	r3, [sp, #12]
 800aa4e:	1d19      	adds	r1, r3, #4
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	9103      	str	r1, [sp, #12]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	bfbb      	ittet	lt
 800aa58:	425b      	neglt	r3, r3
 800aa5a:	f042 0202 	orrlt.w	r2, r2, #2
 800aa5e:	9307      	strge	r3, [sp, #28]
 800aa60:	9307      	strlt	r3, [sp, #28]
 800aa62:	bfb8      	it	lt
 800aa64:	9204      	strlt	r2, [sp, #16]
 800aa66:	7823      	ldrb	r3, [r4, #0]
 800aa68:	2b2e      	cmp	r3, #46	; 0x2e
 800aa6a:	d10c      	bne.n	800aa86 <_vfiprintf_r+0x176>
 800aa6c:	7863      	ldrb	r3, [r4, #1]
 800aa6e:	2b2a      	cmp	r3, #42	; 0x2a
 800aa70:	d135      	bne.n	800aade <_vfiprintf_r+0x1ce>
 800aa72:	9b03      	ldr	r3, [sp, #12]
 800aa74:	1d1a      	adds	r2, r3, #4
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	9203      	str	r2, [sp, #12]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	bfb8      	it	lt
 800aa7e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800aa82:	3402      	adds	r4, #2
 800aa84:	9305      	str	r3, [sp, #20]
 800aa86:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ab6c <_vfiprintf_r+0x25c>
 800aa8a:	7821      	ldrb	r1, [r4, #0]
 800aa8c:	2203      	movs	r2, #3
 800aa8e:	4650      	mov	r0, sl
 800aa90:	f7f5 fbbe 	bl	8000210 <memchr>
 800aa94:	b140      	cbz	r0, 800aaa8 <_vfiprintf_r+0x198>
 800aa96:	2340      	movs	r3, #64	; 0x40
 800aa98:	eba0 000a 	sub.w	r0, r0, sl
 800aa9c:	fa03 f000 	lsl.w	r0, r3, r0
 800aaa0:	9b04      	ldr	r3, [sp, #16]
 800aaa2:	4303      	orrs	r3, r0
 800aaa4:	3401      	adds	r4, #1
 800aaa6:	9304      	str	r3, [sp, #16]
 800aaa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaac:	482c      	ldr	r0, [pc, #176]	; (800ab60 <_vfiprintf_r+0x250>)
 800aaae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aab2:	2206      	movs	r2, #6
 800aab4:	f7f5 fbac 	bl	8000210 <memchr>
 800aab8:	2800      	cmp	r0, #0
 800aaba:	d03f      	beq.n	800ab3c <_vfiprintf_r+0x22c>
 800aabc:	4b29      	ldr	r3, [pc, #164]	; (800ab64 <_vfiprintf_r+0x254>)
 800aabe:	bb1b      	cbnz	r3, 800ab08 <_vfiprintf_r+0x1f8>
 800aac0:	9b03      	ldr	r3, [sp, #12]
 800aac2:	3307      	adds	r3, #7
 800aac4:	f023 0307 	bic.w	r3, r3, #7
 800aac8:	3308      	adds	r3, #8
 800aaca:	9303      	str	r3, [sp, #12]
 800aacc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aace:	443b      	add	r3, r7
 800aad0:	9309      	str	r3, [sp, #36]	; 0x24
 800aad2:	e767      	b.n	800a9a4 <_vfiprintf_r+0x94>
 800aad4:	fb0c 3202 	mla	r2, ip, r2, r3
 800aad8:	460c      	mov	r4, r1
 800aada:	2001      	movs	r0, #1
 800aadc:	e7a5      	b.n	800aa2a <_vfiprintf_r+0x11a>
 800aade:	2300      	movs	r3, #0
 800aae0:	3401      	adds	r4, #1
 800aae2:	9305      	str	r3, [sp, #20]
 800aae4:	4619      	mov	r1, r3
 800aae6:	f04f 0c0a 	mov.w	ip, #10
 800aaea:	4620      	mov	r0, r4
 800aaec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aaf0:	3a30      	subs	r2, #48	; 0x30
 800aaf2:	2a09      	cmp	r2, #9
 800aaf4:	d903      	bls.n	800aafe <_vfiprintf_r+0x1ee>
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d0c5      	beq.n	800aa86 <_vfiprintf_r+0x176>
 800aafa:	9105      	str	r1, [sp, #20]
 800aafc:	e7c3      	b.n	800aa86 <_vfiprintf_r+0x176>
 800aafe:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab02:	4604      	mov	r4, r0
 800ab04:	2301      	movs	r3, #1
 800ab06:	e7f0      	b.n	800aaea <_vfiprintf_r+0x1da>
 800ab08:	ab03      	add	r3, sp, #12
 800ab0a:	9300      	str	r3, [sp, #0]
 800ab0c:	462a      	mov	r2, r5
 800ab0e:	4b16      	ldr	r3, [pc, #88]	; (800ab68 <_vfiprintf_r+0x258>)
 800ab10:	a904      	add	r1, sp, #16
 800ab12:	4630      	mov	r0, r6
 800ab14:	f7fd fe32 	bl	800877c <_printf_float>
 800ab18:	4607      	mov	r7, r0
 800ab1a:	1c78      	adds	r0, r7, #1
 800ab1c:	d1d6      	bne.n	800aacc <_vfiprintf_r+0x1bc>
 800ab1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab20:	07d9      	lsls	r1, r3, #31
 800ab22:	d405      	bmi.n	800ab30 <_vfiprintf_r+0x220>
 800ab24:	89ab      	ldrh	r3, [r5, #12]
 800ab26:	059a      	lsls	r2, r3, #22
 800ab28:	d402      	bmi.n	800ab30 <_vfiprintf_r+0x220>
 800ab2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab2c:	f000 faaf 	bl	800b08e <__retarget_lock_release_recursive>
 800ab30:	89ab      	ldrh	r3, [r5, #12]
 800ab32:	065b      	lsls	r3, r3, #25
 800ab34:	f53f af12 	bmi.w	800a95c <_vfiprintf_r+0x4c>
 800ab38:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab3a:	e711      	b.n	800a960 <_vfiprintf_r+0x50>
 800ab3c:	ab03      	add	r3, sp, #12
 800ab3e:	9300      	str	r3, [sp, #0]
 800ab40:	462a      	mov	r2, r5
 800ab42:	4b09      	ldr	r3, [pc, #36]	; (800ab68 <_vfiprintf_r+0x258>)
 800ab44:	a904      	add	r1, sp, #16
 800ab46:	4630      	mov	r0, r6
 800ab48:	f7fe f8bc 	bl	8008cc4 <_printf_i>
 800ab4c:	e7e4      	b.n	800ab18 <_vfiprintf_r+0x208>
 800ab4e:	bf00      	nop
 800ab50:	0800c024 	.word	0x0800c024
 800ab54:	0800c044 	.word	0x0800c044
 800ab58:	0800c004 	.word	0x0800c004
 800ab5c:	0800beac 	.word	0x0800beac
 800ab60:	0800beb6 	.word	0x0800beb6
 800ab64:	0800877d 	.word	0x0800877d
 800ab68:	0800a8eb 	.word	0x0800a8eb
 800ab6c:	0800beb2 	.word	0x0800beb2

0800ab70 <__swbuf_r>:
 800ab70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab72:	460e      	mov	r6, r1
 800ab74:	4614      	mov	r4, r2
 800ab76:	4605      	mov	r5, r0
 800ab78:	b118      	cbz	r0, 800ab82 <__swbuf_r+0x12>
 800ab7a:	6983      	ldr	r3, [r0, #24]
 800ab7c:	b90b      	cbnz	r3, 800ab82 <__swbuf_r+0x12>
 800ab7e:	f000 f9e7 	bl	800af50 <__sinit>
 800ab82:	4b21      	ldr	r3, [pc, #132]	; (800ac08 <__swbuf_r+0x98>)
 800ab84:	429c      	cmp	r4, r3
 800ab86:	d12b      	bne.n	800abe0 <__swbuf_r+0x70>
 800ab88:	686c      	ldr	r4, [r5, #4]
 800ab8a:	69a3      	ldr	r3, [r4, #24]
 800ab8c:	60a3      	str	r3, [r4, #8]
 800ab8e:	89a3      	ldrh	r3, [r4, #12]
 800ab90:	071a      	lsls	r2, r3, #28
 800ab92:	d52f      	bpl.n	800abf4 <__swbuf_r+0x84>
 800ab94:	6923      	ldr	r3, [r4, #16]
 800ab96:	b36b      	cbz	r3, 800abf4 <__swbuf_r+0x84>
 800ab98:	6923      	ldr	r3, [r4, #16]
 800ab9a:	6820      	ldr	r0, [r4, #0]
 800ab9c:	1ac0      	subs	r0, r0, r3
 800ab9e:	6963      	ldr	r3, [r4, #20]
 800aba0:	b2f6      	uxtb	r6, r6
 800aba2:	4283      	cmp	r3, r0
 800aba4:	4637      	mov	r7, r6
 800aba6:	dc04      	bgt.n	800abb2 <__swbuf_r+0x42>
 800aba8:	4621      	mov	r1, r4
 800abaa:	4628      	mov	r0, r5
 800abac:	f000 f93c 	bl	800ae28 <_fflush_r>
 800abb0:	bb30      	cbnz	r0, 800ac00 <__swbuf_r+0x90>
 800abb2:	68a3      	ldr	r3, [r4, #8]
 800abb4:	3b01      	subs	r3, #1
 800abb6:	60a3      	str	r3, [r4, #8]
 800abb8:	6823      	ldr	r3, [r4, #0]
 800abba:	1c5a      	adds	r2, r3, #1
 800abbc:	6022      	str	r2, [r4, #0]
 800abbe:	701e      	strb	r6, [r3, #0]
 800abc0:	6963      	ldr	r3, [r4, #20]
 800abc2:	3001      	adds	r0, #1
 800abc4:	4283      	cmp	r3, r0
 800abc6:	d004      	beq.n	800abd2 <__swbuf_r+0x62>
 800abc8:	89a3      	ldrh	r3, [r4, #12]
 800abca:	07db      	lsls	r3, r3, #31
 800abcc:	d506      	bpl.n	800abdc <__swbuf_r+0x6c>
 800abce:	2e0a      	cmp	r6, #10
 800abd0:	d104      	bne.n	800abdc <__swbuf_r+0x6c>
 800abd2:	4621      	mov	r1, r4
 800abd4:	4628      	mov	r0, r5
 800abd6:	f000 f927 	bl	800ae28 <_fflush_r>
 800abda:	b988      	cbnz	r0, 800ac00 <__swbuf_r+0x90>
 800abdc:	4638      	mov	r0, r7
 800abde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abe0:	4b0a      	ldr	r3, [pc, #40]	; (800ac0c <__swbuf_r+0x9c>)
 800abe2:	429c      	cmp	r4, r3
 800abe4:	d101      	bne.n	800abea <__swbuf_r+0x7a>
 800abe6:	68ac      	ldr	r4, [r5, #8]
 800abe8:	e7cf      	b.n	800ab8a <__swbuf_r+0x1a>
 800abea:	4b09      	ldr	r3, [pc, #36]	; (800ac10 <__swbuf_r+0xa0>)
 800abec:	429c      	cmp	r4, r3
 800abee:	bf08      	it	eq
 800abf0:	68ec      	ldreq	r4, [r5, #12]
 800abf2:	e7ca      	b.n	800ab8a <__swbuf_r+0x1a>
 800abf4:	4621      	mov	r1, r4
 800abf6:	4628      	mov	r0, r5
 800abf8:	f000 f81a 	bl	800ac30 <__swsetup_r>
 800abfc:	2800      	cmp	r0, #0
 800abfe:	d0cb      	beq.n	800ab98 <__swbuf_r+0x28>
 800ac00:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ac04:	e7ea      	b.n	800abdc <__swbuf_r+0x6c>
 800ac06:	bf00      	nop
 800ac08:	0800c024 	.word	0x0800c024
 800ac0c:	0800c044 	.word	0x0800c044
 800ac10:	0800c004 	.word	0x0800c004

0800ac14 <__ascii_wctomb>:
 800ac14:	b149      	cbz	r1, 800ac2a <__ascii_wctomb+0x16>
 800ac16:	2aff      	cmp	r2, #255	; 0xff
 800ac18:	bf85      	ittet	hi
 800ac1a:	238a      	movhi	r3, #138	; 0x8a
 800ac1c:	6003      	strhi	r3, [r0, #0]
 800ac1e:	700a      	strbls	r2, [r1, #0]
 800ac20:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ac24:	bf98      	it	ls
 800ac26:	2001      	movls	r0, #1
 800ac28:	4770      	bx	lr
 800ac2a:	4608      	mov	r0, r1
 800ac2c:	4770      	bx	lr
	...

0800ac30 <__swsetup_r>:
 800ac30:	4b32      	ldr	r3, [pc, #200]	; (800acfc <__swsetup_r+0xcc>)
 800ac32:	b570      	push	{r4, r5, r6, lr}
 800ac34:	681d      	ldr	r5, [r3, #0]
 800ac36:	4606      	mov	r6, r0
 800ac38:	460c      	mov	r4, r1
 800ac3a:	b125      	cbz	r5, 800ac46 <__swsetup_r+0x16>
 800ac3c:	69ab      	ldr	r3, [r5, #24]
 800ac3e:	b913      	cbnz	r3, 800ac46 <__swsetup_r+0x16>
 800ac40:	4628      	mov	r0, r5
 800ac42:	f000 f985 	bl	800af50 <__sinit>
 800ac46:	4b2e      	ldr	r3, [pc, #184]	; (800ad00 <__swsetup_r+0xd0>)
 800ac48:	429c      	cmp	r4, r3
 800ac4a:	d10f      	bne.n	800ac6c <__swsetup_r+0x3c>
 800ac4c:	686c      	ldr	r4, [r5, #4]
 800ac4e:	89a3      	ldrh	r3, [r4, #12]
 800ac50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac54:	0719      	lsls	r1, r3, #28
 800ac56:	d42c      	bmi.n	800acb2 <__swsetup_r+0x82>
 800ac58:	06dd      	lsls	r5, r3, #27
 800ac5a:	d411      	bmi.n	800ac80 <__swsetup_r+0x50>
 800ac5c:	2309      	movs	r3, #9
 800ac5e:	6033      	str	r3, [r6, #0]
 800ac60:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ac64:	81a3      	strh	r3, [r4, #12]
 800ac66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac6a:	e03e      	b.n	800acea <__swsetup_r+0xba>
 800ac6c:	4b25      	ldr	r3, [pc, #148]	; (800ad04 <__swsetup_r+0xd4>)
 800ac6e:	429c      	cmp	r4, r3
 800ac70:	d101      	bne.n	800ac76 <__swsetup_r+0x46>
 800ac72:	68ac      	ldr	r4, [r5, #8]
 800ac74:	e7eb      	b.n	800ac4e <__swsetup_r+0x1e>
 800ac76:	4b24      	ldr	r3, [pc, #144]	; (800ad08 <__swsetup_r+0xd8>)
 800ac78:	429c      	cmp	r4, r3
 800ac7a:	bf08      	it	eq
 800ac7c:	68ec      	ldreq	r4, [r5, #12]
 800ac7e:	e7e6      	b.n	800ac4e <__swsetup_r+0x1e>
 800ac80:	0758      	lsls	r0, r3, #29
 800ac82:	d512      	bpl.n	800acaa <__swsetup_r+0x7a>
 800ac84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac86:	b141      	cbz	r1, 800ac9a <__swsetup_r+0x6a>
 800ac88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac8c:	4299      	cmp	r1, r3
 800ac8e:	d002      	beq.n	800ac96 <__swsetup_r+0x66>
 800ac90:	4630      	mov	r0, r6
 800ac92:	f7ff fb6f 	bl	800a374 <_free_r>
 800ac96:	2300      	movs	r3, #0
 800ac98:	6363      	str	r3, [r4, #52]	; 0x34
 800ac9a:	89a3      	ldrh	r3, [r4, #12]
 800ac9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aca0:	81a3      	strh	r3, [r4, #12]
 800aca2:	2300      	movs	r3, #0
 800aca4:	6063      	str	r3, [r4, #4]
 800aca6:	6923      	ldr	r3, [r4, #16]
 800aca8:	6023      	str	r3, [r4, #0]
 800acaa:	89a3      	ldrh	r3, [r4, #12]
 800acac:	f043 0308 	orr.w	r3, r3, #8
 800acb0:	81a3      	strh	r3, [r4, #12]
 800acb2:	6923      	ldr	r3, [r4, #16]
 800acb4:	b94b      	cbnz	r3, 800acca <__swsetup_r+0x9a>
 800acb6:	89a3      	ldrh	r3, [r4, #12]
 800acb8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800acbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800acc0:	d003      	beq.n	800acca <__swsetup_r+0x9a>
 800acc2:	4621      	mov	r1, r4
 800acc4:	4630      	mov	r0, r6
 800acc6:	f000 fa07 	bl	800b0d8 <__smakebuf_r>
 800acca:	89a0      	ldrh	r0, [r4, #12]
 800accc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800acd0:	f010 0301 	ands.w	r3, r0, #1
 800acd4:	d00a      	beq.n	800acec <__swsetup_r+0xbc>
 800acd6:	2300      	movs	r3, #0
 800acd8:	60a3      	str	r3, [r4, #8]
 800acda:	6963      	ldr	r3, [r4, #20]
 800acdc:	425b      	negs	r3, r3
 800acde:	61a3      	str	r3, [r4, #24]
 800ace0:	6923      	ldr	r3, [r4, #16]
 800ace2:	b943      	cbnz	r3, 800acf6 <__swsetup_r+0xc6>
 800ace4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ace8:	d1ba      	bne.n	800ac60 <__swsetup_r+0x30>
 800acea:	bd70      	pop	{r4, r5, r6, pc}
 800acec:	0781      	lsls	r1, r0, #30
 800acee:	bf58      	it	pl
 800acf0:	6963      	ldrpl	r3, [r4, #20]
 800acf2:	60a3      	str	r3, [r4, #8]
 800acf4:	e7f4      	b.n	800ace0 <__swsetup_r+0xb0>
 800acf6:	2000      	movs	r0, #0
 800acf8:	e7f7      	b.n	800acea <__swsetup_r+0xba>
 800acfa:	bf00      	nop
 800acfc:	20000010 	.word	0x20000010
 800ad00:	0800c024 	.word	0x0800c024
 800ad04:	0800c044 	.word	0x0800c044
 800ad08:	0800c004 	.word	0x0800c004

0800ad0c <abort>:
 800ad0c:	b508      	push	{r3, lr}
 800ad0e:	2006      	movs	r0, #6
 800ad10:	f000 fa52 	bl	800b1b8 <raise>
 800ad14:	2001      	movs	r0, #1
 800ad16:	f7f7 faa5 	bl	8002264 <_exit>
	...

0800ad1c <__sflush_r>:
 800ad1c:	898a      	ldrh	r2, [r1, #12]
 800ad1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad22:	4605      	mov	r5, r0
 800ad24:	0710      	lsls	r0, r2, #28
 800ad26:	460c      	mov	r4, r1
 800ad28:	d458      	bmi.n	800addc <__sflush_r+0xc0>
 800ad2a:	684b      	ldr	r3, [r1, #4]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	dc05      	bgt.n	800ad3c <__sflush_r+0x20>
 800ad30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	dc02      	bgt.n	800ad3c <__sflush_r+0x20>
 800ad36:	2000      	movs	r0, #0
 800ad38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad3e:	2e00      	cmp	r6, #0
 800ad40:	d0f9      	beq.n	800ad36 <__sflush_r+0x1a>
 800ad42:	2300      	movs	r3, #0
 800ad44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ad48:	682f      	ldr	r7, [r5, #0]
 800ad4a:	602b      	str	r3, [r5, #0]
 800ad4c:	d032      	beq.n	800adb4 <__sflush_r+0x98>
 800ad4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad50:	89a3      	ldrh	r3, [r4, #12]
 800ad52:	075a      	lsls	r2, r3, #29
 800ad54:	d505      	bpl.n	800ad62 <__sflush_r+0x46>
 800ad56:	6863      	ldr	r3, [r4, #4]
 800ad58:	1ac0      	subs	r0, r0, r3
 800ad5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad5c:	b10b      	cbz	r3, 800ad62 <__sflush_r+0x46>
 800ad5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad60:	1ac0      	subs	r0, r0, r3
 800ad62:	2300      	movs	r3, #0
 800ad64:	4602      	mov	r2, r0
 800ad66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad68:	6a21      	ldr	r1, [r4, #32]
 800ad6a:	4628      	mov	r0, r5
 800ad6c:	47b0      	blx	r6
 800ad6e:	1c43      	adds	r3, r0, #1
 800ad70:	89a3      	ldrh	r3, [r4, #12]
 800ad72:	d106      	bne.n	800ad82 <__sflush_r+0x66>
 800ad74:	6829      	ldr	r1, [r5, #0]
 800ad76:	291d      	cmp	r1, #29
 800ad78:	d82c      	bhi.n	800add4 <__sflush_r+0xb8>
 800ad7a:	4a2a      	ldr	r2, [pc, #168]	; (800ae24 <__sflush_r+0x108>)
 800ad7c:	40ca      	lsrs	r2, r1
 800ad7e:	07d6      	lsls	r6, r2, #31
 800ad80:	d528      	bpl.n	800add4 <__sflush_r+0xb8>
 800ad82:	2200      	movs	r2, #0
 800ad84:	6062      	str	r2, [r4, #4]
 800ad86:	04d9      	lsls	r1, r3, #19
 800ad88:	6922      	ldr	r2, [r4, #16]
 800ad8a:	6022      	str	r2, [r4, #0]
 800ad8c:	d504      	bpl.n	800ad98 <__sflush_r+0x7c>
 800ad8e:	1c42      	adds	r2, r0, #1
 800ad90:	d101      	bne.n	800ad96 <__sflush_r+0x7a>
 800ad92:	682b      	ldr	r3, [r5, #0]
 800ad94:	b903      	cbnz	r3, 800ad98 <__sflush_r+0x7c>
 800ad96:	6560      	str	r0, [r4, #84]	; 0x54
 800ad98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad9a:	602f      	str	r7, [r5, #0]
 800ad9c:	2900      	cmp	r1, #0
 800ad9e:	d0ca      	beq.n	800ad36 <__sflush_r+0x1a>
 800ada0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ada4:	4299      	cmp	r1, r3
 800ada6:	d002      	beq.n	800adae <__sflush_r+0x92>
 800ada8:	4628      	mov	r0, r5
 800adaa:	f7ff fae3 	bl	800a374 <_free_r>
 800adae:	2000      	movs	r0, #0
 800adb0:	6360      	str	r0, [r4, #52]	; 0x34
 800adb2:	e7c1      	b.n	800ad38 <__sflush_r+0x1c>
 800adb4:	6a21      	ldr	r1, [r4, #32]
 800adb6:	2301      	movs	r3, #1
 800adb8:	4628      	mov	r0, r5
 800adba:	47b0      	blx	r6
 800adbc:	1c41      	adds	r1, r0, #1
 800adbe:	d1c7      	bne.n	800ad50 <__sflush_r+0x34>
 800adc0:	682b      	ldr	r3, [r5, #0]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d0c4      	beq.n	800ad50 <__sflush_r+0x34>
 800adc6:	2b1d      	cmp	r3, #29
 800adc8:	d001      	beq.n	800adce <__sflush_r+0xb2>
 800adca:	2b16      	cmp	r3, #22
 800adcc:	d101      	bne.n	800add2 <__sflush_r+0xb6>
 800adce:	602f      	str	r7, [r5, #0]
 800add0:	e7b1      	b.n	800ad36 <__sflush_r+0x1a>
 800add2:	89a3      	ldrh	r3, [r4, #12]
 800add4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800add8:	81a3      	strh	r3, [r4, #12]
 800adda:	e7ad      	b.n	800ad38 <__sflush_r+0x1c>
 800addc:	690f      	ldr	r7, [r1, #16]
 800adde:	2f00      	cmp	r7, #0
 800ade0:	d0a9      	beq.n	800ad36 <__sflush_r+0x1a>
 800ade2:	0793      	lsls	r3, r2, #30
 800ade4:	680e      	ldr	r6, [r1, #0]
 800ade6:	bf08      	it	eq
 800ade8:	694b      	ldreq	r3, [r1, #20]
 800adea:	600f      	str	r7, [r1, #0]
 800adec:	bf18      	it	ne
 800adee:	2300      	movne	r3, #0
 800adf0:	eba6 0807 	sub.w	r8, r6, r7
 800adf4:	608b      	str	r3, [r1, #8]
 800adf6:	f1b8 0f00 	cmp.w	r8, #0
 800adfa:	dd9c      	ble.n	800ad36 <__sflush_r+0x1a>
 800adfc:	6a21      	ldr	r1, [r4, #32]
 800adfe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae00:	4643      	mov	r3, r8
 800ae02:	463a      	mov	r2, r7
 800ae04:	4628      	mov	r0, r5
 800ae06:	47b0      	blx	r6
 800ae08:	2800      	cmp	r0, #0
 800ae0a:	dc06      	bgt.n	800ae1a <__sflush_r+0xfe>
 800ae0c:	89a3      	ldrh	r3, [r4, #12]
 800ae0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae12:	81a3      	strh	r3, [r4, #12]
 800ae14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae18:	e78e      	b.n	800ad38 <__sflush_r+0x1c>
 800ae1a:	4407      	add	r7, r0
 800ae1c:	eba8 0800 	sub.w	r8, r8, r0
 800ae20:	e7e9      	b.n	800adf6 <__sflush_r+0xda>
 800ae22:	bf00      	nop
 800ae24:	20400001 	.word	0x20400001

0800ae28 <_fflush_r>:
 800ae28:	b538      	push	{r3, r4, r5, lr}
 800ae2a:	690b      	ldr	r3, [r1, #16]
 800ae2c:	4605      	mov	r5, r0
 800ae2e:	460c      	mov	r4, r1
 800ae30:	b913      	cbnz	r3, 800ae38 <_fflush_r+0x10>
 800ae32:	2500      	movs	r5, #0
 800ae34:	4628      	mov	r0, r5
 800ae36:	bd38      	pop	{r3, r4, r5, pc}
 800ae38:	b118      	cbz	r0, 800ae42 <_fflush_r+0x1a>
 800ae3a:	6983      	ldr	r3, [r0, #24]
 800ae3c:	b90b      	cbnz	r3, 800ae42 <_fflush_r+0x1a>
 800ae3e:	f000 f887 	bl	800af50 <__sinit>
 800ae42:	4b14      	ldr	r3, [pc, #80]	; (800ae94 <_fflush_r+0x6c>)
 800ae44:	429c      	cmp	r4, r3
 800ae46:	d11b      	bne.n	800ae80 <_fflush_r+0x58>
 800ae48:	686c      	ldr	r4, [r5, #4]
 800ae4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d0ef      	beq.n	800ae32 <_fflush_r+0xa>
 800ae52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae54:	07d0      	lsls	r0, r2, #31
 800ae56:	d404      	bmi.n	800ae62 <_fflush_r+0x3a>
 800ae58:	0599      	lsls	r1, r3, #22
 800ae5a:	d402      	bmi.n	800ae62 <_fflush_r+0x3a>
 800ae5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae5e:	f000 f915 	bl	800b08c <__retarget_lock_acquire_recursive>
 800ae62:	4628      	mov	r0, r5
 800ae64:	4621      	mov	r1, r4
 800ae66:	f7ff ff59 	bl	800ad1c <__sflush_r>
 800ae6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae6c:	07da      	lsls	r2, r3, #31
 800ae6e:	4605      	mov	r5, r0
 800ae70:	d4e0      	bmi.n	800ae34 <_fflush_r+0xc>
 800ae72:	89a3      	ldrh	r3, [r4, #12]
 800ae74:	059b      	lsls	r3, r3, #22
 800ae76:	d4dd      	bmi.n	800ae34 <_fflush_r+0xc>
 800ae78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae7a:	f000 f908 	bl	800b08e <__retarget_lock_release_recursive>
 800ae7e:	e7d9      	b.n	800ae34 <_fflush_r+0xc>
 800ae80:	4b05      	ldr	r3, [pc, #20]	; (800ae98 <_fflush_r+0x70>)
 800ae82:	429c      	cmp	r4, r3
 800ae84:	d101      	bne.n	800ae8a <_fflush_r+0x62>
 800ae86:	68ac      	ldr	r4, [r5, #8]
 800ae88:	e7df      	b.n	800ae4a <_fflush_r+0x22>
 800ae8a:	4b04      	ldr	r3, [pc, #16]	; (800ae9c <_fflush_r+0x74>)
 800ae8c:	429c      	cmp	r4, r3
 800ae8e:	bf08      	it	eq
 800ae90:	68ec      	ldreq	r4, [r5, #12]
 800ae92:	e7da      	b.n	800ae4a <_fflush_r+0x22>
 800ae94:	0800c024 	.word	0x0800c024
 800ae98:	0800c044 	.word	0x0800c044
 800ae9c:	0800c004 	.word	0x0800c004

0800aea0 <std>:
 800aea0:	2300      	movs	r3, #0
 800aea2:	b510      	push	{r4, lr}
 800aea4:	4604      	mov	r4, r0
 800aea6:	e9c0 3300 	strd	r3, r3, [r0]
 800aeaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aeae:	6083      	str	r3, [r0, #8]
 800aeb0:	8181      	strh	r1, [r0, #12]
 800aeb2:	6643      	str	r3, [r0, #100]	; 0x64
 800aeb4:	81c2      	strh	r2, [r0, #14]
 800aeb6:	6183      	str	r3, [r0, #24]
 800aeb8:	4619      	mov	r1, r3
 800aeba:	2208      	movs	r2, #8
 800aebc:	305c      	adds	r0, #92	; 0x5c
 800aebe:	f7fd fbb5 	bl	800862c <memset>
 800aec2:	4b05      	ldr	r3, [pc, #20]	; (800aed8 <std+0x38>)
 800aec4:	6263      	str	r3, [r4, #36]	; 0x24
 800aec6:	4b05      	ldr	r3, [pc, #20]	; (800aedc <std+0x3c>)
 800aec8:	62a3      	str	r3, [r4, #40]	; 0x28
 800aeca:	4b05      	ldr	r3, [pc, #20]	; (800aee0 <std+0x40>)
 800aecc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aece:	4b05      	ldr	r3, [pc, #20]	; (800aee4 <std+0x44>)
 800aed0:	6224      	str	r4, [r4, #32]
 800aed2:	6323      	str	r3, [r4, #48]	; 0x30
 800aed4:	bd10      	pop	{r4, pc}
 800aed6:	bf00      	nop
 800aed8:	0800b1f1 	.word	0x0800b1f1
 800aedc:	0800b213 	.word	0x0800b213
 800aee0:	0800b24b 	.word	0x0800b24b
 800aee4:	0800b26f 	.word	0x0800b26f

0800aee8 <_cleanup_r>:
 800aee8:	4901      	ldr	r1, [pc, #4]	; (800aef0 <_cleanup_r+0x8>)
 800aeea:	f000 b8af 	b.w	800b04c <_fwalk_reent>
 800aeee:	bf00      	nop
 800aef0:	0800ae29 	.word	0x0800ae29

0800aef4 <__sfmoreglue>:
 800aef4:	b570      	push	{r4, r5, r6, lr}
 800aef6:	1e4a      	subs	r2, r1, #1
 800aef8:	2568      	movs	r5, #104	; 0x68
 800aefa:	4355      	muls	r5, r2
 800aefc:	460e      	mov	r6, r1
 800aefe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800af02:	f7ff fa87 	bl	800a414 <_malloc_r>
 800af06:	4604      	mov	r4, r0
 800af08:	b140      	cbz	r0, 800af1c <__sfmoreglue+0x28>
 800af0a:	2100      	movs	r1, #0
 800af0c:	e9c0 1600 	strd	r1, r6, [r0]
 800af10:	300c      	adds	r0, #12
 800af12:	60a0      	str	r0, [r4, #8]
 800af14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800af18:	f7fd fb88 	bl	800862c <memset>
 800af1c:	4620      	mov	r0, r4
 800af1e:	bd70      	pop	{r4, r5, r6, pc}

0800af20 <__sfp_lock_acquire>:
 800af20:	4801      	ldr	r0, [pc, #4]	; (800af28 <__sfp_lock_acquire+0x8>)
 800af22:	f000 b8b3 	b.w	800b08c <__retarget_lock_acquire_recursive>
 800af26:	bf00      	nop
 800af28:	20004d48 	.word	0x20004d48

0800af2c <__sfp_lock_release>:
 800af2c:	4801      	ldr	r0, [pc, #4]	; (800af34 <__sfp_lock_release+0x8>)
 800af2e:	f000 b8ae 	b.w	800b08e <__retarget_lock_release_recursive>
 800af32:	bf00      	nop
 800af34:	20004d48 	.word	0x20004d48

0800af38 <__sinit_lock_acquire>:
 800af38:	4801      	ldr	r0, [pc, #4]	; (800af40 <__sinit_lock_acquire+0x8>)
 800af3a:	f000 b8a7 	b.w	800b08c <__retarget_lock_acquire_recursive>
 800af3e:	bf00      	nop
 800af40:	20004d43 	.word	0x20004d43

0800af44 <__sinit_lock_release>:
 800af44:	4801      	ldr	r0, [pc, #4]	; (800af4c <__sinit_lock_release+0x8>)
 800af46:	f000 b8a2 	b.w	800b08e <__retarget_lock_release_recursive>
 800af4a:	bf00      	nop
 800af4c:	20004d43 	.word	0x20004d43

0800af50 <__sinit>:
 800af50:	b510      	push	{r4, lr}
 800af52:	4604      	mov	r4, r0
 800af54:	f7ff fff0 	bl	800af38 <__sinit_lock_acquire>
 800af58:	69a3      	ldr	r3, [r4, #24]
 800af5a:	b11b      	cbz	r3, 800af64 <__sinit+0x14>
 800af5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af60:	f7ff bff0 	b.w	800af44 <__sinit_lock_release>
 800af64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800af68:	6523      	str	r3, [r4, #80]	; 0x50
 800af6a:	4b13      	ldr	r3, [pc, #76]	; (800afb8 <__sinit+0x68>)
 800af6c:	4a13      	ldr	r2, [pc, #76]	; (800afbc <__sinit+0x6c>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	62a2      	str	r2, [r4, #40]	; 0x28
 800af72:	42a3      	cmp	r3, r4
 800af74:	bf04      	itt	eq
 800af76:	2301      	moveq	r3, #1
 800af78:	61a3      	streq	r3, [r4, #24]
 800af7a:	4620      	mov	r0, r4
 800af7c:	f000 f820 	bl	800afc0 <__sfp>
 800af80:	6060      	str	r0, [r4, #4]
 800af82:	4620      	mov	r0, r4
 800af84:	f000 f81c 	bl	800afc0 <__sfp>
 800af88:	60a0      	str	r0, [r4, #8]
 800af8a:	4620      	mov	r0, r4
 800af8c:	f000 f818 	bl	800afc0 <__sfp>
 800af90:	2200      	movs	r2, #0
 800af92:	60e0      	str	r0, [r4, #12]
 800af94:	2104      	movs	r1, #4
 800af96:	6860      	ldr	r0, [r4, #4]
 800af98:	f7ff ff82 	bl	800aea0 <std>
 800af9c:	68a0      	ldr	r0, [r4, #8]
 800af9e:	2201      	movs	r2, #1
 800afa0:	2109      	movs	r1, #9
 800afa2:	f7ff ff7d 	bl	800aea0 <std>
 800afa6:	68e0      	ldr	r0, [r4, #12]
 800afa8:	2202      	movs	r2, #2
 800afaa:	2112      	movs	r1, #18
 800afac:	f7ff ff78 	bl	800aea0 <std>
 800afb0:	2301      	movs	r3, #1
 800afb2:	61a3      	str	r3, [r4, #24]
 800afb4:	e7d2      	b.n	800af5c <__sinit+0xc>
 800afb6:	bf00      	nop
 800afb8:	0800bc84 	.word	0x0800bc84
 800afbc:	0800aee9 	.word	0x0800aee9

0800afc0 <__sfp>:
 800afc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afc2:	4607      	mov	r7, r0
 800afc4:	f7ff ffac 	bl	800af20 <__sfp_lock_acquire>
 800afc8:	4b1e      	ldr	r3, [pc, #120]	; (800b044 <__sfp+0x84>)
 800afca:	681e      	ldr	r6, [r3, #0]
 800afcc:	69b3      	ldr	r3, [r6, #24]
 800afce:	b913      	cbnz	r3, 800afd6 <__sfp+0x16>
 800afd0:	4630      	mov	r0, r6
 800afd2:	f7ff ffbd 	bl	800af50 <__sinit>
 800afd6:	3648      	adds	r6, #72	; 0x48
 800afd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800afdc:	3b01      	subs	r3, #1
 800afde:	d503      	bpl.n	800afe8 <__sfp+0x28>
 800afe0:	6833      	ldr	r3, [r6, #0]
 800afe2:	b30b      	cbz	r3, 800b028 <__sfp+0x68>
 800afe4:	6836      	ldr	r6, [r6, #0]
 800afe6:	e7f7      	b.n	800afd8 <__sfp+0x18>
 800afe8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800afec:	b9d5      	cbnz	r5, 800b024 <__sfp+0x64>
 800afee:	4b16      	ldr	r3, [pc, #88]	; (800b048 <__sfp+0x88>)
 800aff0:	60e3      	str	r3, [r4, #12]
 800aff2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aff6:	6665      	str	r5, [r4, #100]	; 0x64
 800aff8:	f000 f847 	bl	800b08a <__retarget_lock_init_recursive>
 800affc:	f7ff ff96 	bl	800af2c <__sfp_lock_release>
 800b000:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b004:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b008:	6025      	str	r5, [r4, #0]
 800b00a:	61a5      	str	r5, [r4, #24]
 800b00c:	2208      	movs	r2, #8
 800b00e:	4629      	mov	r1, r5
 800b010:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b014:	f7fd fb0a 	bl	800862c <memset>
 800b018:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b01c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b020:	4620      	mov	r0, r4
 800b022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b024:	3468      	adds	r4, #104	; 0x68
 800b026:	e7d9      	b.n	800afdc <__sfp+0x1c>
 800b028:	2104      	movs	r1, #4
 800b02a:	4638      	mov	r0, r7
 800b02c:	f7ff ff62 	bl	800aef4 <__sfmoreglue>
 800b030:	4604      	mov	r4, r0
 800b032:	6030      	str	r0, [r6, #0]
 800b034:	2800      	cmp	r0, #0
 800b036:	d1d5      	bne.n	800afe4 <__sfp+0x24>
 800b038:	f7ff ff78 	bl	800af2c <__sfp_lock_release>
 800b03c:	230c      	movs	r3, #12
 800b03e:	603b      	str	r3, [r7, #0]
 800b040:	e7ee      	b.n	800b020 <__sfp+0x60>
 800b042:	bf00      	nop
 800b044:	0800bc84 	.word	0x0800bc84
 800b048:	ffff0001 	.word	0xffff0001

0800b04c <_fwalk_reent>:
 800b04c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b050:	4606      	mov	r6, r0
 800b052:	4688      	mov	r8, r1
 800b054:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b058:	2700      	movs	r7, #0
 800b05a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b05e:	f1b9 0901 	subs.w	r9, r9, #1
 800b062:	d505      	bpl.n	800b070 <_fwalk_reent+0x24>
 800b064:	6824      	ldr	r4, [r4, #0]
 800b066:	2c00      	cmp	r4, #0
 800b068:	d1f7      	bne.n	800b05a <_fwalk_reent+0xe>
 800b06a:	4638      	mov	r0, r7
 800b06c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b070:	89ab      	ldrh	r3, [r5, #12]
 800b072:	2b01      	cmp	r3, #1
 800b074:	d907      	bls.n	800b086 <_fwalk_reent+0x3a>
 800b076:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b07a:	3301      	adds	r3, #1
 800b07c:	d003      	beq.n	800b086 <_fwalk_reent+0x3a>
 800b07e:	4629      	mov	r1, r5
 800b080:	4630      	mov	r0, r6
 800b082:	47c0      	blx	r8
 800b084:	4307      	orrs	r7, r0
 800b086:	3568      	adds	r5, #104	; 0x68
 800b088:	e7e9      	b.n	800b05e <_fwalk_reent+0x12>

0800b08a <__retarget_lock_init_recursive>:
 800b08a:	4770      	bx	lr

0800b08c <__retarget_lock_acquire_recursive>:
 800b08c:	4770      	bx	lr

0800b08e <__retarget_lock_release_recursive>:
 800b08e:	4770      	bx	lr

0800b090 <__swhatbuf_r>:
 800b090:	b570      	push	{r4, r5, r6, lr}
 800b092:	460e      	mov	r6, r1
 800b094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b098:	2900      	cmp	r1, #0
 800b09a:	b096      	sub	sp, #88	; 0x58
 800b09c:	4614      	mov	r4, r2
 800b09e:	461d      	mov	r5, r3
 800b0a0:	da07      	bge.n	800b0b2 <__swhatbuf_r+0x22>
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	602b      	str	r3, [r5, #0]
 800b0a6:	89b3      	ldrh	r3, [r6, #12]
 800b0a8:	061a      	lsls	r2, r3, #24
 800b0aa:	d410      	bmi.n	800b0ce <__swhatbuf_r+0x3e>
 800b0ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0b0:	e00e      	b.n	800b0d0 <__swhatbuf_r+0x40>
 800b0b2:	466a      	mov	r2, sp
 800b0b4:	f000 f902 	bl	800b2bc <_fstat_r>
 800b0b8:	2800      	cmp	r0, #0
 800b0ba:	dbf2      	blt.n	800b0a2 <__swhatbuf_r+0x12>
 800b0bc:	9a01      	ldr	r2, [sp, #4]
 800b0be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b0c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b0c6:	425a      	negs	r2, r3
 800b0c8:	415a      	adcs	r2, r3
 800b0ca:	602a      	str	r2, [r5, #0]
 800b0cc:	e7ee      	b.n	800b0ac <__swhatbuf_r+0x1c>
 800b0ce:	2340      	movs	r3, #64	; 0x40
 800b0d0:	2000      	movs	r0, #0
 800b0d2:	6023      	str	r3, [r4, #0]
 800b0d4:	b016      	add	sp, #88	; 0x58
 800b0d6:	bd70      	pop	{r4, r5, r6, pc}

0800b0d8 <__smakebuf_r>:
 800b0d8:	898b      	ldrh	r3, [r1, #12]
 800b0da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b0dc:	079d      	lsls	r5, r3, #30
 800b0de:	4606      	mov	r6, r0
 800b0e0:	460c      	mov	r4, r1
 800b0e2:	d507      	bpl.n	800b0f4 <__smakebuf_r+0x1c>
 800b0e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b0e8:	6023      	str	r3, [r4, #0]
 800b0ea:	6123      	str	r3, [r4, #16]
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	6163      	str	r3, [r4, #20]
 800b0f0:	b002      	add	sp, #8
 800b0f2:	bd70      	pop	{r4, r5, r6, pc}
 800b0f4:	ab01      	add	r3, sp, #4
 800b0f6:	466a      	mov	r2, sp
 800b0f8:	f7ff ffca 	bl	800b090 <__swhatbuf_r>
 800b0fc:	9900      	ldr	r1, [sp, #0]
 800b0fe:	4605      	mov	r5, r0
 800b100:	4630      	mov	r0, r6
 800b102:	f7ff f987 	bl	800a414 <_malloc_r>
 800b106:	b948      	cbnz	r0, 800b11c <__smakebuf_r+0x44>
 800b108:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b10c:	059a      	lsls	r2, r3, #22
 800b10e:	d4ef      	bmi.n	800b0f0 <__smakebuf_r+0x18>
 800b110:	f023 0303 	bic.w	r3, r3, #3
 800b114:	f043 0302 	orr.w	r3, r3, #2
 800b118:	81a3      	strh	r3, [r4, #12]
 800b11a:	e7e3      	b.n	800b0e4 <__smakebuf_r+0xc>
 800b11c:	4b0d      	ldr	r3, [pc, #52]	; (800b154 <__smakebuf_r+0x7c>)
 800b11e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b120:	89a3      	ldrh	r3, [r4, #12]
 800b122:	6020      	str	r0, [r4, #0]
 800b124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b128:	81a3      	strh	r3, [r4, #12]
 800b12a:	9b00      	ldr	r3, [sp, #0]
 800b12c:	6163      	str	r3, [r4, #20]
 800b12e:	9b01      	ldr	r3, [sp, #4]
 800b130:	6120      	str	r0, [r4, #16]
 800b132:	b15b      	cbz	r3, 800b14c <__smakebuf_r+0x74>
 800b134:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b138:	4630      	mov	r0, r6
 800b13a:	f000 f8d1 	bl	800b2e0 <_isatty_r>
 800b13e:	b128      	cbz	r0, 800b14c <__smakebuf_r+0x74>
 800b140:	89a3      	ldrh	r3, [r4, #12]
 800b142:	f023 0303 	bic.w	r3, r3, #3
 800b146:	f043 0301 	orr.w	r3, r3, #1
 800b14a:	81a3      	strh	r3, [r4, #12]
 800b14c:	89a0      	ldrh	r0, [r4, #12]
 800b14e:	4305      	orrs	r5, r0
 800b150:	81a5      	strh	r5, [r4, #12]
 800b152:	e7cd      	b.n	800b0f0 <__smakebuf_r+0x18>
 800b154:	0800aee9 	.word	0x0800aee9

0800b158 <_malloc_usable_size_r>:
 800b158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b15c:	1f18      	subs	r0, r3, #4
 800b15e:	2b00      	cmp	r3, #0
 800b160:	bfbc      	itt	lt
 800b162:	580b      	ldrlt	r3, [r1, r0]
 800b164:	18c0      	addlt	r0, r0, r3
 800b166:	4770      	bx	lr

0800b168 <_raise_r>:
 800b168:	291f      	cmp	r1, #31
 800b16a:	b538      	push	{r3, r4, r5, lr}
 800b16c:	4604      	mov	r4, r0
 800b16e:	460d      	mov	r5, r1
 800b170:	d904      	bls.n	800b17c <_raise_r+0x14>
 800b172:	2316      	movs	r3, #22
 800b174:	6003      	str	r3, [r0, #0]
 800b176:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b17a:	bd38      	pop	{r3, r4, r5, pc}
 800b17c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b17e:	b112      	cbz	r2, 800b186 <_raise_r+0x1e>
 800b180:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b184:	b94b      	cbnz	r3, 800b19a <_raise_r+0x32>
 800b186:	4620      	mov	r0, r4
 800b188:	f000 f830 	bl	800b1ec <_getpid_r>
 800b18c:	462a      	mov	r2, r5
 800b18e:	4601      	mov	r1, r0
 800b190:	4620      	mov	r0, r4
 800b192:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b196:	f000 b817 	b.w	800b1c8 <_kill_r>
 800b19a:	2b01      	cmp	r3, #1
 800b19c:	d00a      	beq.n	800b1b4 <_raise_r+0x4c>
 800b19e:	1c59      	adds	r1, r3, #1
 800b1a0:	d103      	bne.n	800b1aa <_raise_r+0x42>
 800b1a2:	2316      	movs	r3, #22
 800b1a4:	6003      	str	r3, [r0, #0]
 800b1a6:	2001      	movs	r0, #1
 800b1a8:	e7e7      	b.n	800b17a <_raise_r+0x12>
 800b1aa:	2400      	movs	r4, #0
 800b1ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b1b0:	4628      	mov	r0, r5
 800b1b2:	4798      	blx	r3
 800b1b4:	2000      	movs	r0, #0
 800b1b6:	e7e0      	b.n	800b17a <_raise_r+0x12>

0800b1b8 <raise>:
 800b1b8:	4b02      	ldr	r3, [pc, #8]	; (800b1c4 <raise+0xc>)
 800b1ba:	4601      	mov	r1, r0
 800b1bc:	6818      	ldr	r0, [r3, #0]
 800b1be:	f7ff bfd3 	b.w	800b168 <_raise_r>
 800b1c2:	bf00      	nop
 800b1c4:	20000010 	.word	0x20000010

0800b1c8 <_kill_r>:
 800b1c8:	b538      	push	{r3, r4, r5, lr}
 800b1ca:	4d07      	ldr	r5, [pc, #28]	; (800b1e8 <_kill_r+0x20>)
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	4604      	mov	r4, r0
 800b1d0:	4608      	mov	r0, r1
 800b1d2:	4611      	mov	r1, r2
 800b1d4:	602b      	str	r3, [r5, #0]
 800b1d6:	f7f7 f835 	bl	8002244 <_kill>
 800b1da:	1c43      	adds	r3, r0, #1
 800b1dc:	d102      	bne.n	800b1e4 <_kill_r+0x1c>
 800b1de:	682b      	ldr	r3, [r5, #0]
 800b1e0:	b103      	cbz	r3, 800b1e4 <_kill_r+0x1c>
 800b1e2:	6023      	str	r3, [r4, #0]
 800b1e4:	bd38      	pop	{r3, r4, r5, pc}
 800b1e6:	bf00      	nop
 800b1e8:	20004d3c 	.word	0x20004d3c

0800b1ec <_getpid_r>:
 800b1ec:	f7f7 b822 	b.w	8002234 <_getpid>

0800b1f0 <__sread>:
 800b1f0:	b510      	push	{r4, lr}
 800b1f2:	460c      	mov	r4, r1
 800b1f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1f8:	f000 f894 	bl	800b324 <_read_r>
 800b1fc:	2800      	cmp	r0, #0
 800b1fe:	bfab      	itete	ge
 800b200:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b202:	89a3      	ldrhlt	r3, [r4, #12]
 800b204:	181b      	addge	r3, r3, r0
 800b206:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b20a:	bfac      	ite	ge
 800b20c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b20e:	81a3      	strhlt	r3, [r4, #12]
 800b210:	bd10      	pop	{r4, pc}

0800b212 <__swrite>:
 800b212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b216:	461f      	mov	r7, r3
 800b218:	898b      	ldrh	r3, [r1, #12]
 800b21a:	05db      	lsls	r3, r3, #23
 800b21c:	4605      	mov	r5, r0
 800b21e:	460c      	mov	r4, r1
 800b220:	4616      	mov	r6, r2
 800b222:	d505      	bpl.n	800b230 <__swrite+0x1e>
 800b224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b228:	2302      	movs	r3, #2
 800b22a:	2200      	movs	r2, #0
 800b22c:	f000 f868 	bl	800b300 <_lseek_r>
 800b230:	89a3      	ldrh	r3, [r4, #12]
 800b232:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b236:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b23a:	81a3      	strh	r3, [r4, #12]
 800b23c:	4632      	mov	r2, r6
 800b23e:	463b      	mov	r3, r7
 800b240:	4628      	mov	r0, r5
 800b242:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b246:	f000 b817 	b.w	800b278 <_write_r>

0800b24a <__sseek>:
 800b24a:	b510      	push	{r4, lr}
 800b24c:	460c      	mov	r4, r1
 800b24e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b252:	f000 f855 	bl	800b300 <_lseek_r>
 800b256:	1c43      	adds	r3, r0, #1
 800b258:	89a3      	ldrh	r3, [r4, #12]
 800b25a:	bf15      	itete	ne
 800b25c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b25e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b262:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b266:	81a3      	strheq	r3, [r4, #12]
 800b268:	bf18      	it	ne
 800b26a:	81a3      	strhne	r3, [r4, #12]
 800b26c:	bd10      	pop	{r4, pc}

0800b26e <__sclose>:
 800b26e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b272:	f000 b813 	b.w	800b29c <_close_r>
	...

0800b278 <_write_r>:
 800b278:	b538      	push	{r3, r4, r5, lr}
 800b27a:	4d07      	ldr	r5, [pc, #28]	; (800b298 <_write_r+0x20>)
 800b27c:	4604      	mov	r4, r0
 800b27e:	4608      	mov	r0, r1
 800b280:	4611      	mov	r1, r2
 800b282:	2200      	movs	r2, #0
 800b284:	602a      	str	r2, [r5, #0]
 800b286:	461a      	mov	r2, r3
 800b288:	f7f7 f813 	bl	80022b2 <_write>
 800b28c:	1c43      	adds	r3, r0, #1
 800b28e:	d102      	bne.n	800b296 <_write_r+0x1e>
 800b290:	682b      	ldr	r3, [r5, #0]
 800b292:	b103      	cbz	r3, 800b296 <_write_r+0x1e>
 800b294:	6023      	str	r3, [r4, #0]
 800b296:	bd38      	pop	{r3, r4, r5, pc}
 800b298:	20004d3c 	.word	0x20004d3c

0800b29c <_close_r>:
 800b29c:	b538      	push	{r3, r4, r5, lr}
 800b29e:	4d06      	ldr	r5, [pc, #24]	; (800b2b8 <_close_r+0x1c>)
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	4604      	mov	r4, r0
 800b2a4:	4608      	mov	r0, r1
 800b2a6:	602b      	str	r3, [r5, #0]
 800b2a8:	f7f7 f81f 	bl	80022ea <_close>
 800b2ac:	1c43      	adds	r3, r0, #1
 800b2ae:	d102      	bne.n	800b2b6 <_close_r+0x1a>
 800b2b0:	682b      	ldr	r3, [r5, #0]
 800b2b2:	b103      	cbz	r3, 800b2b6 <_close_r+0x1a>
 800b2b4:	6023      	str	r3, [r4, #0]
 800b2b6:	bd38      	pop	{r3, r4, r5, pc}
 800b2b8:	20004d3c 	.word	0x20004d3c

0800b2bc <_fstat_r>:
 800b2bc:	b538      	push	{r3, r4, r5, lr}
 800b2be:	4d07      	ldr	r5, [pc, #28]	; (800b2dc <_fstat_r+0x20>)
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	4604      	mov	r4, r0
 800b2c4:	4608      	mov	r0, r1
 800b2c6:	4611      	mov	r1, r2
 800b2c8:	602b      	str	r3, [r5, #0]
 800b2ca:	f7f7 f81a 	bl	8002302 <_fstat>
 800b2ce:	1c43      	adds	r3, r0, #1
 800b2d0:	d102      	bne.n	800b2d8 <_fstat_r+0x1c>
 800b2d2:	682b      	ldr	r3, [r5, #0]
 800b2d4:	b103      	cbz	r3, 800b2d8 <_fstat_r+0x1c>
 800b2d6:	6023      	str	r3, [r4, #0]
 800b2d8:	bd38      	pop	{r3, r4, r5, pc}
 800b2da:	bf00      	nop
 800b2dc:	20004d3c 	.word	0x20004d3c

0800b2e0 <_isatty_r>:
 800b2e0:	b538      	push	{r3, r4, r5, lr}
 800b2e2:	4d06      	ldr	r5, [pc, #24]	; (800b2fc <_isatty_r+0x1c>)
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	4604      	mov	r4, r0
 800b2e8:	4608      	mov	r0, r1
 800b2ea:	602b      	str	r3, [r5, #0]
 800b2ec:	f7f7 f819 	bl	8002322 <_isatty>
 800b2f0:	1c43      	adds	r3, r0, #1
 800b2f2:	d102      	bne.n	800b2fa <_isatty_r+0x1a>
 800b2f4:	682b      	ldr	r3, [r5, #0]
 800b2f6:	b103      	cbz	r3, 800b2fa <_isatty_r+0x1a>
 800b2f8:	6023      	str	r3, [r4, #0]
 800b2fa:	bd38      	pop	{r3, r4, r5, pc}
 800b2fc:	20004d3c 	.word	0x20004d3c

0800b300 <_lseek_r>:
 800b300:	b538      	push	{r3, r4, r5, lr}
 800b302:	4d07      	ldr	r5, [pc, #28]	; (800b320 <_lseek_r+0x20>)
 800b304:	4604      	mov	r4, r0
 800b306:	4608      	mov	r0, r1
 800b308:	4611      	mov	r1, r2
 800b30a:	2200      	movs	r2, #0
 800b30c:	602a      	str	r2, [r5, #0]
 800b30e:	461a      	mov	r2, r3
 800b310:	f7f7 f812 	bl	8002338 <_lseek>
 800b314:	1c43      	adds	r3, r0, #1
 800b316:	d102      	bne.n	800b31e <_lseek_r+0x1e>
 800b318:	682b      	ldr	r3, [r5, #0]
 800b31a:	b103      	cbz	r3, 800b31e <_lseek_r+0x1e>
 800b31c:	6023      	str	r3, [r4, #0]
 800b31e:	bd38      	pop	{r3, r4, r5, pc}
 800b320:	20004d3c 	.word	0x20004d3c

0800b324 <_read_r>:
 800b324:	b538      	push	{r3, r4, r5, lr}
 800b326:	4d07      	ldr	r5, [pc, #28]	; (800b344 <_read_r+0x20>)
 800b328:	4604      	mov	r4, r0
 800b32a:	4608      	mov	r0, r1
 800b32c:	4611      	mov	r1, r2
 800b32e:	2200      	movs	r2, #0
 800b330:	602a      	str	r2, [r5, #0]
 800b332:	461a      	mov	r2, r3
 800b334:	f7f6 ffa0 	bl	8002278 <_read>
 800b338:	1c43      	adds	r3, r0, #1
 800b33a:	d102      	bne.n	800b342 <_read_r+0x1e>
 800b33c:	682b      	ldr	r3, [r5, #0]
 800b33e:	b103      	cbz	r3, 800b342 <_read_r+0x1e>
 800b340:	6023      	str	r3, [r4, #0]
 800b342:	bd38      	pop	{r3, r4, r5, pc}
 800b344:	20004d3c 	.word	0x20004d3c

0800b348 <asin>:
 800b348:	b538      	push	{r3, r4, r5, lr}
 800b34a:	ed2d 8b02 	vpush	{d8}
 800b34e:	ec55 4b10 	vmov	r4, r5, d0
 800b352:	f000 f835 	bl	800b3c0 <__ieee754_asin>
 800b356:	4b16      	ldr	r3, [pc, #88]	; (800b3b0 <asin+0x68>)
 800b358:	eeb0 8a40 	vmov.f32	s16, s0
 800b35c:	eef0 8a60 	vmov.f32	s17, s1
 800b360:	f993 3000 	ldrsb.w	r3, [r3]
 800b364:	3301      	adds	r3, #1
 800b366:	d01c      	beq.n	800b3a2 <asin+0x5a>
 800b368:	4622      	mov	r2, r4
 800b36a:	462b      	mov	r3, r5
 800b36c:	4620      	mov	r0, r4
 800b36e:	4629      	mov	r1, r5
 800b370:	f7f5 fbf4 	bl	8000b5c <__aeabi_dcmpun>
 800b374:	b9a8      	cbnz	r0, 800b3a2 <asin+0x5a>
 800b376:	ec45 4b10 	vmov	d0, r4, r5
 800b37a:	f000 fae9 	bl	800b950 <fabs>
 800b37e:	4b0d      	ldr	r3, [pc, #52]	; (800b3b4 <asin+0x6c>)
 800b380:	ec51 0b10 	vmov	r0, r1, d0
 800b384:	2200      	movs	r2, #0
 800b386:	f7f5 fbdf 	bl	8000b48 <__aeabi_dcmpgt>
 800b38a:	b150      	cbz	r0, 800b3a2 <asin+0x5a>
 800b38c:	f7fd f916 	bl	80085bc <__errno>
 800b390:	ecbd 8b02 	vpop	{d8}
 800b394:	2321      	movs	r3, #33	; 0x21
 800b396:	6003      	str	r3, [r0, #0]
 800b398:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b39c:	4806      	ldr	r0, [pc, #24]	; (800b3b8 <asin+0x70>)
 800b39e:	f000 bae3 	b.w	800b968 <nan>
 800b3a2:	eeb0 0a48 	vmov.f32	s0, s16
 800b3a6:	eef0 0a68 	vmov.f32	s1, s17
 800b3aa:	ecbd 8b02 	vpop	{d8}
 800b3ae:	bd38      	pop	{r3, r4, r5, pc}
 800b3b0:	200001e0 	.word	0x200001e0
 800b3b4:	3ff00000 	.word	0x3ff00000
 800b3b8:	0800bef8 	.word	0x0800bef8
 800b3bc:	00000000 	.word	0x00000000

0800b3c0 <__ieee754_asin>:
 800b3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3c4:	ed2d 8b04 	vpush	{d8-d9}
 800b3c8:	ec55 4b10 	vmov	r4, r5, d0
 800b3cc:	4bcc      	ldr	r3, [pc, #816]	; (800b700 <__ieee754_asin+0x340>)
 800b3ce:	b083      	sub	sp, #12
 800b3d0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b3d4:	4598      	cmp	r8, r3
 800b3d6:	9501      	str	r5, [sp, #4]
 800b3d8:	dd35      	ble.n	800b446 <__ieee754_asin+0x86>
 800b3da:	ee10 3a10 	vmov	r3, s0
 800b3de:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800b3e2:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800b3e6:	ea58 0303 	orrs.w	r3, r8, r3
 800b3ea:	d117      	bne.n	800b41c <__ieee754_asin+0x5c>
 800b3ec:	a3aa      	add	r3, pc, #680	; (adr r3, 800b698 <__ieee754_asin+0x2d8>)
 800b3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f2:	ee10 0a10 	vmov	r0, s0
 800b3f6:	4629      	mov	r1, r5
 800b3f8:	f7f5 f916 	bl	8000628 <__aeabi_dmul>
 800b3fc:	a3a8      	add	r3, pc, #672	; (adr r3, 800b6a0 <__ieee754_asin+0x2e0>)
 800b3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b402:	4606      	mov	r6, r0
 800b404:	460f      	mov	r7, r1
 800b406:	4620      	mov	r0, r4
 800b408:	4629      	mov	r1, r5
 800b40a:	f7f5 f90d 	bl	8000628 <__aeabi_dmul>
 800b40e:	4602      	mov	r2, r0
 800b410:	460b      	mov	r3, r1
 800b412:	4630      	mov	r0, r6
 800b414:	4639      	mov	r1, r7
 800b416:	f7f4 ff51 	bl	80002bc <__adddf3>
 800b41a:	e00b      	b.n	800b434 <__ieee754_asin+0x74>
 800b41c:	ee10 2a10 	vmov	r2, s0
 800b420:	462b      	mov	r3, r5
 800b422:	ee10 0a10 	vmov	r0, s0
 800b426:	4629      	mov	r1, r5
 800b428:	f7f4 ff46 	bl	80002b8 <__aeabi_dsub>
 800b42c:	4602      	mov	r2, r0
 800b42e:	460b      	mov	r3, r1
 800b430:	f7f5 fa24 	bl	800087c <__aeabi_ddiv>
 800b434:	4604      	mov	r4, r0
 800b436:	460d      	mov	r5, r1
 800b438:	ec45 4b10 	vmov	d0, r4, r5
 800b43c:	b003      	add	sp, #12
 800b43e:	ecbd 8b04 	vpop	{d8-d9}
 800b442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b446:	4baf      	ldr	r3, [pc, #700]	; (800b704 <__ieee754_asin+0x344>)
 800b448:	4598      	cmp	r8, r3
 800b44a:	dc11      	bgt.n	800b470 <__ieee754_asin+0xb0>
 800b44c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b450:	f280 80ae 	bge.w	800b5b0 <__ieee754_asin+0x1f0>
 800b454:	a394      	add	r3, pc, #592	; (adr r3, 800b6a8 <__ieee754_asin+0x2e8>)
 800b456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b45a:	ee10 0a10 	vmov	r0, s0
 800b45e:	4629      	mov	r1, r5
 800b460:	f7f4 ff2c 	bl	80002bc <__adddf3>
 800b464:	4ba8      	ldr	r3, [pc, #672]	; (800b708 <__ieee754_asin+0x348>)
 800b466:	2200      	movs	r2, #0
 800b468:	f7f5 fb6e 	bl	8000b48 <__aeabi_dcmpgt>
 800b46c:	2800      	cmp	r0, #0
 800b46e:	d1e3      	bne.n	800b438 <__ieee754_asin+0x78>
 800b470:	ec45 4b10 	vmov	d0, r4, r5
 800b474:	f000 fa6c 	bl	800b950 <fabs>
 800b478:	49a3      	ldr	r1, [pc, #652]	; (800b708 <__ieee754_asin+0x348>)
 800b47a:	ec53 2b10 	vmov	r2, r3, d0
 800b47e:	2000      	movs	r0, #0
 800b480:	f7f4 ff1a 	bl	80002b8 <__aeabi_dsub>
 800b484:	4ba1      	ldr	r3, [pc, #644]	; (800b70c <__ieee754_asin+0x34c>)
 800b486:	2200      	movs	r2, #0
 800b488:	f7f5 f8ce 	bl	8000628 <__aeabi_dmul>
 800b48c:	a388      	add	r3, pc, #544	; (adr r3, 800b6b0 <__ieee754_asin+0x2f0>)
 800b48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b492:	4604      	mov	r4, r0
 800b494:	460d      	mov	r5, r1
 800b496:	f7f5 f8c7 	bl	8000628 <__aeabi_dmul>
 800b49a:	a387      	add	r3, pc, #540	; (adr r3, 800b6b8 <__ieee754_asin+0x2f8>)
 800b49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a0:	f7f4 ff0c 	bl	80002bc <__adddf3>
 800b4a4:	4622      	mov	r2, r4
 800b4a6:	462b      	mov	r3, r5
 800b4a8:	f7f5 f8be 	bl	8000628 <__aeabi_dmul>
 800b4ac:	a384      	add	r3, pc, #528	; (adr r3, 800b6c0 <__ieee754_asin+0x300>)
 800b4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b2:	f7f4 ff01 	bl	80002b8 <__aeabi_dsub>
 800b4b6:	4622      	mov	r2, r4
 800b4b8:	462b      	mov	r3, r5
 800b4ba:	f7f5 f8b5 	bl	8000628 <__aeabi_dmul>
 800b4be:	a382      	add	r3, pc, #520	; (adr r3, 800b6c8 <__ieee754_asin+0x308>)
 800b4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c4:	f7f4 fefa 	bl	80002bc <__adddf3>
 800b4c8:	4622      	mov	r2, r4
 800b4ca:	462b      	mov	r3, r5
 800b4cc:	f7f5 f8ac 	bl	8000628 <__aeabi_dmul>
 800b4d0:	a37f      	add	r3, pc, #508	; (adr r3, 800b6d0 <__ieee754_asin+0x310>)
 800b4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d6:	f7f4 feef 	bl	80002b8 <__aeabi_dsub>
 800b4da:	4622      	mov	r2, r4
 800b4dc:	462b      	mov	r3, r5
 800b4de:	f7f5 f8a3 	bl	8000628 <__aeabi_dmul>
 800b4e2:	a37d      	add	r3, pc, #500	; (adr r3, 800b6d8 <__ieee754_asin+0x318>)
 800b4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e8:	f7f4 fee8 	bl	80002bc <__adddf3>
 800b4ec:	4622      	mov	r2, r4
 800b4ee:	462b      	mov	r3, r5
 800b4f0:	f7f5 f89a 	bl	8000628 <__aeabi_dmul>
 800b4f4:	a37a      	add	r3, pc, #488	; (adr r3, 800b6e0 <__ieee754_asin+0x320>)
 800b4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fa:	ec41 0b18 	vmov	d8, r0, r1
 800b4fe:	4620      	mov	r0, r4
 800b500:	4629      	mov	r1, r5
 800b502:	f7f5 f891 	bl	8000628 <__aeabi_dmul>
 800b506:	a378      	add	r3, pc, #480	; (adr r3, 800b6e8 <__ieee754_asin+0x328>)
 800b508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50c:	f7f4 fed4 	bl	80002b8 <__aeabi_dsub>
 800b510:	4622      	mov	r2, r4
 800b512:	462b      	mov	r3, r5
 800b514:	f7f5 f888 	bl	8000628 <__aeabi_dmul>
 800b518:	a375      	add	r3, pc, #468	; (adr r3, 800b6f0 <__ieee754_asin+0x330>)
 800b51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b51e:	f7f4 fecd 	bl	80002bc <__adddf3>
 800b522:	4622      	mov	r2, r4
 800b524:	462b      	mov	r3, r5
 800b526:	f7f5 f87f 	bl	8000628 <__aeabi_dmul>
 800b52a:	a373      	add	r3, pc, #460	; (adr r3, 800b6f8 <__ieee754_asin+0x338>)
 800b52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b530:	f7f4 fec2 	bl	80002b8 <__aeabi_dsub>
 800b534:	4622      	mov	r2, r4
 800b536:	462b      	mov	r3, r5
 800b538:	f7f5 f876 	bl	8000628 <__aeabi_dmul>
 800b53c:	4b72      	ldr	r3, [pc, #456]	; (800b708 <__ieee754_asin+0x348>)
 800b53e:	2200      	movs	r2, #0
 800b540:	f7f4 febc 	bl	80002bc <__adddf3>
 800b544:	ec45 4b10 	vmov	d0, r4, r5
 800b548:	4606      	mov	r6, r0
 800b54a:	460f      	mov	r7, r1
 800b54c:	f000 f94c 	bl	800b7e8 <__ieee754_sqrt>
 800b550:	4b6f      	ldr	r3, [pc, #444]	; (800b710 <__ieee754_asin+0x350>)
 800b552:	4598      	cmp	r8, r3
 800b554:	ec5b ab10 	vmov	sl, fp, d0
 800b558:	f340 80dc 	ble.w	800b714 <__ieee754_asin+0x354>
 800b55c:	4632      	mov	r2, r6
 800b55e:	463b      	mov	r3, r7
 800b560:	ec51 0b18 	vmov	r0, r1, d8
 800b564:	f7f5 f98a 	bl	800087c <__aeabi_ddiv>
 800b568:	4652      	mov	r2, sl
 800b56a:	465b      	mov	r3, fp
 800b56c:	f7f5 f85c 	bl	8000628 <__aeabi_dmul>
 800b570:	4652      	mov	r2, sl
 800b572:	465b      	mov	r3, fp
 800b574:	f7f4 fea2 	bl	80002bc <__adddf3>
 800b578:	4602      	mov	r2, r0
 800b57a:	460b      	mov	r3, r1
 800b57c:	f7f4 fe9e 	bl	80002bc <__adddf3>
 800b580:	a347      	add	r3, pc, #284	; (adr r3, 800b6a0 <__ieee754_asin+0x2e0>)
 800b582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b586:	f7f4 fe97 	bl	80002b8 <__aeabi_dsub>
 800b58a:	4602      	mov	r2, r0
 800b58c:	460b      	mov	r3, r1
 800b58e:	a142      	add	r1, pc, #264	; (adr r1, 800b698 <__ieee754_asin+0x2d8>)
 800b590:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b594:	f7f4 fe90 	bl	80002b8 <__aeabi_dsub>
 800b598:	9b01      	ldr	r3, [sp, #4]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	bfdc      	itt	le
 800b59e:	4602      	movle	r2, r0
 800b5a0:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800b5a4:	4604      	mov	r4, r0
 800b5a6:	460d      	mov	r5, r1
 800b5a8:	bfdc      	itt	le
 800b5aa:	4614      	movle	r4, r2
 800b5ac:	461d      	movle	r5, r3
 800b5ae:	e743      	b.n	800b438 <__ieee754_asin+0x78>
 800b5b0:	ee10 2a10 	vmov	r2, s0
 800b5b4:	ee10 0a10 	vmov	r0, s0
 800b5b8:	462b      	mov	r3, r5
 800b5ba:	4629      	mov	r1, r5
 800b5bc:	f7f5 f834 	bl	8000628 <__aeabi_dmul>
 800b5c0:	a33b      	add	r3, pc, #236	; (adr r3, 800b6b0 <__ieee754_asin+0x2f0>)
 800b5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c6:	4606      	mov	r6, r0
 800b5c8:	460f      	mov	r7, r1
 800b5ca:	f7f5 f82d 	bl	8000628 <__aeabi_dmul>
 800b5ce:	a33a      	add	r3, pc, #232	; (adr r3, 800b6b8 <__ieee754_asin+0x2f8>)
 800b5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d4:	f7f4 fe72 	bl	80002bc <__adddf3>
 800b5d8:	4632      	mov	r2, r6
 800b5da:	463b      	mov	r3, r7
 800b5dc:	f7f5 f824 	bl	8000628 <__aeabi_dmul>
 800b5e0:	a337      	add	r3, pc, #220	; (adr r3, 800b6c0 <__ieee754_asin+0x300>)
 800b5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e6:	f7f4 fe67 	bl	80002b8 <__aeabi_dsub>
 800b5ea:	4632      	mov	r2, r6
 800b5ec:	463b      	mov	r3, r7
 800b5ee:	f7f5 f81b 	bl	8000628 <__aeabi_dmul>
 800b5f2:	a335      	add	r3, pc, #212	; (adr r3, 800b6c8 <__ieee754_asin+0x308>)
 800b5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f8:	f7f4 fe60 	bl	80002bc <__adddf3>
 800b5fc:	4632      	mov	r2, r6
 800b5fe:	463b      	mov	r3, r7
 800b600:	f7f5 f812 	bl	8000628 <__aeabi_dmul>
 800b604:	a332      	add	r3, pc, #200	; (adr r3, 800b6d0 <__ieee754_asin+0x310>)
 800b606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60a:	f7f4 fe55 	bl	80002b8 <__aeabi_dsub>
 800b60e:	4632      	mov	r2, r6
 800b610:	463b      	mov	r3, r7
 800b612:	f7f5 f809 	bl	8000628 <__aeabi_dmul>
 800b616:	a330      	add	r3, pc, #192	; (adr r3, 800b6d8 <__ieee754_asin+0x318>)
 800b618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61c:	f7f4 fe4e 	bl	80002bc <__adddf3>
 800b620:	4632      	mov	r2, r6
 800b622:	463b      	mov	r3, r7
 800b624:	f7f5 f800 	bl	8000628 <__aeabi_dmul>
 800b628:	a32d      	add	r3, pc, #180	; (adr r3, 800b6e0 <__ieee754_asin+0x320>)
 800b62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62e:	4680      	mov	r8, r0
 800b630:	4689      	mov	r9, r1
 800b632:	4630      	mov	r0, r6
 800b634:	4639      	mov	r1, r7
 800b636:	f7f4 fff7 	bl	8000628 <__aeabi_dmul>
 800b63a:	a32b      	add	r3, pc, #172	; (adr r3, 800b6e8 <__ieee754_asin+0x328>)
 800b63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b640:	f7f4 fe3a 	bl	80002b8 <__aeabi_dsub>
 800b644:	4632      	mov	r2, r6
 800b646:	463b      	mov	r3, r7
 800b648:	f7f4 ffee 	bl	8000628 <__aeabi_dmul>
 800b64c:	a328      	add	r3, pc, #160	; (adr r3, 800b6f0 <__ieee754_asin+0x330>)
 800b64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b652:	f7f4 fe33 	bl	80002bc <__adddf3>
 800b656:	4632      	mov	r2, r6
 800b658:	463b      	mov	r3, r7
 800b65a:	f7f4 ffe5 	bl	8000628 <__aeabi_dmul>
 800b65e:	a326      	add	r3, pc, #152	; (adr r3, 800b6f8 <__ieee754_asin+0x338>)
 800b660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b664:	f7f4 fe28 	bl	80002b8 <__aeabi_dsub>
 800b668:	4632      	mov	r2, r6
 800b66a:	463b      	mov	r3, r7
 800b66c:	f7f4 ffdc 	bl	8000628 <__aeabi_dmul>
 800b670:	4b25      	ldr	r3, [pc, #148]	; (800b708 <__ieee754_asin+0x348>)
 800b672:	2200      	movs	r2, #0
 800b674:	f7f4 fe22 	bl	80002bc <__adddf3>
 800b678:	4602      	mov	r2, r0
 800b67a:	460b      	mov	r3, r1
 800b67c:	4640      	mov	r0, r8
 800b67e:	4649      	mov	r1, r9
 800b680:	f7f5 f8fc 	bl	800087c <__aeabi_ddiv>
 800b684:	4622      	mov	r2, r4
 800b686:	462b      	mov	r3, r5
 800b688:	f7f4 ffce 	bl	8000628 <__aeabi_dmul>
 800b68c:	4602      	mov	r2, r0
 800b68e:	460b      	mov	r3, r1
 800b690:	4620      	mov	r0, r4
 800b692:	4629      	mov	r1, r5
 800b694:	e6bf      	b.n	800b416 <__ieee754_asin+0x56>
 800b696:	bf00      	nop
 800b698:	54442d18 	.word	0x54442d18
 800b69c:	3ff921fb 	.word	0x3ff921fb
 800b6a0:	33145c07 	.word	0x33145c07
 800b6a4:	3c91a626 	.word	0x3c91a626
 800b6a8:	8800759c 	.word	0x8800759c
 800b6ac:	7e37e43c 	.word	0x7e37e43c
 800b6b0:	0dfdf709 	.word	0x0dfdf709
 800b6b4:	3f023de1 	.word	0x3f023de1
 800b6b8:	7501b288 	.word	0x7501b288
 800b6bc:	3f49efe0 	.word	0x3f49efe0
 800b6c0:	b5688f3b 	.word	0xb5688f3b
 800b6c4:	3fa48228 	.word	0x3fa48228
 800b6c8:	0e884455 	.word	0x0e884455
 800b6cc:	3fc9c155 	.word	0x3fc9c155
 800b6d0:	03eb6f7d 	.word	0x03eb6f7d
 800b6d4:	3fd4d612 	.word	0x3fd4d612
 800b6d8:	55555555 	.word	0x55555555
 800b6dc:	3fc55555 	.word	0x3fc55555
 800b6e0:	b12e9282 	.word	0xb12e9282
 800b6e4:	3fb3b8c5 	.word	0x3fb3b8c5
 800b6e8:	1b8d0159 	.word	0x1b8d0159
 800b6ec:	3fe6066c 	.word	0x3fe6066c
 800b6f0:	9c598ac8 	.word	0x9c598ac8
 800b6f4:	40002ae5 	.word	0x40002ae5
 800b6f8:	1c8a2d4b 	.word	0x1c8a2d4b
 800b6fc:	40033a27 	.word	0x40033a27
 800b700:	3fefffff 	.word	0x3fefffff
 800b704:	3fdfffff 	.word	0x3fdfffff
 800b708:	3ff00000 	.word	0x3ff00000
 800b70c:	3fe00000 	.word	0x3fe00000
 800b710:	3fef3332 	.word	0x3fef3332
 800b714:	ee10 2a10 	vmov	r2, s0
 800b718:	ee10 0a10 	vmov	r0, s0
 800b71c:	465b      	mov	r3, fp
 800b71e:	4659      	mov	r1, fp
 800b720:	f7f4 fdcc 	bl	80002bc <__adddf3>
 800b724:	4632      	mov	r2, r6
 800b726:	463b      	mov	r3, r7
 800b728:	ec41 0b19 	vmov	d9, r0, r1
 800b72c:	ec51 0b18 	vmov	r0, r1, d8
 800b730:	f7f5 f8a4 	bl	800087c <__aeabi_ddiv>
 800b734:	4602      	mov	r2, r0
 800b736:	460b      	mov	r3, r1
 800b738:	ec51 0b19 	vmov	r0, r1, d9
 800b73c:	f7f4 ff74 	bl	8000628 <__aeabi_dmul>
 800b740:	f04f 0800 	mov.w	r8, #0
 800b744:	4606      	mov	r6, r0
 800b746:	460f      	mov	r7, r1
 800b748:	4642      	mov	r2, r8
 800b74a:	465b      	mov	r3, fp
 800b74c:	4640      	mov	r0, r8
 800b74e:	4659      	mov	r1, fp
 800b750:	f7f4 ff6a 	bl	8000628 <__aeabi_dmul>
 800b754:	4602      	mov	r2, r0
 800b756:	460b      	mov	r3, r1
 800b758:	4620      	mov	r0, r4
 800b75a:	4629      	mov	r1, r5
 800b75c:	f7f4 fdac 	bl	80002b8 <__aeabi_dsub>
 800b760:	4642      	mov	r2, r8
 800b762:	4604      	mov	r4, r0
 800b764:	460d      	mov	r5, r1
 800b766:	465b      	mov	r3, fp
 800b768:	4650      	mov	r0, sl
 800b76a:	4659      	mov	r1, fp
 800b76c:	f7f4 fda6 	bl	80002bc <__adddf3>
 800b770:	4602      	mov	r2, r0
 800b772:	460b      	mov	r3, r1
 800b774:	4620      	mov	r0, r4
 800b776:	4629      	mov	r1, r5
 800b778:	f7f5 f880 	bl	800087c <__aeabi_ddiv>
 800b77c:	4602      	mov	r2, r0
 800b77e:	460b      	mov	r3, r1
 800b780:	f7f4 fd9c 	bl	80002bc <__adddf3>
 800b784:	4602      	mov	r2, r0
 800b786:	460b      	mov	r3, r1
 800b788:	a113      	add	r1, pc, #76	; (adr r1, 800b7d8 <__ieee754_asin+0x418>)
 800b78a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b78e:	f7f4 fd93 	bl	80002b8 <__aeabi_dsub>
 800b792:	4602      	mov	r2, r0
 800b794:	460b      	mov	r3, r1
 800b796:	4630      	mov	r0, r6
 800b798:	4639      	mov	r1, r7
 800b79a:	f7f4 fd8d 	bl	80002b8 <__aeabi_dsub>
 800b79e:	4642      	mov	r2, r8
 800b7a0:	4604      	mov	r4, r0
 800b7a2:	460d      	mov	r5, r1
 800b7a4:	465b      	mov	r3, fp
 800b7a6:	4640      	mov	r0, r8
 800b7a8:	4659      	mov	r1, fp
 800b7aa:	f7f4 fd87 	bl	80002bc <__adddf3>
 800b7ae:	4602      	mov	r2, r0
 800b7b0:	460b      	mov	r3, r1
 800b7b2:	a10b      	add	r1, pc, #44	; (adr r1, 800b7e0 <__ieee754_asin+0x420>)
 800b7b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7b8:	f7f4 fd7e 	bl	80002b8 <__aeabi_dsub>
 800b7bc:	4602      	mov	r2, r0
 800b7be:	460b      	mov	r3, r1
 800b7c0:	4620      	mov	r0, r4
 800b7c2:	4629      	mov	r1, r5
 800b7c4:	f7f4 fd78 	bl	80002b8 <__aeabi_dsub>
 800b7c8:	4602      	mov	r2, r0
 800b7ca:	460b      	mov	r3, r1
 800b7cc:	a104      	add	r1, pc, #16	; (adr r1, 800b7e0 <__ieee754_asin+0x420>)
 800b7ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7d2:	e6df      	b.n	800b594 <__ieee754_asin+0x1d4>
 800b7d4:	f3af 8000 	nop.w
 800b7d8:	33145c07 	.word	0x33145c07
 800b7dc:	3c91a626 	.word	0x3c91a626
 800b7e0:	54442d18 	.word	0x54442d18
 800b7e4:	3fe921fb 	.word	0x3fe921fb

0800b7e8 <__ieee754_sqrt>:
 800b7e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7ec:	ec55 4b10 	vmov	r4, r5, d0
 800b7f0:	4e56      	ldr	r6, [pc, #344]	; (800b94c <__ieee754_sqrt+0x164>)
 800b7f2:	43ae      	bics	r6, r5
 800b7f4:	ee10 0a10 	vmov	r0, s0
 800b7f8:	ee10 3a10 	vmov	r3, s0
 800b7fc:	4629      	mov	r1, r5
 800b7fe:	462a      	mov	r2, r5
 800b800:	d110      	bne.n	800b824 <__ieee754_sqrt+0x3c>
 800b802:	ee10 2a10 	vmov	r2, s0
 800b806:	462b      	mov	r3, r5
 800b808:	f7f4 ff0e 	bl	8000628 <__aeabi_dmul>
 800b80c:	4602      	mov	r2, r0
 800b80e:	460b      	mov	r3, r1
 800b810:	4620      	mov	r0, r4
 800b812:	4629      	mov	r1, r5
 800b814:	f7f4 fd52 	bl	80002bc <__adddf3>
 800b818:	4604      	mov	r4, r0
 800b81a:	460d      	mov	r5, r1
 800b81c:	ec45 4b10 	vmov	d0, r4, r5
 800b820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b824:	2d00      	cmp	r5, #0
 800b826:	dc10      	bgt.n	800b84a <__ieee754_sqrt+0x62>
 800b828:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b82c:	4330      	orrs	r0, r6
 800b82e:	d0f5      	beq.n	800b81c <__ieee754_sqrt+0x34>
 800b830:	b15d      	cbz	r5, 800b84a <__ieee754_sqrt+0x62>
 800b832:	ee10 2a10 	vmov	r2, s0
 800b836:	462b      	mov	r3, r5
 800b838:	ee10 0a10 	vmov	r0, s0
 800b83c:	f7f4 fd3c 	bl	80002b8 <__aeabi_dsub>
 800b840:	4602      	mov	r2, r0
 800b842:	460b      	mov	r3, r1
 800b844:	f7f5 f81a 	bl	800087c <__aeabi_ddiv>
 800b848:	e7e6      	b.n	800b818 <__ieee754_sqrt+0x30>
 800b84a:	1509      	asrs	r1, r1, #20
 800b84c:	d076      	beq.n	800b93c <__ieee754_sqrt+0x154>
 800b84e:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800b852:	07ce      	lsls	r6, r1, #31
 800b854:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800b858:	bf5e      	ittt	pl
 800b85a:	0fda      	lsrpl	r2, r3, #31
 800b85c:	005b      	lslpl	r3, r3, #1
 800b85e:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800b862:	0fda      	lsrs	r2, r3, #31
 800b864:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800b868:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800b86c:	2000      	movs	r0, #0
 800b86e:	106d      	asrs	r5, r5, #1
 800b870:	005b      	lsls	r3, r3, #1
 800b872:	f04f 0e16 	mov.w	lr, #22
 800b876:	4684      	mov	ip, r0
 800b878:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b87c:	eb0c 0401 	add.w	r4, ip, r1
 800b880:	4294      	cmp	r4, r2
 800b882:	bfde      	ittt	le
 800b884:	1b12      	suble	r2, r2, r4
 800b886:	eb04 0c01 	addle.w	ip, r4, r1
 800b88a:	1840      	addle	r0, r0, r1
 800b88c:	0052      	lsls	r2, r2, #1
 800b88e:	f1be 0e01 	subs.w	lr, lr, #1
 800b892:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800b896:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b89a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b89e:	d1ed      	bne.n	800b87c <__ieee754_sqrt+0x94>
 800b8a0:	4671      	mov	r1, lr
 800b8a2:	2720      	movs	r7, #32
 800b8a4:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b8a8:	4562      	cmp	r2, ip
 800b8aa:	eb04 060e 	add.w	r6, r4, lr
 800b8ae:	dc02      	bgt.n	800b8b6 <__ieee754_sqrt+0xce>
 800b8b0:	d113      	bne.n	800b8da <__ieee754_sqrt+0xf2>
 800b8b2:	429e      	cmp	r6, r3
 800b8b4:	d811      	bhi.n	800b8da <__ieee754_sqrt+0xf2>
 800b8b6:	2e00      	cmp	r6, #0
 800b8b8:	eb06 0e04 	add.w	lr, r6, r4
 800b8bc:	da43      	bge.n	800b946 <__ieee754_sqrt+0x15e>
 800b8be:	f1be 0f00 	cmp.w	lr, #0
 800b8c2:	db40      	blt.n	800b946 <__ieee754_sqrt+0x15e>
 800b8c4:	f10c 0801 	add.w	r8, ip, #1
 800b8c8:	eba2 020c 	sub.w	r2, r2, ip
 800b8cc:	429e      	cmp	r6, r3
 800b8ce:	bf88      	it	hi
 800b8d0:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800b8d4:	1b9b      	subs	r3, r3, r6
 800b8d6:	4421      	add	r1, r4
 800b8d8:	46c4      	mov	ip, r8
 800b8da:	0052      	lsls	r2, r2, #1
 800b8dc:	3f01      	subs	r7, #1
 800b8de:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800b8e2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b8e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b8ea:	d1dd      	bne.n	800b8a8 <__ieee754_sqrt+0xc0>
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	d006      	beq.n	800b8fe <__ieee754_sqrt+0x116>
 800b8f0:	1c4c      	adds	r4, r1, #1
 800b8f2:	bf13      	iteet	ne
 800b8f4:	3101      	addne	r1, #1
 800b8f6:	3001      	addeq	r0, #1
 800b8f8:	4639      	moveq	r1, r7
 800b8fa:	f021 0101 	bicne.w	r1, r1, #1
 800b8fe:	1043      	asrs	r3, r0, #1
 800b900:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b904:	0849      	lsrs	r1, r1, #1
 800b906:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b90a:	07c2      	lsls	r2, r0, #31
 800b90c:	bf48      	it	mi
 800b90e:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800b912:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800b916:	460c      	mov	r4, r1
 800b918:	463d      	mov	r5, r7
 800b91a:	e77f      	b.n	800b81c <__ieee754_sqrt+0x34>
 800b91c:	0ada      	lsrs	r2, r3, #11
 800b91e:	3815      	subs	r0, #21
 800b920:	055b      	lsls	r3, r3, #21
 800b922:	2a00      	cmp	r2, #0
 800b924:	d0fa      	beq.n	800b91c <__ieee754_sqrt+0x134>
 800b926:	02d7      	lsls	r7, r2, #11
 800b928:	d50a      	bpl.n	800b940 <__ieee754_sqrt+0x158>
 800b92a:	f1c1 0420 	rsb	r4, r1, #32
 800b92e:	fa23 f404 	lsr.w	r4, r3, r4
 800b932:	1e4d      	subs	r5, r1, #1
 800b934:	408b      	lsls	r3, r1
 800b936:	4322      	orrs	r2, r4
 800b938:	1b41      	subs	r1, r0, r5
 800b93a:	e788      	b.n	800b84e <__ieee754_sqrt+0x66>
 800b93c:	4608      	mov	r0, r1
 800b93e:	e7f0      	b.n	800b922 <__ieee754_sqrt+0x13a>
 800b940:	0052      	lsls	r2, r2, #1
 800b942:	3101      	adds	r1, #1
 800b944:	e7ef      	b.n	800b926 <__ieee754_sqrt+0x13e>
 800b946:	46e0      	mov	r8, ip
 800b948:	e7be      	b.n	800b8c8 <__ieee754_sqrt+0xe0>
 800b94a:	bf00      	nop
 800b94c:	7ff00000 	.word	0x7ff00000

0800b950 <fabs>:
 800b950:	ec51 0b10 	vmov	r0, r1, d0
 800b954:	ee10 2a10 	vmov	r2, s0
 800b958:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b95c:	ec43 2b10 	vmov	d0, r2, r3
 800b960:	4770      	bx	lr
 800b962:	0000      	movs	r0, r0
 800b964:	0000      	movs	r0, r0
	...

0800b968 <nan>:
 800b968:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b970 <nan+0x8>
 800b96c:	4770      	bx	lr
 800b96e:	bf00      	nop
 800b970:	00000000 	.word	0x00000000
 800b974:	7ff80000 	.word	0x7ff80000

0800b978 <_init>:
 800b978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b97a:	bf00      	nop
 800b97c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b97e:	bc08      	pop	{r3}
 800b980:	469e      	mov	lr, r3
 800b982:	4770      	bx	lr

0800b984 <_fini>:
 800b984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b986:	bf00      	nop
 800b988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b98a:	bc08      	pop	{r3}
 800b98c:	469e      	mov	lr, r3
 800b98e:	4770      	bx	lr
